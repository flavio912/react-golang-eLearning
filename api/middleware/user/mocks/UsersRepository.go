// Code generated by mockery v2.0.4. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	gentypes "gitlab.codesigned.co.uk/ttc-heathrow/ttc-project/admin-react/api/gentypes"

	models "gitlab.codesigned.co.uk/ttc-heathrow/ttc-project/admin-react/api/models"

	user "gitlab.codesigned.co.uk/ttc-heathrow/ttc-project/admin-react/api/middleware/user"
)

// UsersRepository is an autogenerated mock type for the UsersRepository type
type UsersRepository struct {
	mock.Mock
}

// ApproveCompany provides a mock function with given fields: companyUUID
func (_m *UsersRepository) ApproveCompany(companyUUID gentypes.UUID) (models.Company, error) {
	ret := _m.Called(companyUUID)

	var r0 models.Company
	if rf, ok := ret.Get(0).(func(gentypes.UUID) models.Company); ok {
		r0 = rf(companyUUID)
	} else {
		r0 = ret.Get(0).(models.Company)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(gentypes.UUID) error); ok {
		r1 = rf(companyUUID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Company provides a mock function with given fields: uuid
func (_m *UsersRepository) Company(uuid gentypes.UUID) (models.Company, error) {
	ret := _m.Called(uuid)

	var r0 models.Company
	if rf, ok := ret.Get(0).(func(gentypes.UUID) models.Company); ok {
		r0 = rf(uuid)
	} else {
		r0 = ret.Get(0).(models.Company)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(gentypes.UUID) error); ok {
		r1 = rf(uuid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CompanyExists provides a mock function with given fields: companyUUID
func (_m *UsersRepository) CompanyExists(companyUUID gentypes.UUID) bool {
	ret := _m.Called(companyUUID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(gentypes.UUID) bool); ok {
		r0 = rf(companyUUID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// CompanyManagesCourseTakers provides a mock function with given fields: companyUUID, courseTakerUUIDs
func (_m *UsersRepository) CompanyManagesCourseTakers(companyUUID gentypes.UUID, courseTakerUUIDs []gentypes.UUID) (bool, error) {
	ret := _m.Called(companyUUID, courseTakerUUIDs)

	var r0 bool
	if rf, ok := ret.Get(0).(func(gentypes.UUID, []gentypes.UUID) bool); ok {
		r0 = rf(companyUUID, courseTakerUUIDs)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(gentypes.UUID, []gentypes.UUID) error); ok {
		r1 = rf(companyUUID, courseTakerUUIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateCompany provides a mock function with given fields: company
func (_m *UsersRepository) CreateCompany(company gentypes.CreateCompanyInput) (models.Company, error) {
	ret := _m.Called(company)

	var r0 models.Company
	if rf, ok := ret.Get(0).(func(gentypes.CreateCompanyInput) models.Company); ok {
		r0 = rf(company)
	} else {
		r0 = ret.Get(0).(models.Company)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(gentypes.CreateCompanyInput) error); ok {
		r1 = rf(company)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateCompanyRequest provides a mock function with given fields: company, manager
func (_m *UsersRepository) CreateCompanyRequest(company gentypes.CreateCompanyInput, manager gentypes.CreateManagerInput) error {
	ret := _m.Called(company, manager)

	var r0 error
	if rf, ok := ret.Get(0).(func(gentypes.CreateCompanyInput, gentypes.CreateManagerInput) error); ok {
		r0 = rf(company, manager)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateDelegate provides a mock function with given fields: delegateDetails, s3UploadKey, password, company, beforeCommit
func (_m *UsersRepository) CreateDelegate(delegateDetails gentypes.CreateDelegateInput, s3UploadKey *string, password *string, company models.Company, beforeCommit *func(models.Delegate) bool) (models.Delegate, error) {
	ret := _m.Called(delegateDetails, s3UploadKey, password, company, beforeCommit)

	var r0 models.Delegate
	if rf, ok := ret.Get(0).(func(gentypes.CreateDelegateInput, *string, *string, models.Company, *func(models.Delegate) bool) models.Delegate); ok {
		r0 = rf(delegateDetails, s3UploadKey, password, company, beforeCommit)
	} else {
		r0 = ret.Get(0).(models.Delegate)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(gentypes.CreateDelegateInput, *string, *string, models.Company, *func(models.Delegate) bool) error); ok {
		r1 = rf(delegateDetails, s3UploadKey, password, company, beforeCommit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateHistoricalCourse provides a mock function with given fields: course
func (_m *UsersRepository) CreateHistoricalCourse(course models.HistoricalCourse) (models.HistoricalCourse, error) {
	ret := _m.Called(course)

	var r0 models.HistoricalCourse
	if rf, ok := ret.Get(0).(func(models.HistoricalCourse) models.HistoricalCourse); ok {
		r0 = rf(course)
	} else {
		r0 = ret.Get(0).(models.HistoricalCourse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(models.HistoricalCourse) error); ok {
		r1 = rf(course)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateIndividual provides a mock function with given fields: input
func (_m *UsersRepository) CreateIndividual(input gentypes.CreateIndividualInput) (models.Individual, error) {
	ret := _m.Called(input)

	var r0 models.Individual
	if rf, ok := ret.Get(0).(func(gentypes.CreateIndividualInput) models.Individual); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Get(0).(models.Individual)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(gentypes.CreateIndividualInput) error); ok {
		r1 = rf(input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateManager provides a mock function with given fields: managerDetails, companyUUID
func (_m *UsersRepository) CreateManager(managerDetails gentypes.CreateManagerInput, companyUUID gentypes.UUID) (models.Manager, error) {
	ret := _m.Called(managerDetails, companyUUID)

	var r0 models.Manager
	if rf, ok := ret.Get(0).(func(gentypes.CreateManagerInput, gentypes.UUID) models.Manager); ok {
		r0 = rf(managerDetails, companyUUID)
	} else {
		r0 = ret.Get(0).(models.Manager)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(gentypes.CreateManagerInput, gentypes.UUID) error); ok {
		r1 = rf(managerDetails, companyUUID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTakerActivity provides a mock function with given fields: courseTaker, activityType, relatedCourseID
func (_m *UsersRepository) CreateTakerActivity(courseTaker gentypes.UUID, activityType gentypes.ActivityType, relatedCourseID *uint) (models.CourseTakerActivity, error) {
	ret := _m.Called(courseTaker, activityType, relatedCourseID)

	var r0 models.CourseTakerActivity
	if rf, ok := ret.Get(0).(func(gentypes.UUID, gentypes.ActivityType, *uint) models.CourseTakerActivity); ok {
		r0 = rf(courseTaker, activityType, relatedCourseID)
	} else {
		r0 = ret.Get(0).(models.CourseTakerActivity)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(gentypes.UUID, gentypes.ActivityType, *uint) error); ok {
		r1 = rf(courseTaker, activityType, relatedCourseID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delegate provides a mock function with given fields: uuid
func (_m *UsersRepository) Delegate(uuid gentypes.UUID) (models.Delegate, error) {
	ret := _m.Called(uuid)

	var r0 models.Delegate
	if rf, ok := ret.Get(0).(func(gentypes.UUID) models.Delegate); ok {
		r0 = rf(uuid)
	} else {
		r0 = ret.Get(0).(models.Delegate)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(gentypes.UUID) error); ok {
		r1 = rf(uuid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteIndividual provides a mock function with given fields: uuid
func (_m *UsersRepository) DeleteIndividual(uuid gentypes.UUID) (bool, error) {
	ret := _m.Called(uuid)

	var r0 bool
	if rf, ok := ret.Get(0).(func(gentypes.UUID) bool); ok {
		r0 = rf(uuid)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(gentypes.UUID) error); ok {
		r1 = rf(uuid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteManager provides a mock function with given fields: uuid
func (_m *UsersRepository) DeleteManager(uuid gentypes.UUID) (bool, error) {
	ret := _m.Called(uuid)

	var r0 bool
	if rf, ok := ret.Get(0).(func(gentypes.UUID) bool); ok {
		r0 = rf(uuid)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(gentypes.UUID) error); ok {
		r1 = rf(uuid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTakerActivity provides a mock function with given fields: activityUUID
func (_m *UsersRepository) DeleteTakerActivity(activityUUID gentypes.UUID) error {
	ret := _m.Called(activityUUID)

	var r0 error
	if rf, ok := ret.Get(0).(func(gentypes.UUID) error); ok {
		r0 = rf(activityUUID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAddressesByIDs provides a mock function with given fields: ids
func (_m *UsersRepository) GetAddressesByIDs(ids []uint) ([]models.Address, error) {
	ret := _m.Called(ids)

	var r0 []models.Address
	if rf, ok := ret.Get(0).(func([]uint) []models.Address); ok {
		r0 = rf(ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Address)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]uint) error); ok {
		r1 = rf(ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCompaniesByUUID provides a mock function with given fields: uuids
func (_m *UsersRepository) GetCompaniesByUUID(uuids []gentypes.UUID) ([]models.Company, error) {
	ret := _m.Called(uuids)

	var r0 []models.Company
	if rf, ok := ret.Get(0).(func([]gentypes.UUID) []models.Company); ok {
		r0 = rf(uuids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Company)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]gentypes.UUID) error); ok {
		r1 = rf(uuids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCompanyUUIDs provides a mock function with given fields: page, filter, orderBy
func (_m *UsersRepository) GetCompanyUUIDs(page *gentypes.Page, filter *gentypes.CompanyFilter, orderBy *gentypes.OrderBy) ([]gentypes.UUID, gentypes.PageInfo, error) {
	ret := _m.Called(page, filter, orderBy)

	var r0 []gentypes.UUID
	if rf, ok := ret.Get(0).(func(*gentypes.Page, *gentypes.CompanyFilter, *gentypes.OrderBy) []gentypes.UUID); ok {
		r0 = rf(page, filter, orderBy)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]gentypes.UUID)
		}
	}

	var r1 gentypes.PageInfo
	if rf, ok := ret.Get(1).(func(*gentypes.Page, *gentypes.CompanyFilter, *gentypes.OrderBy) gentypes.PageInfo); ok {
		r1 = rf(page, filter, orderBy)
	} else {
		r1 = ret.Get(1).(gentypes.PageInfo)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(*gentypes.Page, *gentypes.CompanyFilter, *gentypes.OrderBy) error); ok {
		r2 = rf(page, filter, orderBy)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetDelegates provides a mock function with given fields: page, filter, orderBy, companyUUID
func (_m *UsersRepository) GetDelegates(page *gentypes.Page, filter *gentypes.DelegatesFilter, orderBy *gentypes.OrderBy, companyUUID *gentypes.UUID) ([]models.Delegate, gentypes.PageInfo, error) {
	ret := _m.Called(page, filter, orderBy, companyUUID)

	var r0 []models.Delegate
	if rf, ok := ret.Get(0).(func(*gentypes.Page, *gentypes.DelegatesFilter, *gentypes.OrderBy, *gentypes.UUID) []models.Delegate); ok {
		r0 = rf(page, filter, orderBy, companyUUID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Delegate)
		}
	}

	var r1 gentypes.PageInfo
	if rf, ok := ret.Get(1).(func(*gentypes.Page, *gentypes.DelegatesFilter, *gentypes.OrderBy, *gentypes.UUID) gentypes.PageInfo); ok {
		r1 = rf(page, filter, orderBy, companyUUID)
	} else {
		r1 = ret.Get(1).(gentypes.PageInfo)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(*gentypes.Page, *gentypes.DelegatesFilter, *gentypes.OrderBy, *gentypes.UUID) error); ok {
		r2 = rf(page, filter, orderBy, companyUUID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetManagerIDsByCompany provides a mock function with given fields: companyUUID, page, filter, orderBy
func (_m *UsersRepository) GetManagerIDsByCompany(companyUUID gentypes.UUID, page *gentypes.Page, filter *gentypes.ManagersFilter, orderBy *gentypes.OrderBy) ([]gentypes.UUID, gentypes.PageInfo, error) {
	ret := _m.Called(companyUUID, page, filter, orderBy)

	var r0 []gentypes.UUID
	if rf, ok := ret.Get(0).(func(gentypes.UUID, *gentypes.Page, *gentypes.ManagersFilter, *gentypes.OrderBy) []gentypes.UUID); ok {
		r0 = rf(companyUUID, page, filter, orderBy)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]gentypes.UUID)
		}
	}

	var r1 gentypes.PageInfo
	if rf, ok := ret.Get(1).(func(gentypes.UUID, *gentypes.Page, *gentypes.ManagersFilter, *gentypes.OrderBy) gentypes.PageInfo); ok {
		r1 = rf(companyUUID, page, filter, orderBy)
	} else {
		r1 = ret.Get(1).(gentypes.PageInfo)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(gentypes.UUID, *gentypes.Page, *gentypes.ManagersFilter, *gentypes.OrderBy) error); ok {
		r2 = rf(companyUUID, page, filter, orderBy)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetManagers provides a mock function with given fields: page, filter, orderBy
func (_m *UsersRepository) GetManagers(page *gentypes.Page, filter *gentypes.ManagersFilter, orderBy *gentypes.OrderBy) ([]models.Manager, gentypes.PageInfo, error) {
	ret := _m.Called(page, filter, orderBy)

	var r0 []models.Manager
	if rf, ok := ret.Get(0).(func(*gentypes.Page, *gentypes.ManagersFilter, *gentypes.OrderBy) []models.Manager); ok {
		r0 = rf(page, filter, orderBy)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Manager)
		}
	}

	var r1 gentypes.PageInfo
	if rf, ok := ret.Get(1).(func(*gentypes.Page, *gentypes.ManagersFilter, *gentypes.OrderBy) gentypes.PageInfo); ok {
		r1 = rf(page, filter, orderBy)
	} else {
		r1 = ret.Get(1).(gentypes.PageInfo)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(*gentypes.Page, *gentypes.ManagersFilter, *gentypes.OrderBy) error); ok {
		r2 = rf(page, filter, orderBy)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetManagersByUUID provides a mock function with given fields: uuids
func (_m *UsersRepository) GetManagersByUUID(uuids []gentypes.UUID) ([]models.Manager, error) {
	ret := _m.Called(uuids)

	var r0 []models.Manager
	if rf, ok := ret.Get(0).(func([]gentypes.UUID) []models.Manager); ok {
		r0 = rf(uuids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Manager)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]gentypes.UUID) error); ok {
		r1 = rf(uuids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HistoricalCourse provides a mock function with given fields: uuid
func (_m *UsersRepository) HistoricalCourse(uuid gentypes.UUID) (models.HistoricalCourse, error) {
	ret := _m.Called(uuid)

	var r0 models.HistoricalCourse
	if rf, ok := ret.Get(0).(func(gentypes.UUID) models.HistoricalCourse); ok {
		r0 = rf(uuid)
	} else {
		r0 = ret.Get(0).(models.HistoricalCourse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(gentypes.UUID) error); ok {
		r1 = rf(uuid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Individual provides a mock function with given fields: uuid
func (_m *UsersRepository) Individual(uuid gentypes.UUID) (models.Individual, error) {
	ret := _m.Called(uuid)

	var r0 models.Individual
	if rf, ok := ret.Get(0).(func(gentypes.UUID) models.Individual); ok {
		r0 = rf(uuid)
	} else {
		r0 = ret.Get(0).(models.Individual)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(gentypes.UUID) error); ok {
		r1 = rf(uuid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Individuals provides a mock function with given fields: page, filter, orderBy
func (_m *UsersRepository) Individuals(page *gentypes.Page, filter *gentypes.IndividualFilter, orderBy *gentypes.OrderBy) ([]models.Individual, gentypes.PageInfo, error) {
	ret := _m.Called(page, filter, orderBy)

	var r0 []models.Individual
	if rf, ok := ret.Get(0).(func(*gentypes.Page, *gentypes.IndividualFilter, *gentypes.OrderBy) []models.Individual); ok {
		r0 = rf(page, filter, orderBy)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Individual)
		}
	}

	var r1 gentypes.PageInfo
	if rf, ok := ret.Get(1).(func(*gentypes.Page, *gentypes.IndividualFilter, *gentypes.OrderBy) gentypes.PageInfo); ok {
		r1 = rf(page, filter, orderBy)
	} else {
		r1 = ret.Get(1).(gentypes.PageInfo)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(*gentypes.Page, *gentypes.IndividualFilter, *gentypes.OrderBy) error); ok {
		r2 = rf(page, filter, orderBy)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Manager provides a mock function with given fields: UUID
func (_m *UsersRepository) Manager(UUID gentypes.UUID) (models.Manager, error) {
	ret := _m.Called(UUID)

	var r0 models.Manager
	if rf, ok := ret.Get(0).(func(gentypes.UUID) models.Manager); ok {
		r0 = rf(UUID)
	} else {
		r0 = ret.Get(0).(models.Manager)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(gentypes.UUID) error); ok {
		r1 = rf(UUID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveTestMarks provides a mock function with given fields: mark
func (_m *UsersRepository) SaveTestMarks(mark models.TestMark) error {
	ret := _m.Called(mark)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.TestMark) error); ok {
		r0 = rf(mark)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TakerActiveCourse provides a mock function with given fields: courseTaker, courseID
func (_m *UsersRepository) TakerActiveCourse(courseTaker gentypes.UUID, courseID uint) (models.ActiveCourse, error) {
	ret := _m.Called(courseTaker, courseID)

	var r0 models.ActiveCourse
	if rf, ok := ret.Get(0).(func(gentypes.UUID, uint) models.ActiveCourse); ok {
		r0 = rf(courseTaker, courseID)
	} else {
		r0 = ret.Get(0).(models.ActiveCourse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(gentypes.UUID, uint) error); ok {
		r1 = rf(courseTaker, courseID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TakerActiveCourses provides a mock function with given fields: courseTaker
func (_m *UsersRepository) TakerActiveCourses(courseTaker gentypes.UUID) ([]models.ActiveCourse, error) {
	ret := _m.Called(courseTaker)

	var r0 []models.ActiveCourse
	if rf, ok := ret.Get(0).(func(gentypes.UUID) []models.ActiveCourse); ok {
		r0 = rf(courseTaker)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.ActiveCourse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(gentypes.UUID) error); ok {
		r1 = rf(courseTaker)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TakerActivity provides a mock function with given fields: courseTaker, page
func (_m *UsersRepository) TakerActivity(courseTaker gentypes.UUID, page *gentypes.Page) ([]models.CourseTakerActivity, gentypes.PageInfo, error) {
	ret := _m.Called(courseTaker, page)

	var r0 []models.CourseTakerActivity
	if rf, ok := ret.Get(0).(func(gentypes.UUID, *gentypes.Page) []models.CourseTakerActivity); ok {
		r0 = rf(courseTaker, page)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.CourseTakerActivity)
		}
	}

	var r1 gentypes.PageInfo
	if rf, ok := ret.Get(1).(func(gentypes.UUID, *gentypes.Page) gentypes.PageInfo); ok {
		r1 = rf(courseTaker, page)
	} else {
		r1 = ret.Get(1).(gentypes.PageInfo)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(gentypes.UUID, *gentypes.Page) error); ok {
		r2 = rf(courseTaker, page)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// TakerActivitys provides a mock function with given fields: courseTakers, page
func (_m *UsersRepository) TakerActivitys(courseTakers []gentypes.UUID, page *gentypes.Page) ([]models.CourseTakerActivity, gentypes.PageInfo, error) {
	ret := _m.Called(courseTakers, page)

	var r0 []models.CourseTakerActivity
	if rf, ok := ret.Get(0).(func([]gentypes.UUID, *gentypes.Page) []models.CourseTakerActivity); ok {
		r0 = rf(courseTakers, page)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.CourseTakerActivity)
		}
	}

	var r1 gentypes.PageInfo
	if rf, ok := ret.Get(1).(func([]gentypes.UUID, *gentypes.Page) gentypes.PageInfo); ok {
		r1 = rf(courseTakers, page)
	} else {
		r1 = ret.Get(1).(gentypes.PageInfo)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func([]gentypes.UUID, *gentypes.Page) error); ok {
		r2 = rf(courseTakers, page)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// TakerHasActiveCourse provides a mock function with given fields: courseTaker, courseID
func (_m *UsersRepository) TakerHasActiveCourse(courseTaker gentypes.UUID, courseID uint) (bool, error) {
	ret := _m.Called(courseTaker, courseID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(gentypes.UUID, uint) bool); ok {
		r0 = rf(courseTaker, courseID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(gentypes.UUID, uint) error); ok {
		r1 = rf(courseTaker, courseID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TakerHistoricalCourses provides a mock function with given fields: courseTaker
func (_m *UsersRepository) TakerHistoricalCourses(courseTaker gentypes.UUID) ([]models.HistoricalCourse, error) {
	ret := _m.Called(courseTaker)

	var r0 []models.HistoricalCourse
	if rf, ok := ret.Get(0).(func(gentypes.UUID) []models.HistoricalCourse); ok {
		r0 = rf(courseTaker)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.HistoricalCourse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(gentypes.UUID) error); ok {
		r1 = rf(courseTaker)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TakerTestMarks provides a mock function with given fields: courseTaker, courseID
func (_m *UsersRepository) TakerTestMarks(courseTaker gentypes.UUID, courseID uint) ([]models.TestMark, error) {
	ret := _m.Called(courseTaker, courseID)

	var r0 []models.TestMark
	if rf, ok := ret.Get(0).(func(gentypes.UUID, uint) []models.TestMark); ok {
		r0 = rf(courseTaker, courseID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.TestMark)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(gentypes.UUID, uint) error); ok {
		r1 = rf(courseTaker, courseID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCompany provides a mock function with given fields: input
func (_m *UsersRepository) UpdateCompany(input gentypes.UpdateCompanyInput) (models.Company, error) {
	ret := _m.Called(input)

	var r0 models.Company
	if rf, ok := ret.Get(0).(func(gentypes.UpdateCompanyInput) models.Company); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Get(0).(models.Company)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(gentypes.UpdateCompanyInput) error); ok {
		r1 = rf(input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDelegate provides a mock function with given fields: details, s3UploadKey, password
func (_m *UsersRepository) UpdateDelegate(details gentypes.UpdateDelegateInput, s3UploadKey *string, password *string) (models.Delegate, error) {
	ret := _m.Called(details, s3UploadKey, password)

	var r0 models.Delegate
	if rf, ok := ret.Get(0).(func(gentypes.UpdateDelegateInput, *string, *string) models.Delegate); ok {
		r0 = rf(details, s3UploadKey, password)
	} else {
		r0 = ret.Get(0).(models.Delegate)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(gentypes.UpdateDelegateInput, *string, *string) error); ok {
		r1 = rf(details, s3UploadKey, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateHistoricalCourse provides a mock function with given fields: input
func (_m *UsersRepository) UpdateHistoricalCourse(input user.UpdateHistoricalCourseInput) error {
	ret := _m.Called(input)

	var r0 error
	if rf, ok := ret.Get(0).(func(user.UpdateHistoricalCourseInput) error); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateIndividual provides a mock function with given fields: input
func (_m *UsersRepository) UpdateIndividual(input gentypes.UpdateIndividualInput) (models.Individual, error) {
	ret := _m.Called(input)

	var r0 models.Individual
	if rf, ok := ret.Get(0).(func(gentypes.UpdateIndividualInput) models.Individual); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Get(0).(models.Individual)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(gentypes.UpdateIndividualInput) error); ok {
		r1 = rf(input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateManager provides a mock function with given fields: input
func (_m *UsersRepository) UpdateManager(input gentypes.UpdateManagerInput) (models.Manager, error) {
	ret := _m.Called(input)

	var r0 models.Manager
	if rf, ok := ret.Get(0).(func(gentypes.UpdateManagerInput) models.Manager); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Get(0).(models.Manager)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(gentypes.UpdateManagerInput) error); ok {
		r1 = rf(input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateManagerProfileKey provides a mock function with given fields: managerUUID, newKey
func (_m *UsersRepository) UpdateManagerProfileKey(managerUUID gentypes.UUID, newKey *string) error {
	ret := _m.Called(managerUUID, newKey)

	var r0 error
	if rf, ok := ret.Get(0).(func(gentypes.UUID, *string) error); ok {
		r0 = rf(managerUUID, newKey)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserFromCourseTaker provides a mock function with given fields: takerUUID
func (_m *UsersRepository) UserFromCourseTaker(takerUUID gentypes.UUID) (*models.Delegate, *models.Individual) {
	ret := _m.Called(takerUUID)

	var r0 *models.Delegate
	if rf, ok := ret.Get(0).(func(gentypes.UUID) *models.Delegate); ok {
		r0 = rf(takerUUID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Delegate)
		}
	}

	var r1 *models.Individual
	if rf, ok := ret.Get(1).(func(gentypes.UUID) *models.Individual); ok {
		r1 = rf(takerUUID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*models.Individual)
		}
	}

	return r0, r1
}
