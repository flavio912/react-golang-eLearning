type Test implements SyllabusItem {
  name: String!
  uuid: UUID!
  complete: Boolean
  tags: [Tag!]
  attemptsAllowed: Int
  passPercentage: Float
  questionsToAnswer: Int
  randomiseAnswers: Boolean
  questions: [Question!]
}

type TestPage implements PaginatedQuery {
  edges: [Test]
  pageInfo: PageInfo
}

input TestFilter {
  uuid: UUID
  name: String
}

type CreateTestPayload {
  test: Test
}

input CreateTestInput {
  name: String!
  tags: [UUID!]
  attemptsAllowed: Int!
  passPercentage: Float!
  questionsToAnswer: Int!
  randomiseAnswers: Boolean! # Overrides per question randomisation
  questions: [UUID!]! # Ordered list of the questions in this test
}

input QuestionAnswer {
  questionUUID: UUID! # UUID of the question being answered
  answerUUID: UUID! # UUID of the selected answer
}

input SubmitTestInput {
  courseID: Int! # ID of the course the user is taking the test in
  testUUID: UUID! # UUID of the test you are answering
  answers: [QuestionAnswer!]! # Your answers to the test
}

type SubmitTestPayload {
  courseStatus: CourseStatus!
  passed: Boolean! # True if the user passed the test
}

input UpdateTestInput {
  uuid: UUID!
  name: String
  tags: [UUID!]
  attemptsAllowed: Int
  passPercentage: Float
  questionsToAnswer: Int
  randomiseAnswers: Boolean # Overrides per question randomisation
  questions: [UUID!] # Ordered list of the questions in this test
}

type UpdateTestPayload {
  test: Test
}

input DeleteTestInput {
  uuid: UUID!
}
