enum AccessType {
  restricted
  open
}

enum StructureElement {
  module
  test
  lesson
}

enum CourseType {
  online
  classroom
}

interface SyllabusItem {
  name: String!
  uuid: UUID!
  complete: Boolean
}

type Lesson implements SyllabusItem {
  name: String!
  uuid: UUID!
  complete: Boolean
  mp3URL: String
  text: String!
  tags: [Tag!]
}

type Course {
  id: Int!
  type: CourseType!
  name: String!
  backgroundCheck: Boolean
  accessType: AccessType!
  price: Float!
  color: String
  excerpt: String
  introduction: String
  howToComplete: String
  hoursToComplete: Float
  whatYouLearn: [String!]
  requirements: [String!]
  specificTerms: String
  category: Category
  allowedToBuy: Boolean
  syllabus: [SyllabusItem!]
  bannerImageURL: String
}

type CoursePage implements PaginatedQuery {
  edges: [Course]
  pageInfo: PageInfo
}

input SaveClassroomCourseInput {
  id: Int
  name: String
  certificateType: UUID
  categoryUUID: UUID
  excerpt: String
  introduction: String
  backgroundCheck: Boolean
  accessType: AccessType
  price: Float
  color: String
  tags: [UUID!]
  specificTerms: String
  bannerImageSuccess: String
  tutorUUID: UUID # UUID of the Tutor (classroom course only)
  maxParticipants: Int
  startDate: Time
  endDate: Time
  location: String
}

input SaveOnlineCourseInput {
  id: Int
  name: String
  categoryUUID: UUID
  certificateType: UUID
  # secondaryCategoryUUID: UUID
  excerpt: String # Short description of course
  introduction: String # 'About this course' section
  howToComplete: String # 'How to complete this course' section
  hoursToComplete: Float # Estimated hours to complete this course
  whatYouLearn: [String!] # 'What you'll learn' bullet points
  requirements: [String!] # 'Requirements' bullet points
  backgroundCheck: Boolean
  accessType: AccessType
  price: Float
  color: String
  tags: [UUID!]
  specificTerms: String
  bannerImageSuccess: String
  structure: [CourseItem!]
}

input CourseItem {
  type: StructureElement!
  uuid: UUID!
}

input CreateTagInput {
  name: String!
  color: String!
}

type Tag {
  uuid: UUID
  name: String!
  color: String!
}

type Category {
  uuid: UUID
  name: String!
  color: String!
}

input CreateCategoryInput {
  name: String!
  color: String!
}

input PurchaseCoursesInput {
  courses: [Int!]!
  users: [UUID!]! # List of delegates UUIDs
  extraInvoiceEmail: String
  acceptedTerms: Boolean!
  backgroundCheckConfirm: Boolean
}

type PurchaseCoursesResponse {
  transactionComplete: Boolean! # true if the company is on a contract and thus doesn't need to pay upfront
  stripeClientSecret: String # If transactionComplete is false, this is given so user can pay
}

type SearchSyllabusResult implements PaginatedQuery {
  edges: [SyllabusItem!]
  pageInfo: PageInfo
}

input DeleteCourseInput {
  id: Int!
}

# [ EXAMPLE COURSE STRUCTURE
#   {type: "module", uuid: "34343-34343-34343-434343"},
#   {type: "lesson", uuid: "1212121-2121212-12121-21212"},
#   {type: "test", uuid: "89898989-5656565-56656565-56565"},
# ]
