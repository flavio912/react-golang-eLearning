enum UserType {
  manager
  individual
  delegate
}

# User is a thin type that collates information about the manager, delegate
# and individual user types. Some fields are not going to be available depending
# on the type of user you are requesting data for.
type User {
  type: UserType!
  email: String
  firstName: String!
  lastName: String!
  telephone: String
  jobTitle: String
  lastLogin: String!
  company: Company
  profileImageUrl: String
  activity(page: Page): ActivityPage
  myCourses: [MyCourse!]
  myActiveCourse(id: Int!): MyCourse # Get my course from courseID
  # address: Address
}

enum ActivityType {
  newCourse
  activated
  completedCourse
  failedCourse
}

type ActivityPage implements PaginatedQuery {
  edges: [Activity]
  pageInfo: PageInfo
}

type Activity {
  uuid: UUID!
  type: ActivityType!
  createdAt: String!
  course: Course
}

# # A course currently being taken by a user
type MyCourse {
  status: CourseStatus!
  course: Course!
  minutesTracked: Float!
  enrolledAt: String!
  upTo: UUID
}

enum CourseStatus {
  passed
  failed
  incomplete
}
