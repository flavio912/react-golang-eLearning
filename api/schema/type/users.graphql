interface User {
  uuid: UUID!
  createdAt: String
  email: String!
  firstName: String!
  lastName: String!
  telephone: String!
  lastLogin: String!
  jobTitle: String!
}

input ManagerLogin {
  email: String!
  password: String!
}

input CreateManagerInput {
  companyUUID: UUID # For admins when creating managers of different companies
  firstName: String!
  lastName: String!
  email: String!
  jobTitle: String!
  telephone: String!
  password: String!
}

input DeleteManagerInput {
  uuid: UUID!
}

type Manager implements User {
  uuid: UUID!
  createdAt: String
  email: String!
  firstName: String!
  lastName: String!
  telephone: String!
  lastLogin: String!
  jobTitle: String!
  company: Company!
  profileImageUrl: String
}

type ManagerPage implements PaginatedQuery {
  edges: [Manager]
  pageInfo: PageInfo
}

# type Delegate implements User {
#   uuid: UUID!
#   email: String!
#   firstName: String!
#   lastName: String!
#   telephone: String!
#   lastLogin: Date
#   jobTitle: String!
#   courses(offset: Int, limit: Int, filter: DelegateCourseFilter): Courses
#   countCourses(filter: DelegateCourseFilter): Int
#   certificates(offset: Int, limit: Int): Certificates
#   countCertificates(filter: DelegateCertificateFilter): Int
# }
