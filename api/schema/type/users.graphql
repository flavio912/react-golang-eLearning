enum UserType {
  manager
  individual
  delegate
}

# User is a thin type that collates information about the manager, delegate
# and individual user types. Some fields are not going to be available depending
# on the type of user you are requesting data for.
type User {
  type: UserType!
  email: String
  firstName: String!
  lastName: String!
  telephone: String
  jobTitle: String
  lastLogin: String!
  company: Company
  profileImageUrl: String
  activity(page: Page): ActivityPage
  activeCourses: [ActiveCourse!]
  # certificates
  # address: Address
}

enum ActivityType {
  newCourse
  activated
  completedCourse
  failedCourse
}

type ActivityPage implements PaginatedQuery {
  edges: [Activity]
  pageInfo: PageInfo
}

type Activity {
  uuid: UUID!
  type: ActivityType!
  createdAt: String!
  course: Course
}

# type ActiveCoursePage implements PaginatedQuery {
#   edges: [ActiveCourse]
#   pageInfo: PageInfo
# }

# # A course currently being taken by a user
type ActiveCourse {
  status: CourseStatus!
  course: Course!
  minutesTracked: Float!
}

enum CourseStatus {
  passed
  failed
  incomplete
}
