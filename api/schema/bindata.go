package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _mutation_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x93\x4d\x8e\xdb\x30\x0c\x85\xf7\x3a\x05\x83\x6e\xda\xcd\x1c\xc0\xbb\x69\x82\x02\x01\x12\xb4\x98\xd8\x07\x60\x6d\x8e\x22\x54\x96\x54\xfd\x0c\x6a\x14\xb9\xfb\xc0\xb2\x23\x4b\x76\xb2\xd4\x67\xbe\x47\xea\xd1\xfa\x02\x7d\xf0\xe8\x85\x56\x0e\x5a\x54\xd0\xeb\x4e\xbc\x0f\xe0\xaf\x04\xdd\xef\x17\xa0\x7f\xd4\x06\x4f\x1d\x38\xfa\x1b\x48\x79\x81\x52\x0e\x2f\x8c\x09\x65\x82\x87\xc6\x48\x8d\xdd\x0f\x21\xe9\x4c\x1e\xe1\x3f\x03\x78\x17\x92\xea\xc1\x50\x05\x17\x6f\x85\xe2\x3b\x06\xd0\x6a\xe5\x49\xf9\x13\x29\xee\xaf\x15\x1c\x95\xdf\xb1\x1b\x63\x7e\x30\x94\x59\xbc\x91\x33\xd1\x22\x58\x99\xab\x5d\x68\x5b\x72\xae\xd6\x7f\x48\x2d\xfc\xb6\x9d\xe1\x32\x15\x46\x8f\xa7\xa2\xd8\xf4\x3c\x5f\x39\x96\x62\xd7\x0b\x75\xd2\x5c\xa8\xaf\xd1\xb1\x82\xd7\x44\x76\xdf\x2a\x78\x0d\xfe\x1a\x7d\x18\x40\x8f\x0a\x39\xd9\xa2\xfa\x9c\xb1\x75\x7d\x47\x92\x38\x7a\x2a\x04\x87\x1c\xae\x15\xad\x25\xf4\x34\x7b\xde\x15\xfb\x1c\x1e\x47\x36\xca\xe6\xf3\x98\x98\xe9\xb6\xa2\x26\x87\x0f\x44\xc6\xea\x71\x59\xc7\x1e\x39\x4d\x21\xbe\x8d\x3b\x76\x7e\x31\xc8\xb7\x3b\x8a\xcb\x65\xad\x1b\xff\xca\x0c\xb7\x1e\xf3\x76\xca\x19\xc6\x7c\x36\x83\x1f\x72\x98\x06\xff\xae\xb5\x24\x54\xbb\x94\x51\xdc\x52\x99\x50\x44\x49\x11\x4f\x69\xc8\xa2\xbc\x59\xd0\xa6\x7c\x9a\xa9\x28\x3f\x2c\xe8\xf9\x3c\xf7\xb5\x96\x23\xdd\x69\xd2\x95\x78\xcc\x51\x2b\x47\xc9\x65\xaf\x7b\x83\x6a\x28\x4d\x66\xb8\x78\x4c\xe7\x74\xb7\x95\xa8\xc9\xe1\x03\x51\xd1\xe9\xbe\x74\x06\x30\xbe\xd4\xc8\x1e\xf6\x8d\x05\xf3\x03\x78\xf8\x4b\xc6\x02\x4b\x2d\x1a\xdf\x5e\x31\x7f\xc2\x65\x5c\x68\x8c\xd5\x1f\x69\xe8\x10\x44\x57\x41\xd3\x1c\x0f\xe5\x94\x0e\x3f\xe8\xa7\x92\x42\xd1\x5e\x07\xeb\x52\xae\x97\x15\x4f\x17\xcc\xe1\xac\xdf\x4b\x74\xce\x6a\xdd\x6f\x2d\x56\x9f\x96\x98\x4a\x9e\xe2\xaa\x91\x97\x4b\xa9\x91\x27\x51\x8d\x7c\xc9\x15\x3d\x71\x6d\xd7\x2b\x9c\xe9\xd2\x67\x06\x49\x77\x22\xe7\xf4\xea\x87\x9e\x58\xd2\x4c\x47\x76\x63\x9f\x01\x00\x00\xff\xff\xac\x85\xdf\x8d\xb6\x05\x00\x00")

func mutation_graphql() ([]byte, error) {
	return bindata_read(
		_mutation_graphql,
		"mutation.graphql",
	)
}

var _query_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x54\xcd\x6e\xdb\x3c\x10\xbc\xf3\x29\x26\xc8\x25\x01\x82\xef\x01\x74\xcb\x0f\x02\x04\xf8\xda\xa6\x88\x73\x2a\x8a\x62\x2d\xad\x24\x36\x14\x57\x25\xa9\x26\x6a\x91\x77\x2f\x48\xfd\x58\x72\xec\x00\xed\xcd\xd4\xce\xce\xcc\x92\x3b\x3e\xc5\x8f\x8e\x9d\x66\x0f\x5f\x4b\x67\x0a\x58\x09\x68\xa4\xd0\x65\x8f\x50\x33\x8a\xed\x7f\xe0\x17\xce\xbb\xc0\x05\xb4\x45\x4b\xce\x91\x31\x6c\x54\xe8\x5b\xc6\x3d\x55\x7c\x67\x4b\xc1\x6f\x05\x04\x09\x64\x32\xdc\xd9\x70\x82\x53\x7c\xec\x9a\x2d\x3b\x48\x89\x96\x2a\xf6\xa0\x32\xb0\x43\xa8\xb5\x87\x58\x56\x80\x94\xa5\xe7\x30\xe3\x37\x35\x8f\x9f\x62\x4f\xc2\xc5\x46\x94\x4e\x9a\x64\xc5\x07\x72\x41\x01\x46\x37\x7a\xdd\xd6\xd0\x4b\xb4\xff\x6c\xd1\xb2\x4b\x5d\x0a\xa8\xf4\x4f\xb6\x07\xdc\xe8\xc0\x8d\x1f\xaa\xea\x55\x29\x6d\xdb\x2e\xa4\x39\xd2\x0c\x0b\x53\x2b\xa9\x1d\xf4\x03\x59\xaa\xd8\xdd\x6a\x13\xe7\x89\x3d\x96\x1a\xce\xf0\x10\x9c\xb6\x95\x02\xb8\x21\x6d\x16\xe7\xef\xb2\xdd\xe8\x60\x96\x90\xae\xd3\x45\x86\xc7\xc7\xbb\x9b\x78\x6d\x6c\xb8\xad\xc5\xee\x00\xb3\xd6\x0d\x1b\xae\x28\xf0\x42\x6c\xdd\x1a\xf2\x6f\xf1\x38\x13\xff\xbd\x95\x77\xd4\xaf\xa5\x73\x3e\x3d\xef\xf1\x61\x29\xcf\xd9\xfb\x4d\xdf\x72\x86\xcb\xf9\xb7\x02\xb6\x94\x3f\x55\x4e\x3a\x5b\x5c\xd7\x9c\x3f\x65\xb8\x12\x31\x4c\x56\x01\xad\xd3\x39\x67\xb8\x35\x42\xf1\x92\xc9\x18\x79\xe6\x62\x23\x57\x5d\x3f\xc3\x70\x8a\x87\x5a\x9e\x21\xd6\xf4\xc8\x93\x11\x8f\x50\x53\x40\x2f\x1d\xc8\x31\xa8\x0b\xb5\x38\xfd\x8b\x0b\x04\xc1\x56\xe4\x69\xe7\xfc\x93\x35\xda\xf2\xe0\x7f\xe1\x3d\x9f\x07\xca\xde\x0c\xb7\x18\xdb\x90\xf7\x4e\xa4\xf9\xd7\x7e\x69\x5a\xb2\xfd\xb1\x37\x5b\x5d\xe0\xdc\xf4\x3f\x7b\x2f\xf6\xe8\x3b\xef\x3f\x1a\x55\x3e\xc3\x97\x58\xfd\x3a\x70\x04\x76\x25\xe5\x29\x90\xda\x52\xe0\xe2\x73\xc7\xae\x4f\x4c\xed\x98\xd1\x6c\x4e\xeb\xe2\xa2\x5c\xc1\xee\x6a\xc0\x91\xcf\xd9\x16\xda\x56\xcb\xb7\x2a\x35\x9b\x79\xc1\x4e\x62\x63\xca\xfd\x8e\x5d\x27\xe6\xa9\x0e\x50\xd1\x68\x7b\xb6\x73\x7f\x72\x9e\xe1\x32\x7e\x9b\x6a\xfe\x2c\x1a\x1a\xcc\x4c\xb5\xf8\x3b\x36\x37\x43\xb6\x16\xed\xe7\xd9\x14\xb8\x5d\x79\xc9\x70\x81\x32\xdd\x59\xb6\xce\xe5\x05\x64\x98\x2c\x9b\x46\xdc\x11\xdd\x0f\xff\x0f\xc5\x98\xad\x3d\xaf\x53\xe4\x16\x88\xc3\x7a\xeb\x6c\x1e\x14\x9c\x20\xa3\x62\x3e\x2c\xc6\x9e\xe0\xb8\x2e\x73\x5d\x1f\xd1\x5b\xad\xd5\x41\xb9\x11\x31\xaa\x99\xb4\x51\x7b\x62\xc3\x9a\xcd\xd5\xc3\x4a\xcb\x5d\x3c\x28\x34\x00\x46\x1d\x59\x64\xcd\x9f\x29\x60\xd8\xb8\x81\x34\x1d\x27\xde\xb7\xa9\x4c\xe5\x7d\x01\x05\x9c\xaf\xc1\xd3\xfd\xad\x83\xf9\xbe\xd8\xc1\x14\xbf\xa3\xb7\x87\x1f\xf9\x3a\x1f\xb9\x1e\x3d\x3b\xa8\x57\xf5\x27\x00\x00\xff\xff\x75\xfa\xc4\xf4\x2d\x07\x00\x00")

func query_graphql() ([]byte, error) {
	return bindata_read(
		_query_graphql,
		"query.graphql",
	)
}

var _schema_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x4e\x4e\xcc\x49\x2c\x52\x08\x0d\xf5\x74\xe1\x82\xb2\x43\x32\x73\x53\xb9\xb8\x8a\x93\x33\x52\x73\x13\x15\xaa\xb9\x14\x14\x0a\x4b\x53\x8b\x2a\xad\x14\x02\x41\x14\x97\x82\x42\x6e\x69\x49\x62\x49\x66\x7e\x9e\x95\x82\x2f\x94\xc5\x55\xcb\x05\x08\x00\x00\xff\xff\xc2\x82\x45\xdf\x48\x00\x00\x00")

func schema_graphql() ([]byte, error) {
	return bindata_read(
		_schema_graphql,
		"schema.graphql",
	)
}

var _type_admin_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x90\xcd\x8a\x83\x30\x14\x85\xf7\x79\x8a\x3b\xaf\x91\xdd\x30\x6e\x84\x61\x70\x28\xae\x4a\x17\x17\x72\x0d\x17\x92\x18\xf2\x43\x11\xf1\xdd\x8b\xb1\x60\xd5\x52\xda\x5d\x38\x9c\x7c\xdf\x49\xd2\xe0\x09\xbe\x95\x65\x07\xa3\x00\xc8\x99\x95\x84\xb6\xad\xab\x2f\x01\x40\x16\xd9\x48\x38\xa5\xc0\x4e\xcf\x41\xc7\x21\xa6\x3f\xb4\xf4\x18\x1a\xdc\x67\x93\x10\x2b\xb7\x41\x4d\xc0\xd6\x1b\xb2\xe4\x52\x84\x06\x35\x3b\x4c\xa4\xfe\x33\x85\xa1\x58\x49\x69\x8a\x12\xce\xa5\x7f\x11\x00\x1e\x35\xd5\xae\xeb\xe5\xdc\x2e\xa7\x99\xc9\xce\xe7\xb4\x40\x7f\x7b\x7d\x5f\x7c\xd8\xe8\x31\xc6\x6b\x1f\xd4\x66\xce\x72\xf5\x27\x10\x26\x2a\x80\xba\x04\xe3\xfb\x6f\xfa\xcc\xd4\x7a\x75\x34\x6d\x3f\xf7\xe0\x7d\xa2\xdd\x5b\x57\x41\x45\x86\x5e\x0a\x26\x71\x0b\x00\x00\xff\xff\x68\xfa\x3e\xad\xdb\x01\x00\x00")

func type_admin_graphql() ([]byte, error) {
	return bindata_read(
		_type_admin_graphql,
		"type/admin.graphql",
	)
}

var _type_auth_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\xa9\x2c\x48\x55\x70\x2c\x2d\xc9\x08\xc9\xcf\x4e\xcd\x53\xa8\xe6\x52\x50\x28\x01\xb1\xac\x14\x82\x4b\x8a\x32\xf3\xd2\x15\xb9\x6a\xb9\x00\x01\x00\x00\xff\xff\xa3\x33\x16\xdc\x24\x00\x00\x00")

func type_auth_graphql() ([]byte, error) {
	return bindata_read(
		_type_auth_graphql,
		"type/auth.graphql",
	)
}

var _type_company_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x92\x4f\x6b\x33\x21\x18\xc4\xef\x7e\x8a\xc9\xed\x7d\x21\x97\xf6\xe8\x2d\x49\x29\x04\xfa\x97\xb2\xa7\xd2\x83\xc4\x27\x22\xec\x3e\x8a\xba\x85\x25\xe4\xbb\x17\x75\x53\x96\xec\xe6\xda\xdb\x38\x8e\xfa\x73\x78\xd2\xe0\x09\x3b\xd7\x79\xc5\x03\x4e\x02\x50\xde\x07\xf7\x4d\x5a\x62\xeb\x5c\x4b\x8a\x05\xd0\xf7\x56\x4b\x34\xcd\xfe\x61\x25\x80\x43\x20\x95\x48\x6f\x92\xc4\x47\x0a\x96\x8d\x00\x58\x75\x74\x59\xe6\x4c\xa7\x58\x19\x0a\xf1\x9f\x57\x86\x24\xde\x94\xa1\x35\x8e\xb6\x4d\x14\x24\x9e\xeb\xe6\x63\x59\xae\xe1\x82\xa6\xb0\x1d\x24\x5e\xab\xf8\xff\x9b\xc8\xc7\xf2\x6d\x4a\xeb\x40\x31\x4a\x6c\xaa\x58\x89\xb3\x10\x85\x7c\x34\x2a\x79\xd5\x4f\x96\xe9\x6e\xca\x32\xf1\xef\xa7\xfe\xc1\xf5\x9c\x86\xa9\xe3\x5d\x4c\x3b\xa7\x69\x96\x0a\x93\xd8\xe5\xe9\xb1\xb4\xcc\x08\xdb\xf9\x96\x3a\xe2\x14\xf3\x57\x2d\xe7\x7e\xde\x7b\x0a\xb5\x52\xd2\x86\xa2\xc4\xe7\x78\xe2\x2b\xbf\xa4\x0c\xed\xf9\xe8\x6a\x35\x59\xe5\x7b\x2d\xfb\x3e\x61\x57\xfa\x1d\xc3\xfb\x62\x9d\x0a\x48\x31\x5e\xae\x9a\xfe\xbb\x5f\x57\xba\xc6\xeb\x25\xba\xab\x11\x99\xb3\xde\x18\xad\x25\xfc\x1b\xf4\x33\xf8\x05\xf6\x39\xba\x38\x8b\x9f\x00\x00\x00\xff\xff\xc7\xdd\x28\x06\xe4\x02\x00\x00")

func type_company_graphql() ([]byte, error) {
	return bindata_read(
		_type_company_graphql,
		"type/company.graphql",
	)
}

var _type_course_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x56\x51\x6f\xe3\x36\x0c\x7e\xf7\xaf\x60\x92\x87\x6e\xc0\xe5\xe1\x9a\xa4\xd8\xfc\xd6\xcb\x65\x58\x80\x3b\x5c\xd7\x38\xd8\x86\xa2\x0f\xaa\xcc\x38\x42\x65\xd1\x93\xa8\xf5\x82\xc3\xfd\xf7\x41\x72\x1c\x3b\x49\x93\xad\xdd\x1e\x76\x70\x10\xc9\x22\x3f\xea\x23\x45\x52\x46\xe3\x4b\xb8\x96\x12\x9d\xcb\x36\x15\xc2\x97\x04\xc0\xa2\x63\xab\x24\x63\x9e\x00\x50\x85\x26\xf9\x9a\x24\x51\x71\xc1\xd6\x4b\xf6\x16\x67\x1a\x4b\x34\x1c\xd5\x4b\xca\xbd\xc6\x04\x80\xd1\x71\x02\xa0\xd1\x39\x6a\x31\x1f\xa3\xb8\x0b\x38\xd2\xe3\xb0\xf3\x94\xbc\x75\x38\x37\x2b\x8a\x4a\x46\x94\x98\x86\x0d\x95\x29\x12\x80\x07\x21\x1f\x0b\x4b\xde\xe4\xd3\x35\xca\xc7\x14\xde\x11\x69\x14\x26\x01\xa8\xac\x92\x98\xc2\x4f\x9a\x44\x30\x2b\x49\x93\xed\x20\xf1\xb3\x44\x5b\x71\x67\x45\x19\xb6\x94\x7b\xc9\x8a\x4c\x67\x79\x4d\x4f\x19\x4d\xa9\xac\x34\x32\xee\xad\x7b\xeb\xba\x92\x66\xa7\xa7\xb5\xe0\xdf\xc9\x7f\x40\x61\x4d\x0a\x77\x35\xa0\x77\x1f\x23\xf8\x87\x57\x36\x7a\xec\xf6\x25\xae\x42\xa9\x56\x4a\x66\x68\x4b\xd7\xd9\x44\x0a\xc6\x82\xec\x26\x85\xe9\x76\x96\x00\x08\xad\xe9\x09\xf3\x8c\xde\xf9\x4d\xd7\xe3\x01\x38\x94\x64\x72\x61\x37\xd3\x63\x5c\x13\xd0\x4f\x46\x2b\x83\x75\x58\x63\x48\xbd\x57\x79\x0a\xcb\xe5\xfc\x7d\x2f\x46\x61\x45\x69\x27\xea\xbd\x67\x81\x37\xa2\x40\x50\xc1\xf3\xe8\x0c\xdc\x88\x42\x19\xc1\x98\xff\xe2\xd1\x6e\xa2\x59\xcc\x0b\x0c\x5e\x76\x61\xc1\xd5\x4a\x14\xd1\x70\x1a\x40\x71\xd6\x9e\xb5\x16\xce\x59\xa2\xf2\x15\xec\x0e\xb0\x2f\x20\x78\x80\x3c\xcd\x51\x99\xca\x33\x2c\xc4\x9f\x78\x00\x99\x47\xc1\x3e\xdb\xe3\x5c\x6d\xce\x32\x48\x77\x3a\xff\x38\x0d\xcf\x64\xba\xd8\xd5\x69\xda\xa9\xd9\xbf\x2f\x01\x16\x45\xf0\x3f\xc6\xf6\x5c\x12\x3e\x08\x63\xd0\xce\x4b\x51\xe0\xc2\x47\xfb\x5d\x23\x9e\xc9\xb6\x2e\xc1\xa0\x1e\x68\x05\xbc\x46\xc8\x82\x14\xbe\x93\x4d\xbc\x40\xd6\x27\x4b\x46\x6f\xbe\x0f\x4d\x42\x7c\xbe\x11\x96\x95\x54\x95\x88\x45\x31\x37\x81\xa9\x63\x61\xf9\xbd\x08\x55\x95\xa9\x32\xb8\x82\x26\xdf\x7b\xd7\x24\xc5\x5e\x84\xf6\xce\xa7\x9b\x73\xff\xe2\x70\x9e\x29\xa8\x73\x87\x07\x03\x58\xac\xc9\x32\xe4\xe8\xa4\x55\x55\xe0\x17\x02\x51\xfb\x7c\xe2\x68\x61\x00\x17\xd7\x0f\xe4\x19\x78\xad\xdc\x56\xf7\x22\x6c\x1c\xb4\x4e\xf5\x9f\x80\xfa\x99\x9e\x80\x09\xe4\x56\x74\x1a\xff\x5c\x9f\x82\x01\xcc\x1c\xab\x32\x94\x44\xad\x72\xca\xd6\xe9\x8e\x16\x48\xfc\xba\x16\x0c\x1b\xf2\x17\x5a\x83\x0e\xf2\x0b\x78\xf0\x5a\x23\x43\x45\xca\xb0\x3b\xdd\xf5\x02\xfa\xb6\x23\x3a\x06\xfe\x5f\x53\xde\x35\xd7\x5d\x68\x1e\x75\x8e\x31\x96\xbd\x7b\x68\x93\xb0\x5d\xae\xaf\xb6\x48\xf4\xf0\x9a\xec\x1d\xb7\x37\xc6\x40\xe3\xae\xbe\x1c\x6b\xab\xbd\xd6\x6a\xbb\xdc\xb1\xba\x77\x91\x1e\x9a\x6c\x09\x59\x14\x8c\x99\x28\xda\x72\xe8\x56\x40\xef\x30\x56\x6d\x63\xcd\x44\x71\xbe\x7a\xce\x60\x9b\xaa\x79\x8d\x81\x2e\xef\xc6\xce\x4b\xc8\x0f\xe0\x0e\x66\xbf\x5d\x7f\xbc\xf9\x30\x83\xe9\xa7\xe5\xed\x62\x06\x8b\xec\x76\x39\xcd\x96\xb7\xb3\x64\x00\x00\x5f\xea\xf8\xf5\xeb\x0f\x95\xfe\x9b\x2d\xc1\xfe\x68\x3c\x1a\x8f\x86\xdd\xff\x71\x1c\xfa\x5f\xdf\xd4\x38\x38\x00\xc6\xd5\xc6\xbf\xfe\xdb\xcb\x51\xf8\x0d\xb7\xe3\xe5\x76\x12\x87\xd1\x4e\xb9\x39\xe9\xed\x6b\xcb\xa6\xfe\xfc\x69\xd9\xbc\xbd\x8c\xcf\xb0\x1e\x82\xb5\xdd\x5b\x43\xa8\x0b\x0f\x1f\x51\x2d\xf8\x87\x1f\xeb\x67\x38\xb9\x8a\xcf\x70\x72\xb5\x9b\x4c\xae\x26\xad\x81\xfb\x38\xfe\x27\x0e\xc2\x00\xd4\x0a\x94\x03\xc6\xb2\xd2\x82\x11\x4a\xf1\x88\x20\x40\x52\xb5\xf9\x16\xbc\x3f\x41\x65\x14\x93\x60\x5c\xa7\x44\x98\x4c\x26\xe3\xf8\x0c\xe3\x7f\xff\x00\xfe\x0a\x2a\xf7\xc9\x5f\x01\x00\x00\xff\xff\x85\x3f\x8d\x4c\x77\x0b\x00\x00")

func type_course_graphql() ([]byte, error) {
	return bindata_read(
		_type_course_graphql,
		"type/course.graphql",
	)
}

var _type_delegate_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x92\x41\x4f\xc3\x30\x0c\x85\xef\xfd\x15\xde\x9d\x5f\xd0\x1b\x6c\x97\x4a\x08\x0d\xe8\x4e\x08\x21\xb3\xbc\x85\x40\x1a\x47\x49\x2a\x34\x4d\xfb\xef\x28\x19\xa5\x5d\xb7\x0b\xb7\xe8\xe9\x3d\xdb\x9f\x9d\xb4\xf7\xa0\x15\x2c\x34\x27\x10\x1d\x2a\xa2\xbe\x37\xaa\xa6\xcd\xa6\x59\x2d\x2a\xa2\x6d\x00\x27\xa8\xdb\x54\xd3\x73\x0a\xc6\xe9\x8a\xa8\x6d\x97\x6f\xcd\x6a\x10\xb2\x0b\x1d\x1b\x3b\x71\xec\x4c\x88\xe9\x81\x3b\x4c\x4d\x96\x2f\xb5\x04\x0b\xff\x21\x0e\x93\x70\xf6\xdd\x8b\x36\x6e\x6a\xfc\x94\xf7\xd6\x24\x7b\x16\xde\x4a\xe7\xd9\xed\x6b\x5a\x9e\x1e\x59\xf3\x41\x76\xc6\xa2\xe9\x58\x63\x13\xc6\x99\x8e\x55\x65\x9c\xef\x13\x2d\x0b\xd0\x80\xdc\x14\xed\x30\x16\xcb\xdc\x27\xfa\xff\x60\xcc\xf9\xaf\x4d\x7b\x0d\x55\xc3\x21\x70\xc2\x9a\x63\xfc\x96\xa0\x6a\xba\x13\xb1\x60\x37\x27\xf1\x56\x58\xb5\xf2\x05\x37\x25\x2a\xd7\x3b\x07\x7a\x42\xf4\xe2\x22\x0a\x93\xfa\x15\xeb\xbf\x13\x2f\x6e\x26\x5d\xd5\xd8\x76\x56\x73\xb0\xaf\x59\x83\x4c\xe7\x2d\x3a\xb8\x14\x69\xcd\xda\xb8\x9c\x7c\xec\x11\xf6\xa5\x07\x94\x46\xac\xe9\x65\x88\xbc\xe6\xd1\x59\xa3\x71\x3b\xa9\x73\xa0\xbc\xc6\xfd\x0f\xbe\x72\xe1\x52\xe1\xf2\x3b\xf9\xd9\x5c\x59\x73\x92\xd1\xc6\x05\x1d\xab\x9f\x00\x00\x00\xff\xff\x18\xe4\xd4\x61\xbc\x02\x00\x00")

func type_delegate_graphql() ([]byte, error) {
	return bindata_read(
		_type_delegate_graphql,
		"type/delegate.graphql",
	)
}

var _type_lesson_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8f\xb1\x8a\xc3\x40\x0c\x44\xfb\xfd\x8a\xf1\x6f\x6c\x7b\xd7\x18\xae\xf0\x71\xe7\x2a\xb8\x10\x78\x22\x16\xec\xf5\xe2\xd5\x42\x8c\xc9\xbf\x07\xaf\x8b\x04\x02\xe9\xa4\xd1\xe8\x69\x64\x5b\x22\x7e\x98\xf3\x12\xb1\x3b\xa0\x94\x30\x7a\xf4\x7d\xfb\xdd\x38\xc0\x82\x4d\xf4\xf8\xb3\x35\x44\xad\x82\x68\xf6\xb8\xfc\x8b\x36\x43\xed\x79\xb3\xe7\xfc\xee\xdc\x0b\xaf\x13\x25\xc2\x9c\x26\xce\x8c\x96\xd1\x89\x86\x28\xc6\xf1\xb7\x70\xdd\xea\x35\x8e\xca\x83\x77\x2e\x0c\x0e\x48\xa2\x6c\xe3\x75\xf1\x87\xbd\x56\x07\x35\xc4\x54\x0c\x5f\x2b\xc5\x78\x7a\xdb\xaa\xec\x1f\x32\xd6\x1f\x86\xf7\x8c\x8f\x00\x00\x00\xff\xff\xa8\x29\x14\x0f\xf2\x00\x00\x00")

func type_lesson_graphql() ([]byte, error) {
	return bindata_read(
		_type_lesson_graphql,
		"type/lesson.graphql",
	)
}

var _type_manager_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x92\xcd\x6e\xe3\x30\x0c\x84\xef\x7a\x0a\x2e\xf6\x2d\x7c\xdb\x4d\xb0\x80\x81\x6d\x91\xfe\xf8\x54\xf4\xc0\x46\xb4\xc2\x42\xa2\x04\x49\x46\x10\x04\x79\xf7\x42\x76\x7e\x9c\x5a\x97\xde\xec\xc1\x70\xc0\x8f\xa3\x7c\x08\x04\x0f\x28\x68\x28\x02\x1c\x15\xc0\x30\xb0\x6e\xa0\xeb\xda\xf5\x2f\x05\xb0\x8d\x84\x99\xf4\x9f\xdc\xc0\x4b\x8e\x2c\x46\x01\x90\x43\xb6\x97\xff\x62\xea\x39\xa6\xfc\x88\x8e\xe6\xa2\xc5\xa5\x96\xc9\x52\xd8\x79\x59\x18\xff\x7b\xc3\x32\x17\x3f\xfd\xc7\x2b\x67\x7b\x67\xdc\x7a\x17\x50\x0e\x0d\xac\xa6\x8f\xa2\x85\xe8\x7b\xb6\xd4\x3a\x34\xd4\xc5\xeb\x56\xea\xa4\xd4\x1c\x6d\x83\x86\x80\x5d\xb0\xe4\x48\x72\x82\x0d\x1a\x96\x02\xf6\x34\x50\x3c\x8c\xdc\xa4\x0d\xa5\x06\xde\xce\x13\xef\x25\x1c\x0d\xb5\xd2\xfb\xa6\xf8\xc7\xaf\x92\xcb\x12\x86\x7c\x09\x1e\x17\x9f\xe6\xbf\x5f\x25\x60\x4a\x7b\x1f\xf5\x5c\x13\xff\x4c\x29\x34\xf0\xd7\x7b\x4b\x28\xb7\xb8\xd5\x78\xe7\x73\x68\x3b\x4a\xc7\x1b\x72\x69\x63\xea\x04\x7e\xc3\x3f\x1f\x01\xb5\x63\x49\xb0\xdf\x91\x4c\x15\xb1\x18\x70\xd3\x74\x02\xdf\x83\xe6\xbe\xa7\x48\x92\xcf\x11\x4c\xe9\x27\x45\x2d\x60\x6a\x7d\x54\xdb\x5c\x52\x5f\x19\xd7\x64\xa9\xc2\x38\x7f\x70\x57\x6f\x17\x74\xed\x1e\xf7\x8f\xf3\x6e\xcb\x1a\x5e\x85\xae\xb6\x77\x85\x4f\x9d\xd4\x57\x00\x00\x00\xff\xff\xf3\x0d\x49\x60\x1b\x03\x00\x00")

func type_manager_graphql() ([]byte, error) {
	return bindata_read(
		_type_manager_graphql,
		"type/manager.graphql",
	)
}

var _type_users_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x90\xc1\x8a\x1c\x31\x0c\x44\xef\xfe\x8a\x0a\x7d\x0d\xfb\x01\x7d\x0b\x7b\x0a\x84\x24\xb0\xbb\x1f\xa0\x69\xab\x3d\x0a\xb6\xd4\xb1\xd5\x03\x4d\xd8\x7f\x0f\xf6\x30\x49\xc3\xde\xec\x42\xf5\xaa\x24\xd6\xbd\xe0\xad\x71\x7d\x3d\x36\xc6\x9f\x00\x14\x52\x4a\x5c\x03\x20\x1a\xe5\x26\x71\xa7\x1c\x80\xc8\x99\x13\x39\x87\xf7\x10\xa6\xe1\x80\x34\x10\xfc\x2a\x0a\xef\x66\xbf\x92\x63\xb1\x9c\xc9\xb9\x41\x74\xb5\x5a\xc8\xc5\x14\x74\xb1\xdd\xe1\x57\x7e\xc0\x3f\xff\xc7\x4d\x20\x8d\xa7\x28\xec\x1d\xdd\x81\xed\x09\x2f\x56\x18\xab\x70\x8e\x0d\x54\x19\x6a\x8e\x64\xa2\x09\x6e\xb8\x30\xe8\x46\x92\xe9\x92\x19\x91\x37\xd6\x28\x9a\xc2\x04\xd3\x91\x35\x4a\xd9\x7a\x07\x1e\xb6\x0f\x42\xe5\xdf\x3b\x37\xef\x88\x48\x4e\x58\xad\x3e\x85\x31\x39\x56\xea\x07\x98\xb0\x70\x75\x59\x65\xe9\x8b\x0c\xc1\x34\x8b\xf2\xb3\xed\xb5\x71\x9b\xf1\xe3\xf4\xfd\x49\x89\xc7\x0c\x2d\x2e\x37\xf1\x23\x60\x24\xcf\xff\xae\xfa\x29\x00\x5c\x48\xf2\x8c\x17\xaf\xbd\x22\xb0\x4a\x6d\xfe\x9d\x0a\x3f\xb4\x3e\x94\xe9\xa3\xe6\x9c\x79\xbb\x9a\xf2\xc9\xfc\xcb\x2e\xaf\xe2\xf9\x2c\x75\xeb\x37\x4b\xa2\x67\xef\x62\x65\x23\x3d\x66\x3c\xdf\x1f\x01\xd8\xaa\xad\x92\xf9\x6b\xa1\xc4\x6f\xf5\xdc\x68\x02\xc5\x58\xb9\xb5\x19\x5f\xee\x8f\xf0\x1e\xfe\x06\x00\x00\xff\xff\x2e\x35\xad\x4a\x1e\x02\x00\x00")

func type_users_graphql() ([]byte, error) {
	return bindata_read(
		_type_users_graphql,
		"type/users.graphql",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"mutation.graphql": mutation_graphql,
	"query.graphql": query_graphql,
	"schema.graphql": schema_graphql,
	"type/admin.graphql": type_admin_graphql,
	"type/auth.graphql": type_auth_graphql,
	"type/company.graphql": type_company_graphql,
	"type/course.graphql": type_course_graphql,
	"type/delegate.graphql": type_delegate_graphql,
	"type/lesson.graphql": type_lesson_graphql,
	"type/manager.graphql": type_manager_graphql,
	"type/users.graphql": type_users_graphql,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"mutation.graphql": &_bintree_t{mutation_graphql, map[string]*_bintree_t{
	}},
	"query.graphql": &_bintree_t{query_graphql, map[string]*_bintree_t{
	}},
	"schema.graphql": &_bintree_t{schema_graphql, map[string]*_bintree_t{
	}},
	"type": &_bintree_t{nil, map[string]*_bintree_t{
		"admin.graphql": &_bintree_t{type_admin_graphql, map[string]*_bintree_t{
		}},
		"auth.graphql": &_bintree_t{type_auth_graphql, map[string]*_bintree_t{
		}},
		"company.graphql": &_bintree_t{type_company_graphql, map[string]*_bintree_t{
		}},
		"course.graphql": &_bintree_t{type_course_graphql, map[string]*_bintree_t{
		}},
		"delegate.graphql": &_bintree_t{type_delegate_graphql, map[string]*_bintree_t{
		}},
		"lesson.graphql": &_bintree_t{type_lesson_graphql, map[string]*_bintree_t{
		}},
		"manager.graphql": &_bintree_t{type_manager_graphql, map[string]*_bintree_t{
		}},
		"users.graphql": &_bintree_t{type_users_graphql, map[string]*_bintree_t{
		}},
	}},
}}
