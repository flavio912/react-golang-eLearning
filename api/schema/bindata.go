package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _mutation_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x95\xcf\x6e\xdb\x30\x0c\xc6\xef\x7e\x0a\x06\xb9\xb4\x87\x75\xf7\xdc\xba\x04\x05\x02\xb4\x68\xd7\xd8\x0f\xc0\x5a\x8c\x23\x54\x96\x3c\x4b\x6e\x17\x0c\x7d\xf7\x41\xb2\xac\x7f\xc9\x76\xd4\xcf\xfa\x3e\x52\xa4\x28\xaf\xa1\x9f\x0c\x1a\xae\xa4\x86\x16\x25\xf4\x8a\xf1\xe3\x19\xcc\x89\x80\xbd\xdd\x01\xfd\xa6\x76\x32\xc4\x40\xd3\xaf\x89\xa4\xe1\x28\xc4\xf9\xae\xaa\xb8\x1c\x26\x03\xcd\x20\x14\xb2\x07\x2e\xe8\x89\x0c\xc2\x9f\x0a\xe0\xc8\x05\xd5\xe7\x81\x36\x70\x30\x23\x97\xdd\xaa\x02\x68\x95\x34\x24\xcd\x23\xc9\xce\x9c\x36\xb0\x97\x66\x55\x7d\x55\x95\x39\x0f\x94\x58\xbc\x92\x1e\x9c\xc5\x34\x8a\x54\xad\xa7\xb6\x25\xad\x6b\xf5\x4e\x32\xf2\xaf\xcb\x1c\x0e\xf3\x46\xe7\xf1\x4f\x91\x0b\xfa\xe4\x8f\xec\xb6\x22\xeb\xb9\x7c\x54\x1d\x97\x37\xce\x71\x03\xf7\x81\xac\x6e\x37\x70\x3f\x99\x93\xf3\xa9\x00\x7a\x94\xd8\xd1\x98\xed\x7e\x4a\x58\xb9\x9f\x91\xa0\x0e\x0d\x65\x82\x5d\x0a\x73\x85\x2d\xd6\x48\x68\xc8\x9b\x2e\x92\x6d\x0a\xf7\x96\x59\x9d\x5f\xdb\x92\x0d\xec\x52\xd4\xa4\xf0\x8a\x68\x18\x95\xed\xd6\xbe\xc7\x8e\xe6\x2a\xbe\xda\x26\x6b\x13\x0d\xd2\xf6\x5a\x71\xde\xad\x32\xf0\x4b\x62\x78\xe9\xe1\xdb\x93\xe7\x60\x0b\x74\x91\xf8\x2e\x85\x21\xf1\x1f\x4a\x09\x42\xb9\x8a\x45\x72\x7d\xca\x4b\xe4\x50\x90\xb8\x55\xc8\x32\xdb\xde\x44\x74\xb1\x7d\x4e\x2a\xdb\xbe\x8b\xe8\x3f\x09\x2d\x9d\xcd\x73\x5a\x68\x10\xe6\xd8\x56\x52\x49\x4d\x15\xc0\xda\x67\xba\x7c\x8a\xce\x5b\xd5\x0f\x28\xcf\xb9\xb1\x87\xd1\x77\x5e\x87\x03\x17\xa2\x26\x85\x57\x44\x6b\x7f\xf0\x48\xb2\xd8\xcb\xe5\xa8\x00\xec\x48\x3b\x76\x35\x13\xb7\xc1\x4f\xca\xd5\xab\xeb\x36\x8c\xd4\xe2\x60\xda\x13\xa6\xb3\x9e\x56\x15\x00\x87\x61\x54\x1f\xe1\x18\xd3\xc4\xd9\x06\x9a\x66\xbf\x4b\xf3\xb6\xc3\x8e\x1f\xf4\x2c\x05\x97\xb4\x55\xd3\xa8\x43\xf9\x0f\x05\x4f\xce\x6c\x97\xb0\x86\xfa\x79\xf7\x0c\x28\x84\xfa\x04\xc1\xe5\xbb\xf7\xda\x0a\xd4\x7a\x54\xaa\xbf\xb4\x2b\x3e\x5d\x71\x54\x4c\x01\x32\x06\x66\x32\x6a\x04\xa3\xa0\x75\x9f\xec\xbc\x4d\x63\x7b\x42\xed\x93\xd1\x8b\xed\x4b\x8e\x83\x65\xc1\xc3\x35\x09\x7d\xa9\xb1\xcb\xef\x43\x8d\x5d\x50\xd7\xd8\xc5\x06\xa2\xa1\x4e\x8d\xe5\xed\xf1\x34\x9e\xc1\x83\x18\xe1\x91\xb4\x56\xc5\x84\xcd\x2c\x88\xe6\x65\x50\xec\x25\xe3\x1f\x9c\x4d\x28\x72\x55\xe4\xc5\x14\xc4\x0f\xc9\x1c\xe8\xe9\xad\xe7\xa6\x4e\x9e\xa2\x43\x20\x41\x1f\xd1\x0b\x9e\xed\x23\x03\x6b\xcf\x34\x60\x78\x79\xbf\xf3\x10\x40\x03\x4a\xfd\x49\xa3\xb6\x5d\x41\x30\xa4\x4d\xac\x65\x12\x6b\x1b\x48\x91\x6b\x12\x2b\xcc\x58\x9d\xbd\x97\xac\x14\x46\xb4\x08\x43\xc8\x9f\x76\x9a\x78\x59\xde\x85\x16\xa1\x17\x5c\x86\x2f\x4d\x9a\x8c\x16\x69\x5c\x9a\x2c\x23\xbf\x7c\x49\x7e\x40\x8a\x4d\xa2\x78\xc8\x66\x56\x64\x36\xc3\x32\xaf\x5c\xde\x24\xac\xc8\x29\x97\xbb\x94\x7c\x47\xec\xfc\x24\x6f\xe2\xbc\x76\x40\x93\x59\x5e\xc8\x64\x1e\xfb\x41\x90\xfb\xa9\x7f\xb3\x1b\x34\xf0\x63\x72\x0d\x60\x40\xad\x89\x81\x1a\xe1\x88\x5c\x10\x03\x84\x76\xd1\xfa\x11\x85\x9b\x07\x35\x82\x8b\xa3\x6f\xab\xaf\xea\x6f\x00\x00\x00\xff\xff\x0e\xf4\xa8\xd5\x1b\x09\x00\x00")

func mutation_graphql() ([]byte, error) {
	return bindata_read(
		_mutation_graphql,
		"mutation.graphql",
	)
}

var _query_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x55\xcb\x6e\xdb\x30\x10\xbc\xf3\x2b\x26\xf0\x25\x01\x82\xe6\xae\x5b\x1e\x48\x11\xa0\x69\x13\xc4\x39\x15\x45\xb1\x96\x56\x12\x1b\x8a\x54\xf9\x68\xa2\x16\xf9\xf7\x82\xd4\xc3\xb2\x21\x1b\xed\x4d\xd2\xce\xec\xcc\xae\x76\xc9\x15\x7e\x06\xb6\x92\x1d\x5c\x6d\x82\x2a\xa0\x8d\x47\x63\x0a\x59\x76\xf0\x35\xa3\xd8\x7c\x00\xbf\x71\x1e\x3c\x17\x90\x1a\x2d\x59\x4b\x4a\xb1\x12\xbe\x6b\x19\x0f\x54\xf1\x9d\x2e\x0d\xfe\x08\xc0\x1b\x4f\x2a\xc3\x9d\xf6\x27\x58\xe1\x73\x68\x36\x6c\x61\x4a\xb4\x54\xb1\x03\x95\x9e\x2d\x7c\x2d\x1d\x8c\x66\x01\x98\xb2\x74\xec\x27\xfc\xba\xe6\xe1\x53\xe4\x24\x5c\x24\xa2\xb4\xa6\x49\x56\x9c\x27\xeb\x05\xa0\x64\x23\x77\x69\x0d\xbd\x45\xfb\xaf\x1a\x2d\xdb\xc4\x12\x40\x25\x7f\xb1\x5e\x70\x23\x3d\x37\xae\x8f\x8a\x77\x21\xa4\x6e\x83\x4f\x75\xa4\x1a\x66\xa6\x76\xa4\xb6\xd0\x7b\xd2\x54\xb1\xbd\x95\x2a\xd6\x13\x39\x9a\x1a\xce\xf0\xe4\xad\xd4\x95\x00\xb8\x21\xa9\x66\xef\x3f\xcc\x66\x2d\xbd\x9a\x43\x42\x90\x45\x86\xe7\xe7\xbb\x9b\xd8\x36\x56\xdc\xd6\x46\x6f\x01\x93\xd6\x0d\x2b\xae\xc8\xf3\x4c\x6c\x97\xea\xf3\xef\xf1\x75\x4a\xfc\xff\x56\x8e\xa8\x5f\x9b\x60\x1d\xbb\xc3\x95\x52\x9e\xb3\x73\xeb\xae\xe5\x0c\x97\xd3\xb3\x00\x36\x94\xbf\x54\xd6\x04\x5d\x5c\xd7\x9c\xbf\x64\xb8\x32\x46\x31\x69\x01\xb4\x56\xe6\x9c\xe1\x56\x19\x8a\x1d\x26\xa5\xcc\x2b\x17\x6b\x73\x15\xba\x09\x86\x15\x9e\x6a\xf3\x0a\xa3\x55\x87\xbc\x77\x01\x5f\x93\x47\x67\x02\xc8\x32\x28\xf8\xda\x58\xf9\x9b\x0b\x78\x83\x8d\x31\x2f\x73\xdb\x4d\x4b\xba\x3b\xd4\xb3\x9d\x1a\x26\xd2\x27\x76\xce\xe8\x7f\xe2\x00\x9e\x2a\x97\xe1\x6b\x0c\x7e\xeb\x53\x78\xb6\x25\xe5\x69\x1f\xa4\x26\xcf\xc5\x63\x60\xdb\xa5\x44\xed\xb0\x22\xd9\xb4\x2c\x5b\xd5\x2f\xb6\x60\x7b\xd5\xe3\xc8\xe5\xac\x0b\xa9\xab\x79\xb7\x4a\xc9\x6a\xfa\xbf\x27\x91\x98\xd6\x6e\x9b\x5d\xa6\xcc\x63\x1c\xa0\xa2\x91\xfa\x74\x6b\xfe\xe4\x2c\xc3\x65\xfc\x36\xc6\xdc\x69\x34\xd4\x9b\x19\x63\xf1\x39\x92\x9b\x7e\xb4\x67\xf4\xb3\x6c\x9c\xf7\x6d\x78\x9e\xe1\x1c\x65\x6a\x59\xb6\xbb\x16\xe7\x30\x7d\x65\xd9\x58\xe2\x36\xd1\x43\xbf\x9e\xc5\x30\xda\x7b\x5e\xc7\x89\x9f\x21\x96\xf5\x76\x57\x63\x51\x70\x84\x0c\x8a\x79\x3f\x17\x7b\x82\xc3\xb4\x4c\x71\x79\x40\x6f\x67\xaa\x16\xe5\x06\xc4\xa0\xa6\xd2\x40\xed\x89\xf5\x53\x36\x45\x97\x95\xe6\xa3\xb8\x28\xd4\x03\xa6\xaa\xd2\x7a\x1c\xf0\x3c\x5b\xe0\x03\x9e\x23\x62\x48\x15\x5c\x24\x3d\x3b\xb6\x42\x20\xde\x0b\xce\xcb\x43\x26\x1f\x87\xe8\x91\xdc\x23\x64\xc8\x3e\xe6\xdb\x6b\xc9\x88\x4a\x47\x91\xf3\xcb\x6a\x6b\x76\xfe\x88\x52\x0c\x0f\x2a\x31\xc7\x9e\x42\x8c\x0a\x60\x15\xaf\xb5\xa0\x0e\xb4\xea\x3e\xc5\x8e\x4d\x6f\x02\x0c\x2a\x63\xae\x3d\xa5\x1e\x23\x12\xc0\x31\xd9\xbc\x7e\xea\x94\xa2\x4d\x58\xd6\x1c\x83\xbd\xea\x19\x2e\x2e\x70\x19\x8f\x43\x37\x90\xa5\xae\x46\xcf\xe7\xe3\xc4\x80\x74\xd1\x37\x2a\xa9\xe4\xe4\xb9\x32\xf1\xfe\x3e\x4d\xfc\x8f\xec\xe3\x91\xda\xdf\xa0\x3c\x0c\xc7\x0c\x25\xde\xc5\xdf\x00\x00\x00\xff\xff\x66\x2b\x9f\xf2\xf2\x07\x00\x00")

func query_graphql() ([]byte, error) {
	return bindata_read(
		_query_graphql,
		"query.graphql",
	)
}

var _schema_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x4e\x4e\xcc\x49\x2c\x52\x08\x0d\xf5\x74\xe1\x82\xb2\x43\x32\x73\x53\xb9\xb8\x8a\x93\x33\x52\x73\x13\x15\xaa\xb9\x14\x14\x0a\x4b\x53\x8b\x2a\xad\x14\x02\x41\x14\x97\x82\x42\x6e\x69\x49\x62\x49\x66\x7e\x9e\x95\x82\x2f\x94\xc5\x55\xcb\x05\x08\x00\x00\xff\xff\xc2\x82\x45\xdf\x48\x00\x00\x00")

func schema_graphql() ([]byte, error) {
	return bindata_read(
		_schema_graphql,
		"schema.graphql",
	)
}

var _type_admin_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x90\xcd\x8a\x83\x30\x14\x85\xf7\x79\x8a\x3b\xaf\x91\xdd\x30\x6e\x84\x61\x70\x28\xae\x4a\x17\x17\x72\x0d\x17\x92\x18\xf2\x43\x11\xf1\xdd\x8b\xb1\x60\xd5\x52\xda\x5d\x38\x9c\x7c\xdf\x49\xd2\xe0\x09\xbe\x95\x65\x07\xa3\x00\xc8\x99\x95\x84\xb6\xad\xab\x2f\x01\x40\x16\xd9\x48\x38\xa5\xc0\x4e\xcf\x41\xc7\x21\xa6\x3f\xb4\xf4\x18\x1a\xdc\x67\x93\x10\x2b\xb7\x41\x4d\xc0\xd6\x1b\xb2\xe4\x52\x84\x06\x35\x3b\x4c\xa4\xfe\x33\x85\xa1\x58\x49\x69\x8a\x12\xce\xa5\x7f\x11\x00\x1e\x35\xd5\xae\xeb\xe5\xdc\x2e\xa7\x99\xc9\xce\xe7\xb4\x40\x7f\x7b\x7d\x5f\x7c\xd8\xe8\x31\xc6\x6b\x1f\xd4\x66\xce\x72\xf5\x27\x10\x26\x2a\x80\xba\x04\xe3\xfb\x6f\xfa\xcc\xd4\x7a\x75\x34\x6d\x3f\xf7\xe0\x7d\xa2\xdd\x5b\x57\x41\x45\x86\x5e\x0a\x26\x71\x0b\x00\x00\xff\xff\x68\xfa\x3e\xad\xdb\x01\x00\x00")

func type_admin_graphql() ([]byte, error) {
	return bindata_read(
		_type_admin_graphql,
		"type/admin.graphql",
	)
}

var _type_auth_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\xa9\x2c\x48\x55\x70\x2c\x2d\xc9\x08\xc9\xcf\x4e\xcd\x53\xa8\xe6\x52\x50\x28\x01\xb1\xac\x14\x82\x4b\x8a\x32\xf3\xd2\x15\xb9\x6a\xb9\x00\x01\x00\x00\xff\xff\xa3\x33\x16\xdc\x24\x00\x00\x00")

func type_auth_graphql() ([]byte, error) {
	return bindata_read(
		_type_auth_graphql,
		"type/auth.graphql",
	)
}

var _type_company_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x92\x4f\x6b\x33\x21\x18\xc4\xef\x7e\x8a\xc9\xed\x7d\x21\x97\xf6\xe8\x2d\x49\x29\x04\xfa\x97\xb2\xa7\xd2\x83\xc4\x27\x22\xec\x3e\x8a\xba\x85\x25\xe4\xbb\x17\x75\x53\x96\xec\xe6\xda\xdb\x38\x8e\xfa\x73\x78\xd2\xe0\x09\x3b\xd7\x79\xc5\x03\x4e\x02\x50\xde\x07\xf7\x4d\x5a\x62\xeb\x5c\x4b\x8a\x05\xd0\xf7\x56\x4b\x34\xcd\xfe\x61\x25\x80\x43\x20\x95\x48\x6f\x92\xc4\x47\x0a\x96\x8d\x00\x58\x75\x74\x59\xe6\x4c\xa7\x58\x19\x0a\xf1\x9f\x57\x86\x24\xde\x94\xa1\x35\x8e\xb6\x4d\x14\x24\x9e\xeb\xe6\x63\x59\xae\xe1\x82\xa6\xb0\x1d\x24\x5e\xab\xf8\xff\x9b\xc8\xc7\xf2\x6d\x4a\xeb\x40\x31\x4a\x6c\xaa\x58\x89\xb3\x10\x85\x7c\x34\x2a\x79\xd5\x4f\x96\xe9\x6e\xca\x32\xf1\xef\xa7\xfe\xc1\xf5\x9c\x86\xa9\xe3\x5d\x4c\x3b\xa7\x69\x96\x0a\x93\xd8\xe5\xe9\xb1\xb4\xcc\x08\xdb\xf9\x96\x3a\xe2\x14\xf3\x57\x2d\xe7\x7e\xde\x7b\x0a\xb5\x52\xd2\x86\xa2\xc4\xe7\x78\xe2\x2b\xbf\xa4\x0c\xed\xf9\xe8\x6a\x35\x59\xe5\x7b\x2d\xfb\x3e\x61\x57\xfa\x1d\xc3\xfb\x62\x9d\x0a\x48\x31\x5e\xae\x9a\xfe\xbb\x5f\x57\xba\xc6\xeb\x25\xba\xab\x11\x99\xb3\xde\x18\xad\x25\xfc\x1b\xf4\x33\xf8\x05\xf6\x39\xba\x38\x8b\x9f\x00\x00\x00\xff\xff\xc7\xdd\x28\x06\xe4\x02\x00\x00")

func type_company_graphql() ([]byte, error) {
	return bindata_read(
		_type_company_graphql,
		"type/company.graphql",
	)
}

var _type_course_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x56\x5f\x6f\xdb\x36\x10\x7f\xd7\xa7\xb8\xc4\x0f\xd9\x80\xe6\x61\xcd\x1f\x6c\x7e\x4b\x55\x0f\x33\x90\xa1\x99\x2d\x63\x1b\x82\x3c\x5c\xa8\xb3\x4c\x94\x22\x35\xf2\x98\x44\x28\xfa\xdd\x07\x92\x8a\x45\x3b\x71\xd1\xae\x2f\x83\x01\x4b\x22\xef\xcf\xef\xee\x7e\x77\x24\x69\xdf\xc2\x95\x10\xe4\x5c\xd5\x77\x04\x9f\x0a\x00\x4b\x8e\xad\x14\x4c\x75\x01\x60\x3a\xd2\xc5\xe7\xa2\x88\x82\x4b\xb6\x5e\xb0\xb7\x34\x53\xd4\x92\xe6\x28\xde\x9a\xda\x2b\x2a\x00\x98\x1c\x17\x00\x8a\x9c\x33\xa3\x4e\x69\xbc\x75\xb4\x35\x6e\xb4\x92\x3a\x48\x0b\x85\xce\x59\x63\xda\x20\x29\x35\x93\x5d\xa3\x20\x58\xf6\x4a\xe1\xbd\x77\x73\xa6\x36\x2a\x68\x6c\x69\x1a\x3c\x4b\xdd\x1c\x15\x00\xde\xcb\x7a\x0a\xab\xd5\xfc\x7d\xf8\x12\xa6\xed\x14\x31\x4d\xe1\x9d\x31\x8a\x30\xfa\xe5\xe0\xec\x3a\xc2\x00\x19\xf6\x03\x56\xf7\xfd\xa6\x01\xda\xee\x6c\xb5\xb8\x7e\xd6\x89\x31\x3f\x71\x6e\x82\xb1\x71\x53\xb8\xad\xb0\x39\xba\xdb\x42\x49\x29\x88\x2e\x83\x83\xb9\xe6\x28\xda\x77\x34\xcd\xd2\x73\xf4\x0a\xa2\x7b\x14\x1f\x1b\x6b\xbc\xae\xcb\x0d\x89\x8f\x39\x94\xce\x4a\x41\x53\xf8\x55\x19\xe4\x04\x57\x19\x9b\x21\xa3\x27\x41\xb6\xe3\x6c\x45\x6a\xb6\xa6\xf6\x82\xa5\xd1\xd9\xf2\xc6\x3c\x56\xa6\xdc\x06\x9b\xad\x7b\xeb\xf2\x9d\xe8\xaa\x00\x78\xdc\x20\xff\x6d\xfc\x35\xa1\xd5\x53\xb8\x1d\xd0\xde\x45\xe6\xfc\xe3\xa5\x4d\xe9\xde\xdd\x71\x1d\x09\xb9\x96\xa2\x22\xdb\xba\xcc\x89\x40\xa6\xc6\xd8\x7e\x0a\xe5\xf0\x56\x00\xa0\x52\xe6\x91\xea\xca\xbc\xf3\x7d\x1e\xb2\x1b\x0a\x18\x4c\x67\xb5\x7c\x91\xe9\x1b\x6c\x28\x2f\xfc\x0d\x36\x52\x23\x53\xfd\x87\x27\xdb\xc7\x3a\x50\xdd\x50\xb0\x93\x14\x02\xc2\x0e\x1b\x9a\xeb\xb5\x99\x06\xf1\xf8\x96\x88\xd9\x79\x86\x25\x3e\x50\xf9\xcc\xd7\xa4\x32\x8f\x1b\x59\x49\xf7\xaa\x97\xc5\x16\x08\x95\x68\xf5\x2d\x65\xf9\x42\xe9\x71\xdb\xaf\xd3\xac\x77\xf7\x38\xf1\x0a\x25\x06\x72\x46\x82\x7f\xa9\x28\xf7\xa8\x35\xd9\x79\x8b\x0d\x2d\x7d\xb4\x9f\x1b\xf1\x6c\xec\x18\x12\x4c\xd2\xc3\xac\x81\x37\x04\x55\xd8\x85\x1f\xb6\xcd\x0d\x22\x71\xdf\x68\xd5\xff\x18\x1a\x08\x9f\x6e\xd0\xb2\x14\xb2\xc3\x48\x92\x94\x39\xc7\x68\xf9\x3d\x06\x96\x55\xb2\x0d\xa1\x90\xae\x77\xbe\x95\x11\xb8\x93\xa1\x9d\xe2\x7c\x88\x53\xe5\xfb\x2a\x33\x01\x47\xc2\xe8\x1a\x6d\x5f\x7e\x45\xe5\x60\x02\xcb\x8d\xb1\x0c\x35\x39\x61\x65\x17\xc0\x85\x2c\xa4\x80\x0f\xd4\x15\x26\x70\x72\x75\x6f\x3c\x03\x6f\xa4\x1b\x64\x4f\x82\xe3\x20\x75\xa8\x19\x83\xd6\x6f\xe6\x11\xd8\x6c\x87\xd2\x61\xfd\xd7\x9a\x16\x26\x30\x73\x2c\xdb\xd0\x03\x49\xe4\x90\xad\xc3\xed\x1d\x40\xfc\xb9\x41\x86\xde\xf8\x13\xa5\x40\x85\xfd\x13\xb8\xf7\x4a\x11\x43\x67\xa4\x66\x77\x78\x04\x04\xed\x45\xb6\xf5\x52\xf1\xff\xca\x77\xf7\x7c\xe6\x6d\xa7\xc5\x38\x73\x12\x01\xc7\xd5\xc8\xba\x34\xd7\xf7\x8f\xca\xfd\xf3\x65\xd4\xb6\x84\x4c\x15\x36\x23\x6f\xf7\x4f\x81\x9d\xb8\x8e\xb6\xc3\xae\xc2\x26\x8a\x8f\x66\xbf\x5e\xf7\x99\xe1\xff\xc5\x40\x8e\xfb\xd9\xce\xb7\x80\x4f\xfa\x37\xde\x8a\x0d\xba\xa1\x69\xdd\x68\x20\x11\x31\x14\x2e\x1c\x94\x77\x31\x71\x8e\xec\x58\xc9\x23\x98\xc0\xb5\x74\x1c\xba\xad\x26\x45\x0d\x32\xb9\x08\xdf\xc5\x36\x65\x8b\x73\xfd\x60\xa4\xa0\x59\x8b\x52\x65\xb5\x0c\x44\xea\x98\xea\x81\x00\x03\xc3\x5e\x39\x68\x4b\xa3\xd7\xd2\xb6\x2f\x6f\x15\x7b\xa8\x17\xe4\x3a\xa3\x87\xb3\x9d\x2d\x6a\x87\xb1\x13\xcb\xfd\xbb\x43\xc0\xcc\xd6\x13\xc8\x34\x27\x43\xef\xa1\xee\x41\x3a\x30\x1a\x10\x84\xd1\x6c\x51\x30\xa0\xae\x81\x37\xde\x41\x6d\xc8\xe9\x13\x06\x4d\x54\x87\x6e\xed\xb0\x07\xdf\xad\xad\x19\x06\xa6\x95\x1d\x95\x4a\x92\xe6\x25\x09\x4b\xf9\x5c\x9a\xaf\x5f\xc3\x12\x7c\xad\x51\x39\x7a\x93\x1a\x5e\x3a\x68\xe4\x03\x69\x70\x26\x26\x18\x04\xea\xe0\x25\xc4\x3a\x81\x5b\x98\xfd\x75\xf5\xfb\xcd\xf5\x0c\xca\x0f\xab\xc5\x72\x06\xcb\x6a\xb1\x2a\xab\xd5\x62\x56\x4c\x00\xe0\x53\x62\xf9\x71\xba\xfc\x1d\xbf\x19\x38\x74\x7c\x76\x7e\x76\x7e\x76\x9a\xff\x9f\xc7\xc7\xf1\xe7\x37\x3b\x7a\xe9\x92\x38\xea\xfd\xf4\x36\xfe\x4e\xd3\xe3\xed\x69\xf6\xb5\xaf\x1a\xae\x99\xa3\xe2\xcf\xbf\xa4\xdf\xe9\xc5\x65\xfc\x9d\x5e\x5c\x6e\x5f\x2e\x2e\x2f\x92\xf2\x5d\xf1\x6f\x00\x00\x00\xff\xff\xe8\x2e\x2a\xe7\xe8\x0a\x00\x00")

func type_course_graphql() ([]byte, error) {
	return bindata_read(
		_type_course_graphql,
		"type/course.graphql",
	)
}

var _type_delegate_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x92\xc1\x4e\xf3\x30\x10\x84\xef\x79\x8a\xed\xed\xff\x5f\xc1\xb7\xd2\x5e\x22\x21\x54\x20\x3d\x21\x84\x96\x7a\x6a\x0c\x8e\x6d\xd9\x0e\x28\xaa\xfa\xee\xc8\x49\xd3\xa4\x69\x2f\xdc\x92\xd1\xac\x77\xe7\xdb\x4d\xad\x07\xad\x61\xa0\x38\x81\x0e\x05\x51\xd3\x68\x29\x68\xbb\x2d\xd7\x8b\x82\x68\x17\xc0\x09\x72\x99\x04\x3d\xa7\xa0\xad\x2a\x88\xaa\x6a\xf5\x56\xae\x07\x21\xbb\x50\xb3\x36\x13\xc7\x5e\x87\x98\x1e\xb8\xc6\xd4\x64\xf8\x5a\x4b\x30\xf0\x1f\xce\x62\x52\x9c\x7d\xf7\x4e\x69\x3b\x35\x7e\xba\xf7\x4a\x27\x73\x51\xbc\x73\xb5\x67\xdb\x0a\x5a\xf5\x1f\x59\xf3\xc1\xed\xb5\x41\x59\xb3\xc2\x36\x4c\x67\xe2\x5d\xd2\xdf\x3a\xb5\xff\x3c\x2b\x08\xda\xb0\xc2\x7f\x41\xcb\x93\x9a\x7f\x8b\x63\x51\x68\xeb\x9b\x44\xab\x2e\xf5\x80\xa5\xec\xb4\xc3\xd8\x31\xc3\xe9\x11\xfd\x25\xeb\x1c\xd2\xad\x48\xb7\x78\x28\x58\x04\x4e\xd8\x70\x8c\x3f\x2e\x48\x41\x77\xce\x19\xb0\x9d\xc7\xf5\xc6\xb1\xac\xdc\x17\xce\xe4\x72\xa2\x6e\xc3\x97\x81\x9e\x10\xbd\xb3\xb1\xdf\xb7\x3c\x89\xe2\x7c\x06\x8b\x49\x53\x39\x76\x9d\x3d\x39\xb8\x33\x39\xd2\xb5\x37\xa8\x61\x53\xcc\x60\xb5\xcd\x95\x8f\x0d\x42\xdb\xb5\x80\x54\x88\x82\x5e\x86\x92\xd7\x3c\x39\x2b\x94\x76\xef\xfa\x4d\xe4\xaf\x11\xff\xe0\xeb\xae\xa0\x7b\xe1\xfa\xe4\xfc\x6c\xae\xac\x59\x97\x93\x8d\x7c\x8e\xc5\x6f\x00\x00\x00\xff\xff\x41\x95\x11\x83\xdf\x02\x00\x00")

func type_delegate_graphql() ([]byte, error) {
	return bindata_read(
		_type_delegate_graphql,
		"type/delegate.graphql",
	)
}

var _type_individual_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xce\x3d\xca\xc2\x40\x10\x87\xf1\x7e\x4e\x31\xef\x35\xd2\xbe\x55\x1a\x0b\x3f\x0e\x30\xb2\x7f\x75\x64\xb3\xbb\xcc\xcc\x2a\x22\xb9\xbb\x90\x42\x03\x69\x7f\xf0\xc0\xa3\xa5\xf5\xe0\x7f\x83\x04\xc6\x92\xf4\xa1\xa9\x4b\x1e\x17\x7d\x13\xf3\x45\xcd\x63\x27\x13\x06\x3e\x84\x69\xb9\xfe\x11\x73\x96\xad\xdd\xeb\xf9\xa8\x91\xbf\x46\xcc\x81\x8c\x76\xab\x65\x6d\x98\x44\xf3\xba\x6b\xe2\xfe\xac\x96\x7e\x36\x13\xc5\xab\x61\x33\xb5\x87\xb7\x5a\x1c\xcb\x57\x77\xd8\xc0\x27\x87\xd1\x4c\x9f\x00\x00\x00\xff\xff\xb1\x3b\x04\x79\xc5\x00\x00\x00")

func type_individual_graphql() ([]byte, error) {
	return bindata_read(
		_type_individual_graphql,
		"type/individual.graphql",
	)
}

var _type_lesson_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x8c\xb1\xca\x83\x40\x10\x84\xfb\x7d\x8a\xf1\x35\x6c\xff\xbf\x11\x52\x18\x82\x55\x48\xb1\xe0\x64\x39\x88\xeb\xe1\xad\x10\x09\xbe\x7b\x38\x2d\xd2\x0d\x33\xdf\x7c\xb1\x65\xe2\xc2\x52\x66\xef\xd5\x88\x34\xe5\x17\x27\x7a\x14\xf4\x6a\xc9\x35\x38\x5e\x57\x2e\x1b\x3e\x02\x70\x34\x96\x16\xf7\xf3\xf0\x10\x20\xab\xb1\xf3\xe7\xdc\x56\xfc\x48\xb2\x8b\x24\xcf\x6b\xe0\x6f\xa1\x06\x4f\xb6\x3b\x9a\xea\x70\x9d\xd8\xe2\x16\x4b\x72\x6b\x04\x08\xb5\xaa\x1c\x86\xee\xbf\xa9\xc6\xe0\x3b\x7e\xfb\x2e\xdf\x00\x00\x00\xff\xff\x22\x19\xc7\xa3\xa2\x00\x00\x00")

func type_lesson_graphql() ([]byte, error) {
	return bindata_read(
		_type_lesson_graphql,
		"type/lesson.graphql",
	)
}

var _type_manager_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x92\xcd\x6e\xe3\x30\x0c\x84\xef\x7a\x0a\x2e\xf6\x2d\x7c\xdb\x4d\xb0\x80\x81\x6d\x91\xfe\xf8\x54\xf4\xc0\x46\xb4\xc2\x42\xa2\x04\x49\x46\x10\x04\x79\xf7\x42\x76\x7e\x9c\x5a\x97\xde\xec\xc1\x70\xc0\x8f\xa3\x7c\x08\x04\x0f\x28\x68\x28\x02\x1c\x15\xc0\x30\xb0\x6e\xa0\xeb\xda\xf5\x2f\x05\xb0\x8d\x84\x99\xf4\x9f\xdc\xc0\x4b\x8e\x2c\x46\x01\x90\x43\xb6\x97\xff\x62\xea\x39\xa6\xfc\x88\x8e\xe6\xa2\xc5\xa5\x96\xc9\x52\xd8\x79\x59\x18\xff\x7b\xc3\x32\x17\x3f\xfd\xc7\x2b\x67\x7b\x67\xdc\x7a\x17\x50\x0e\x0d\xac\xa6\x8f\xa2\x85\xe8\x7b\xb6\xd4\x3a\x34\xd4\xc5\xeb\x56\xea\xa4\xd4\x1c\x6d\x83\x86\x80\x5d\xb0\xe4\x48\x72\x82\x0d\x1a\x96\x02\xf6\x34\x50\x3c\x8c\xdc\xa4\x0d\xa5\x06\xde\xce\x13\xef\x25\x1c\x0d\xb5\xd2\xfb\xa6\xf8\xc7\xaf\x92\xcb\x12\x86\x7c\x09\x1e\x17\x9f\xe6\xbf\x5f\x25\x60\x4a\x7b\x1f\xf5\x5c\x13\xff\x4c\x29\x34\xf0\xd7\x7b\x4b\x28\xb7\xb8\xd5\x78\xe7\x73\x68\x3b\x4a\xc7\x1b\x72\x69\x63\xea\x04\x7e\xc3\x3f\x1f\x01\xb5\x63\x49\xb0\xdf\x91\x4c\x15\xb1\x18\x70\xd3\x74\x02\xdf\x83\xe6\xbe\xa7\x48\x92\xcf\x11\x4c\xe9\x27\x45\x2d\x60\x6a\x7d\x54\xdb\x5c\x52\x5f\x19\xd7\x64\xa9\xc2\x38\x7f\x70\x57\x6f\x17\x74\xed\x1e\xf7\x8f\xf3\x6e\xcb\x1a\x5e\x85\xae\xb6\x77\x85\x4f\x9d\xd4\x57\x00\x00\x00\xff\xff\xf3\x0d\x49\x60\x1b\x03\x00\x00")

func type_manager_graphql() ([]byte, error) {
	return bindata_read(
		_type_manager_graphql,
		"type/manager.graphql",
	)
}

var _type_module_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x92\xcb\x6a\xc3\x30\x10\x45\xf7\xfa\x8a\xf1\x6f\x78\xd7\xd7\x42\xd0\x42\xa9\xe3\x76\x51\xb2\x50\xac\x21\x88\x4a\x23\xa3\x47\x20\x94\xfc\x7b\x91\x94\xd8\x72\x70\x4b\xbb\xea\xca\x96\xe6\xc1\xbd\xe7\x2a\x1c\x47\x84\x27\x2b\xa3\x46\x50\x66\xd4\x68\x90\x82\x87\xee\xa8\xb5\xd8\x45\xcf\x03\x1a\xf8\x64\x00\x31\x2a\xd9\x42\xdf\xf3\xfb\x86\x01\x90\x30\xd8\x42\x17\x9c\xa2\x7d\x3a\xef\x04\x11\x3a\x6e\xc4\x1e\xfb\x97\xc7\x4b\x85\x01\x48\xf4\x83\x53\x63\x50\x96\xea\xfe\xe0\x04\x95\x42\x7d\x7b\xb0\x6a\x40\x7b\x40\xb7\xdc\x71\x50\x12\x6d\x0b\xaf\xe9\xc3\x00\xfc\x59\x5a\x0b\xef\xb5\xca\x66\xcb\x00\x06\x9b\x2c\x04\x6c\xe1\xd6\x5a\x8d\x82\xd8\x89\x31\xa4\x68\xca\xf4\x26\x99\x4d\x6e\xde\x78\xb7\xe1\x37\xa9\x98\xfd\xe7\x62\x2e\xa4\x63\x3b\x37\x27\x55\xd1\xe9\x59\xe4\x89\x31\x45\x63\x0c\xa5\x85\xe7\xdf\x5f\xce\x65\x19\x85\xf4\x43\xc1\x5c\x26\xd1\x07\x06\xa0\xd1\x7b\x4b\xf3\xfe\xd2\x38\xe1\x2f\xfb\x17\xd3\xcd\x55\x2a\xd3\xe8\x9d\x43\x11\xf0\xbc\x60\x52\x78\x1d\x59\x10\xfb\x84\x30\xcf\x6e\xff\x9a\x54\x95\x77\x17\x87\x01\xbd\xdf\xd8\x0f\xa4\x3a\xb4\x4b\x96\xdf\xd5\xab\x50\xb3\xc8\x65\xb2\xb3\xfd\x66\x3b\xc5\x54\x1b\x7b\x16\x47\x6d\x85\xcc\xd6\x4c\xbe\xb9\xe0\x99\x41\xf4\xa3\x5c\x01\xb1\x7c\xc9\xd7\x18\x6a\x4c\xeb\x54\x56\xa1\xfc\x1b\x93\xda\xe3\x8f\x4c\xbe\x02\x00\x00\xff\xff\xd6\x8d\x98\x78\xe9\x03\x00\x00")

func type_module_graphql() ([]byte, error) {
	return bindata_read(
		_type_module_graphql,
		"type/module.graphql",
	)
}

var _type_question_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x93\xdd\x4e\xc3\x30\x0c\x85\xef\xf3\x14\xae\x78\x8b\xde\xb1\x32\xa0\xd2\x04\x1b\x5b\xaf\x50\x85\xac\xd5\x8b\x22\xda\xa4\xe4\x47\x50\x4d\x7b\x77\x94\x94\x6e\xeb\xcf\x24\x06\x77\x8d\x65\xfb\x9c\xf3\x25\xb5\x4d\x4d\xb0\x72\x64\xac\x50\x12\xf6\x0c\xc0\x39\x51\xc4\x90\x65\xe9\x5d\xc4\x00\x2c\x7d\xd9\x18\xd6\x56\x0b\xc9\xfd\x59\xa3\x2c\x54\x25\x0c\xdd\x4a\xf3\x49\xda\xc4\x30\x53\xaa\x24\x94\x0c\xe0\xe3\x67\xcd\xa6\xa9\x29\x3e\x2e\xf5\x27\x3f\x89\xdd\xc0\x6b\x3b\x1a\xe5\xec\xc0\x58\x4f\x7f\x89\x9c\x40\x54\x75\x49\x15\x49\x6b\x60\x89\x5c\x48\xb4\x54\xac\x1c\xe9\x26\xb8\xa3\x82\x93\xdf\xd1\x8d\xe4\x0c\xa0\x46\x4e\xa9\xdc\xa9\xd8\x0f\x84\xaf\xe3\xe6\x56\x6a\x22\x97\x30\x89\xd2\x9a\xb6\xf6\x3c\xc0\x79\x58\xdf\x53\x21\xa7\xec\x65\x71\x2c\x1d\x18\x23\xe9\xaa\x5e\xb4\xb0\x7b\x9d\x3e\x3d\x2c\xe6\x6f\xc9\xe3\x73\x9a\xcc\x7d\x9b\x90\xb5\xb3\x90\x68\x42\x4b\x5d\x77\x1a\x6a\xfb\x6b\xa0\x46\x57\x50\x6d\xc5\x66\x68\xc4\xb6\x5d\x13\xf4\xa2\x3c\xdc\x22\x72\xdf\x12\xc2\xe7\xd1\xd0\xe0\x70\x26\x78\x1c\x03\x8a\xe0\x06\x0a\xda\xa1\x2b\xad\x01\xab\x60\x87\xa5\xa1\x0b\xd4\x36\xea\x9d\xe4\x39\xb7\x70\x1b\x7d\x1e\x4b\x6c\x4a\x85\x45\x50\xeb\x42\x9e\x02\x9e\x4c\x66\x75\x31\x49\xf1\xf2\x43\xfd\xf3\x3b\xed\x01\x6d\x75\xc7\x40\x87\x3c\x87\x4e\x27\x71\x9e\xcc\x4e\xb2\xfd\x37\xda\x3e\xa4\xdf\xa2\xed\x2a\xf7\xa2\xb4\xa3\xdf\x64\xac\xbf\x19\xc4\xfe\x0e\x00\x00\xff\xff\xb9\x45\xf1\xb2\x3d\x04\x00\x00")

func type_question_graphql() ([]byte, error) {
	return bindata_read(
		_type_question_graphql,
		"type/question.graphql",
	)
}

var _type_test_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x54\xc1\x8e\xd3\x30\x10\xbd\xe7\x2b\x26\xea\x5f\xe4\xb6\x80\x56\xea\x89\xae\xda\x1e\xd0\xaa\x07\x37\x7e\x9b\xb5\x70\xec\xe0\x19\xb3\xaa\x10\xff\x8e\xec\xa4\x71\x5a\x08\x02\xc1\xa9\x63\x77\xde\xcb\x9b\x37\x2f\x91\xcb\x00\x3a\x80\x85\x4c\x3f\x58\xf4\x70\xc2\xb4\xbf\x58\xab\xce\x91\xb7\x82\x9e\xbe\x55\x44\x4e\xf5\x68\x68\x2f\xc1\xb8\xae\xae\x88\x62\x34\xba\xa1\xe3\x71\xfb\x21\x9d\x5a\x9f\xa0\x82\x86\xde\x79\x6f\xa1\x5c\x45\x24\xaa\xe3\x86\x9e\x0f\xaa\xab\x4f\x15\x91\x12\x41\x3f\x08\x3f\x58\xeb\xdf\xa0\x1b\xda\x3a\xa9\x88\x06\xc5\xbc\x43\x68\xe1\x44\x75\x68\xe8\xd1\x7a\x95\xee\xbf\x44\xb0\x18\xef\xf8\xe0\x1f\x1c\xbf\x21\x5c\x01\x41\x39\xed\x7b\xc3\x18\xaf\x79\xf9\xc8\x19\xd4\xd0\xf3\xd3\x54\xd7\xa7\xea\x7b\x55\xcd\x43\xee\x54\x87\xe5\xa0\x3b\xd5\x19\xa7\x04\xfa\x29\x22\x5c\xf2\xa8\xd0\x1d\xb2\x72\xb0\x9c\xb2\xc4\x0e\x5b\xf7\xe2\x9b\xd4\x9c\xab\xc4\x68\xdc\x10\x25\x53\x3e\x1a\x2b\x08\x19\x5a\x5c\xb9\xb3\x6c\xd6\xf0\x3e\x40\x09\x46\x25\x17\xeb\x95\xce\x38\x01\x4b\x93\xc9\x0a\x75\xe9\xdc\xe6\xf3\xaf\xb6\x30\x79\x9c\xd7\xb0\x66\x72\xbd\xe6\x72\xbd\x6a\x73\xfd\x3b\x9f\x6b\xda\xd0\xc7\xaf\x08\xc1\x68\x30\x0d\x08\x33\xc9\x8c\x51\xe9\x74\xb7\x8f\x51\x63\x06\x07\x8d\x00\x4d\xd6\xb0\x90\x7f\x21\x79\x45\xe9\x24\xe3\x48\x5e\x0d\x67\x4b\x8a\x19\xd7\x6d\x8e\x62\xb2\x17\x57\x48\x22\x9e\x92\x48\x9b\xfc\x7b\x4f\x4a\x67\x18\xd7\x91\xca\x58\xe8\xe4\x53\x2e\xd7\x91\x0c\x8b\x56\xa0\xa7\xc6\xa2\x63\x1f\xcf\xbd\x91\xdb\xa5\xb4\x3e\x06\x46\xa2\x4a\xd6\xd1\x86\x0a\xcf\xf8\x57\x2e\x23\x23\x50\x9a\x4b\x7d\x4e\x62\xd2\x95\xe4\x97\xce\x4d\xfb\x5f\x57\x93\xfb\x2e\x3e\x92\x0a\x98\x14\xa5\x48\x5d\xc7\x58\xa6\x7d\xf4\x67\xf4\xf9\x93\x8f\xe1\xda\x42\xe2\x67\xaa\x39\x8b\x65\x98\x65\x16\x39\xb6\x2d\x78\xb1\xef\x32\xfd\x71\xd0\x3f\x45\xf2\xf6\x43\x70\x93\xf9\x3f\xcb\xe7\x7f\xfd\x08\xfc\x4b\x36\xff\x3a\x9a\xd9\xc4\xe2\xc9\xea\x0b\xfd\x23\x00\x00\xff\xff\xac\x4d\xf0\xb4\x62\x05\x00\x00")

func type_test_graphql() ([]byte, error) {
	return bindata_read(
		_type_test_graphql,
		"type/test.graphql",
	)
}

var _type_users_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x53\x4d\x6b\xdc\x3c\x10\xbe\xeb\x57\x3c\xc1\x97\xf7\x85\x92\x1f\xe0\xdb\x92\x52\x58\x28\xa5\x25\xd9\x53\xc9\x61\xd6\x1a\x7b\xa7\x91\x25\x57\x1a\xa5\x98\x92\xff\x5e\x24\xef\x3a\x4e\xb3\xf4\x66\xcd\xcc\xf3\x31\x1f\x66\x9f\x47\x1c\x12\xc7\x87\x79\x62\xfc\x36\xc0\x48\x9e\x06\x8e\x06\x10\x6f\xe5\x59\x6c\x26\x67\x00\xcb\x8e\x07\x52\x36\x2f\xc6\x34\x15\x01\x49\x20\xe8\x49\x3c\xb4\x80\xf5\x44\x8a\x2e\x38\x47\xca\x09\xe2\xfb\x10\x47\x52\x09\x1e\x74\x0c\x59\xa1\x27\xbe\x90\x7f\x78\xa5\x6b\x40\xde\x6e\xa4\x90\x0b\x75\x21\x4c\xb7\xb8\x0f\x23\xa3\x17\x76\x36\x81\x22\xc3\x07\xc5\x10\xc4\x0f\xd0\x80\x23\x83\x9e\x49\x1c\x1d\x1d\xc3\xf2\xc4\xde\x8a\x1f\x4c\x83\xe0\xab\x56\x35\x15\xfa\x85\x70\x0e\xb9\x32\x44\xfe\x99\x39\x69\xa1\xb0\xa4\x84\x3e\xc4\x5b\x53\x2b\x6b\x4b\x65\x00\xe5\xd5\xae\x33\xb9\x31\x00\x8f\x24\xae\xc5\xbd\xc6\x22\x00\xf4\x12\x93\x7e\xa1\x91\x2f\xb1\x52\xe4\xe8\x7d\x4c\xd9\xf1\x74\x0a\x9e\x37\xe0\x1f\xe1\xf8\x20\xea\xb6\xa1\x02\xfd\x1c\x06\xf1\x5b\x6c\x17\xc6\x89\xfc\xdc\xe2\x6e\xf9\x30\xc0\x14\x43\x2f\x8e\xf7\x23\x0d\x7c\x88\x5b\x47\xd4\xa9\x3c\x8b\xce\xff\x4d\x34\x70\x8b\xaf\x34\xf0\xff\x2d\x76\xe7\x68\x79\x1a\xa0\x59\xca\xf8\x2e\xe4\x98\x38\x5d\xa9\x3d\xa7\xd6\xfa\x8e\xa3\x4a\x2f\x5d\xd9\xe8\x42\x60\x6d\xe4\x94\x5a\xec\x96\x8f\x72\x0d\xf5\x84\x2e\x52\xeb\x19\x79\xfe\xb5\x90\x5d\xdc\x91\xb2\x3d\xb7\xe5\x58\xd9\xae\xd9\x9e\xc4\xad\xcf\x17\xb3\x6c\x63\x6b\x1d\x52\x20\x23\x7b\x4d\xc5\xad\xf8\x42\xf5\x2d\x73\x9c\xab\x12\xdb\x81\x53\x8b\xef\x17\xc8\x63\x99\x14\x0d\xbc\xf7\x7d\x58\xda\x2b\x5f\xef\x98\x2b\x36\x67\xb1\x2d\x0e\x87\xfd\xc7\x9b\x75\xf3\xdb\x56\xea\x22\x22\x17\xc1\x9d\xbe\xdd\x4e\xb1\x5b\x96\x73\xb1\xdd\xe0\x95\x7e\x33\xc7\x7f\x9a\x6f\xf0\x97\xfd\x33\xf0\xb1\x66\xae\x34\xd1\xa0\x2a\x35\xd8\x9d\x1d\xa0\xcb\x31\xb2\x57\x37\xe3\xc8\xf5\xc7\xa0\x27\xf6\x38\xce\xa0\x7a\xf8\xd7\x6c\x9d\x85\xdf\xb6\x70\xb3\xc4\x16\xb6\x9d\x2a\x8f\x93\xb6\xd8\x7b\x5d\x12\xa3\xf8\xac\x9c\x1e\x22\x75\x4f\x6c\x5b\x7c\x72\x81\x6a\xea\xc5\xfc\x09\x00\x00\xff\xff\xec\xf6\x6e\x9e\x43\x04\x00\x00")

func type_users_graphql() ([]byte, error) {
	return bindata_read(
		_type_users_graphql,
		"type/users.graphql",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"mutation.graphql": mutation_graphql,
	"query.graphql": query_graphql,
	"schema.graphql": schema_graphql,
	"type/admin.graphql": type_admin_graphql,
	"type/auth.graphql": type_auth_graphql,
	"type/company.graphql": type_company_graphql,
	"type/course.graphql": type_course_graphql,
	"type/delegate.graphql": type_delegate_graphql,
	"type/individual.graphql": type_individual_graphql,
	"type/lesson.graphql": type_lesson_graphql,
	"type/manager.graphql": type_manager_graphql,
	"type/module.graphql": type_module_graphql,
	"type/question.graphql": type_question_graphql,
	"type/test.graphql": type_test_graphql,
	"type/users.graphql": type_users_graphql,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"mutation.graphql": &_bintree_t{mutation_graphql, map[string]*_bintree_t{
	}},
	"query.graphql": &_bintree_t{query_graphql, map[string]*_bintree_t{
	}},
	"schema.graphql": &_bintree_t{schema_graphql, map[string]*_bintree_t{
	}},
	"type": &_bintree_t{nil, map[string]*_bintree_t{
		"admin.graphql": &_bintree_t{type_admin_graphql, map[string]*_bintree_t{
		}},
		"auth.graphql": &_bintree_t{type_auth_graphql, map[string]*_bintree_t{
		}},
		"company.graphql": &_bintree_t{type_company_graphql, map[string]*_bintree_t{
		}},
		"course.graphql": &_bintree_t{type_course_graphql, map[string]*_bintree_t{
		}},
		"delegate.graphql": &_bintree_t{type_delegate_graphql, map[string]*_bintree_t{
		}},
		"individual.graphql": &_bintree_t{type_individual_graphql, map[string]*_bintree_t{
		}},
		"lesson.graphql": &_bintree_t{type_lesson_graphql, map[string]*_bintree_t{
		}},
		"manager.graphql": &_bintree_t{type_manager_graphql, map[string]*_bintree_t{
		}},
		"module.graphql": &_bintree_t{type_module_graphql, map[string]*_bintree_t{
		}},
		"question.graphql": &_bintree_t{type_question_graphql, map[string]*_bintree_t{
		}},
		"test.graphql": &_bintree_t{type_test_graphql, map[string]*_bintree_t{
		}},
		"users.graphql": &_bintree_t{type_users_graphql, map[string]*_bintree_t{
		}},
	}},
}}
