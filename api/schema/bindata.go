package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _mutation_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x52\x41\x6e\xdb\x30\x10\xbc\xf3\x15\x6b\xf4\xd2\x5e\xf2\x00\xdf\x52\x07\x05\x02\xc4\x68\x11\x27\x0f\xd8\x8a\x1b\x9b\x28\xb5\x64\xc9\x65\x50\xa1\xf0\xdf\x03\x51\x12\x45\x49\xf1\x71\x67\x67\x46\xb3\x23\x7e\x81\x36\x09\x8a\x71\x1c\xa1\x41\x86\xd6\x69\xf3\xd6\x81\x5c\x08\xf4\xef\x3b\xa0\x7f\xd4\x24\x21\x0d\x91\xfe\x26\x62\x31\x68\x6d\x77\xa7\x94\x61\x9f\x04\x5e\xbd\x75\xa8\x7f\x18\x4b\x47\x12\x84\xff\x0a\xe0\xcd\x58\x7a\xe9\x3c\xed\xe1\x24\xc1\xf0\x79\xa7\x00\x1a\xc7\x42\x2c\x4f\xc4\x67\xb9\xec\xe1\x91\x65\xa7\xae\x4a\x49\xe7\xa9\xb2\x78\xa6\xe8\xb3\x45\x0a\xb6\x56\xc7\xd4\x34\x14\xe3\x8b\xfb\x43\x3c\xe3\xd7\x6d\x86\xd3\x40\xcc\x1e\x37\x45\xf9\xa3\xc7\xf1\xe4\x4c\x45\xdd\x1a\x7e\x72\x67\xc3\x5f\xb3\xe3\x1e\xee\x0b\xb2\xfb\xb6\x87\xfb\x24\x97\xec\xa3\x00\x5a\x64\x3c\x53\x58\xb0\x8f\x15\xb6\xe6\xa3\xd6\xe3\x7a\xf6\x9e\x90\xc7\x1e\xe8\x05\xe3\x3c\xdb\xff\x0a\xae\xaf\x71\xb8\xec\xb9\x2f\x3e\xca\xa4\x5f\x56\xde\xcb\x97\x0d\xde\x70\x19\xbb\xd9\xba\x8c\x8b\x65\x0e\x4d\x96\x84\x56\xc9\x1f\x6a\xb0\x84\xff\xee\x9c\x25\xe4\xdd\x70\x6c\x6e\xae\x3a\x35\xcf\x85\x9b\xa7\xfe\x07\x7b\x8d\x42\x0b\xee\xeb\x0c\x6d\xe8\x43\x9a\x05\xfd\x61\x86\x3e\x4b\xd2\x04\x42\xa1\x83\x6b\x3d\x72\x37\x69\x0e\x35\x58\x54\xe3\xbc\x16\x4d\xad\x2b\x80\xfe\xfd\x66\xec\x53\x8b\x4c\x18\x1b\xdf\xfe\xdd\xbc\x0d\xd4\xa0\x97\xe6\x82\xf5\xab\x5e\x55\xe7\x7d\x70\xef\x25\x71\x4a\x46\x17\xf2\x22\x64\xc4\x77\xfa\xc9\xd6\x30\x1d\x5c\x0a\x91\xa6\xe3\x4e\x2b\xbc\xdc\x57\x83\xa3\xfe\x60\x31\xc6\xe0\x5c\xbb\xb5\x58\xad\x8a\xcb\x10\x45\x5d\xd5\x47\x00\x00\x00\xff\xff\x80\xfb\x84\x05\x2f\x04\x00\x00")

func mutation_graphql() ([]byte, error) {
	return bindata_read(
		_mutation_graphql,
		"mutation.graphql",
	)
}

var _query_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x52\xcb\x6e\x14\x31\x10\xbc\xfb\x2b\x6a\x95\xcb\x22\x45\x7c\xc0\xdc\x08\x08\x69\x0f\x40\x10\xc9\x07\x78\x77\xda\xb3\x8d\xec\xf6\x60\xf7\x40\x56\x28\xff\x8e\xec\x99\x9d\x07\xd9\x9b\xed\xae\xea\xaa\xea\xf6\x1d\x7e\x0d\x94\x98\x32\xf2\x39\x0e\xbe\x85\x44\x45\x88\x2d\xbb\x0b\xf4\x4c\x68\x8f\xef\x41\x2f\x74\x1a\x94\x5a\xb0\xa0\xb7\x29\x59\xef\xc9\x1b\xbd\xf4\x84\x47\xdb\xd1\x41\x5c\xc4\x5f\x03\x68\x54\xeb\x1b\x1c\x44\x77\xb8\xc3\xd7\x21\x1c\x29\x21\x3a\xf4\xb6\xa3\x0c\xeb\x94\x12\xf4\xcc\x19\x51\xc8\x00\xd1\xb9\x4c\x3a\xe3\x9f\xce\x34\x3d\x15\x4e\xc5\x15\x22\x5c\x8a\xa1\x5a\xc9\x6a\x93\x1a\xc0\x73\xe0\x2d\x2d\xd8\x97\x62\xff\x8f\xa0\xa7\x54\x59\x06\xe8\xf8\x37\xc9\x0d\x37\xac\x14\xf2\x58\x35\xaf\xc6\xb0\xf4\x83\xd6\x1c\x35\xc3\xca\xd4\x46\x6a\x81\x7e\xb1\x62\x3b\x4a\x9f\xd9\x97\x3c\x85\x23\x36\x50\x83\x1f\x9a\x58\x3a\x03\x50\xb0\xec\x57\xf7\x9f\xf1\xf8\xc4\xea\xd7\x90\x61\xe0\x76\x75\x55\xf2\xd4\x9f\xa3\x2c\x90\x59\xed\x63\x0c\xbd\x95\xcb\x4a\xed\x3f\xee\x46\xbc\xd2\x94\x92\xb3\xa7\xba\x1b\x16\xab\xd4\x7e\x1f\x28\x5d\x2a\xb7\x9f\xd6\xd5\xcc\x8b\x5b\x94\xbe\xa5\x96\xd2\xc3\x88\xb3\xf9\x44\xd2\xb2\x74\x0d\x1e\x62\xf4\x64\xc5\x00\x8e\xc9\xcf\xca\xbb\x42\xac\x5f\x60\xe9\xce\xb5\xf3\xb5\x0e\xd8\x36\xb0\xec\x47\xbf\xcf\xcf\x87\x4f\xbb\x77\x0d\x3e\x94\xb7\x6b\x2d\xef\x8b\xa1\xd1\xcc\xb5\x56\xce\x85\x1c\xc6\x31\xef\xd7\x71\x4b\x83\x69\xfc\x0b\x62\xdd\xe4\x1e\xae\x0e\xaa\xd9\x6e\xe9\x1e\x71\x0c\xd7\x5c\x53\x2e\x8d\x1e\xc7\xdf\x72\x1a\xe7\xfc\x46\x6e\x9a\xff\x8c\x60\xba\xad\xb7\xd9\xd3\x4d\xbd\x09\x51\xf5\x5e\xcd\xbf\x00\x00\x00\xff\xff\xaf\x14\x1d\x32\x78\x03\x00\x00")

func query_graphql() ([]byte, error) {
	return bindata_read(
		_query_graphql,
		"query.graphql",
	)
}

var _schema_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x4e\x4e\xcc\x49\x2c\x52\x08\x0d\xf5\x74\xe1\xe2\x2a\x4e\xce\x48\xcd\x4d\x54\xa8\xe6\x52\x50\x28\x2c\x4d\x2d\xaa\xb4\x52\x08\x04\x51\x5c\x0a\x0a\xb9\xa5\x25\x89\x25\x99\xf9\x79\x56\x0a\xbe\x50\x16\x57\x2d\x17\x20\x00\x00\xff\xff\x7d\xb7\x88\x41\x3c\x00\x00\x00")

func schema_graphql() ([]byte, error) {
	return bindata_read(
		_schema_graphql,
		"schema.graphql",
	)
}

var _type_admin_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x8f\xcd\xaa\xc3\x20\x10\x85\xf7\x3e\xc5\xdc\xd7\xc8\xee\xc2\x85\x4b\xa0\x94\x94\xd2\x55\xe9\x62\xc0\x89\x0c\xa8\x11\x1d\x29\xa1\xe4\xdd\x4b\xa4\x34\x21\x09\xfd\xd9\xe9\xe1\xf3\x7c\x1e\xe9\x03\xc1\xaf\x76\xec\xe1\xa6\x00\x72\x66\x5d\xc1\x51\x22\x7b\xf3\xa3\x00\xc8\x21\xdb\x79\xd0\x72\x4c\xb2\x47\x47\xf3\xd0\xe2\x32\x1b\x94\x9a\x9a\x1b\x34\x04\xec\x82\x25\x47\x5e\x12\x34\x68\xd8\xa3\x90\x3e\x64\x8a\x7d\xf1\x92\x36\x94\x2a\x38\x17\xfe\xa2\x00\x02\x1a\xaa\x7d\xdb\x55\x23\x5d\x4e\x63\x27\xfb\x90\x05\xfe\x49\x0a\x57\x97\xdb\xfa\xdb\x4f\xb0\x50\xbb\xce\x3c\xc6\xad\xc6\x04\x4c\xe9\xda\xc5\xed\xa7\x7a\xe1\xf8\x70\xf9\x77\x9a\x53\xd0\x28\xf4\x72\xcd\x86\x79\x43\xbc\xf4\x4e\x8a\x3f\xb2\xf4\x46\x31\xa8\x7b\x00\x00\x00\xff\xff\xed\xbe\x06\x0d\x07\x02\x00\x00")

func type_admin_graphql() ([]byte, error) {
	return bindata_read(
		_type_admin_graphql,
		"type/admin.graphql",
	)
}

var _type_auth_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\xa9\x2c\x48\x55\x70\x2c\x2d\xc9\x08\xc9\xcf\x4e\xcd\x53\xa8\xe6\x52\x50\x28\x01\xb1\xac\x14\x82\x4b\x8a\x32\xf3\xd2\x15\xb9\x6a\xb9\x00\x01\x00\x00\xff\xff\xa3\x33\x16\xdc\x24\x00\x00\x00")

func type_auth_graphql() ([]byte, error) {
	return bindata_read(
		_type_auth_graphql,
		"type/auth.graphql",
	)
}

var _type_company_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x50\xbb\x6a\x03\x31\x10\xec\xf5\x15\xe3\x2e\x01\x37\x49\xa9\xce\x3e\x08\x18\xf2\x24\x65\x48\xb1\x44\x6b\x21\xb8\x5b\x09\x49\x17\x38\x4c\xfe\x3d\x48\x3a\x07\x25\xe9\xdd\x8d\x46\xb3\xbb\x33\x93\x97\xc0\x18\xfc\x14\x48\x16\x9c\x14\x40\x21\x44\xff\xc9\x46\x63\xef\xfd\xc8\x24\x0a\x98\x67\x67\x34\x5e\x73\x74\x62\x37\x0a\xf8\x88\x4c\x99\xcd\x2e\x9f\x49\x05\x08\x4d\xdc\x6b\x26\x12\xb2\x1c\xd3\x55\x20\xcb\x1a\xcf\x64\x79\x8b\xa3\x1b\x33\x47\x8d\x87\xf6\x79\x57\x9f\x5b\xf8\x68\x38\xee\x17\x8d\xa7\x06\xae\x7f\x14\x65\xac\x6c\x23\x63\x22\xa7\xa4\xb1\x6b\x60\xa3\xbe\x94\xaa\xde\x57\xa2\x79\x6f\xf8\xde\x09\xdf\xf4\x5e\x3a\xfe\xf6\x57\x0e\x3f\x4b\x5e\x7a\x26\xf8\x94\x07\x6f\xf8\x9f\x2a\x76\xb2\xf3\xe9\xb5\xb6\xe2\x11\x6e\x0a\x23\x4f\x2c\x39\x95\xa8\x4e\x4a\x3f\x2f\x33\xc7\x56\x2a\x1b\xcb\x49\xe3\x6d\x9d\x78\x2f\x97\xc8\xf2\x41\x8e\xbe\x55\x53\x50\xd9\xeb\x24\xcc\x19\x43\xed\x77\x15\x1f\x2a\x75\xaa\x46\x2a\xf1\xf8\xa7\xe9\x8b\xa5\xfe\x0e\x00\x00\xff\xff\x87\xf2\x57\xad\x2c\x02\x00\x00")

func type_company_graphql() ([]byte, error) {
	return bindata_read(
		_type_company_graphql,
		"type/company.graphql",
	)
}

var _type_course_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x55\x51\x6f\xea\x36\x14\x7e\xf7\xaf\x38\x90\x87\x6d\xd2\x45\xd3\x2d\x50\x6d\x79\xbb\x63\x4c\x63\xe2\x96\xae\x80\x54\x09\xf5\xc1\x33\x27\xd4\x22\xb1\x33\xdb\xe9\x8a\xaa\xfe\xf7\xc9\xc7\x09\x31\x29\xf4\xa1\xda\xcb\xae\x82\x70\x12\x7f\xdf\xf1\x39\x9f\xbf\xf8\xa0\xaa\x0a\xf8\x22\x04\x5a\xbb\x3a\x94\x08\x2f\x0c\xc0\xa0\x75\x46\x0a\x87\x5b\x06\xa0\x4b\x54\xec\x95\x31\x02\x2e\x9d\xa9\x84\xab\x0c\x4e\x73\x2c\x50\x39\x82\x17\x7a\x5b\xe5\xc8\x00\x1c\x5a\xc7\x00\x72\xb4\x56\xb7\x9c\xaf\x34\x1d\x13\xde\xe0\x9c\x5f\x79\xa2\x2b\x63\x71\xa6\x32\x4d\x20\xc5\x0b\x4c\xfd\x82\x52\xed\x8e\x98\x85\xca\xa5\xc2\x80\x24\x54\x55\xc9\x6d\x0a\xeb\xf5\xec\xd7\x1e\x03\x90\x2a\xd3\x69\x14\xa8\xd7\x06\xcf\xb9\xb5\x46\xeb\xe2\x2c\xf7\x0c\xd5\x33\x13\x90\xca\xa1\xc9\xb8\x68\xb3\x2b\x2b\x5f\x43\x02\x0d\x3d\x24\x08\x09\xcc\x32\x50\xda\xc1\x4e\x3e\xa1\x02\x61\x90\x3b\x04\x0e\x0a\xff\x01\x41\x54\xe2\xc4\x45\x41\x02\x2b\xe9\x72\xfc\xf1\x86\x17\x08\x3a\x03\xf7\x88\x31\x56\x70\x87\x3b\x6d\x0e\x3e\xc1\x88\xe3\x1f\x8f\xe8\x1a\x42\x78\x7c\x16\x68\x4a\x17\x41\xff\x5c\xcf\xe6\x73\xf8\x63\xb9\xb8\x81\x4c\x1b\x62\xd4\x20\x22\x48\xe5\x8c\xde\x56\xc2\x49\xad\xde\x67\xc5\x48\xa2\xfe\xc5\xc5\x7e\x67\x74\xa5\xb6\x93\x47\x14\xfb\x14\x7e\xd1\x3a\x47\xae\x82\x0e\x3c\x9a\x07\xe1\x01\x20\x2d\x18\xfc\xbb\x92\x06\xb7\x14\x80\x1f\x1d\x97\xc6\xee\x4b\x22\xef\x81\x36\xc1\x7c\x1e\x5f\x1a\x29\x30\x85\xdf\x72\xcd\x1d\x24\x30\xd1\xd6\x9d\x93\x4c\xe7\xda\x44\xa5\xfc\x3e\xbd\x0f\xef\x68\xd6\xf1\x9d\x4d\x61\x13\x66\x1f\x20\x81\xb9\xac\xa3\xf0\x1d\xed\xe6\x77\x96\x70\xb6\x44\x21\x33\x29\x56\x68\x0a\x7b\x59\x98\x06\x06\xce\xe3\x6a\x59\x94\x42\x33\x2b\xf8\x0e\x97\x15\x55\x15\xd1\x89\xb8\x2e\x73\xcd\xb7\x50\xcf\xc2\x4a\xef\xa9\xc0\x57\xc6\x24\x59\x6b\xc9\x9f\xb0\xe3\xd5\xc6\x73\x1d\xc3\x9e\x7c\x1f\x5d\xb7\xd4\x98\x8e\x25\xd8\xf9\x3d\x67\x97\xf7\x93\x5d\xda\x29\x76\xba\x25\xac\xa3\x3d\xeb\xaa\xcd\x2e\xc8\xca\xde\x13\xcd\x47\xa9\x9c\x36\x6d\x4d\x1d\xff\xaf\xfc\x2c\x7c\x2f\x1a\xc1\x6a\x2f\x80\x56\xf9\xe1\x07\x7f\x32\xf1\xe7\x5b\x6e\x9c\x14\xb2\xe4\xca\xd9\x14\x66\xca\xb1\x13\xad\xe3\x03\xe5\x5b\x10\xba\xf7\x61\xa5\x6d\x73\xb4\xa7\xb0\xa9\xf5\x70\x58\xf4\xfc\x77\xb2\x50\xf9\x81\x2c\xaf\x49\xad\x5a\x65\xdb\x2a\xd9\xe2\xc3\xf9\x4e\x35\x74\x7b\x45\xef\xed\x71\xed\xd0\xe7\xb7\x09\x1d\x22\x2c\xd7\x6b\xa3\xb6\xaf\xa3\xa8\x27\xdd\xa4\x1b\x92\xce\xec\x0d\x4c\xef\xbf\x7c\xbd\x9d\x4f\x61\xb2\x58\xdf\x2d\xa7\xb0\x5c\xdd\xad\x27\xab\xf5\xdd\x94\xbe\xd1\x97\x10\xa7\x1f\xba\x56\xff\x53\x1d\xa0\x3f\x1c\x0d\x47\xc3\x41\xfc\x3f\xa2\xa1\xff\xfa\x29\xf0\xa0\x43\xa4\xb7\xcd\xfa\xfd\xcf\x57\x43\xff\x1b\xd4\xe3\x55\x7d\x43\xc3\xf0\x08\x6e\x2a\xae\x1f\xdb\x6c\x42\x2f\x6c\xb3\xf9\x7c\x45\xd7\x20\x0c\x3e\xda\xf1\xa9\x49\x28\xa6\xfb\x8e\xda\x92\x7f\xfa\x39\x5c\x83\xf1\x35\x5d\x83\xf1\xf5\xf1\x66\x7c\x3d\x6e\x03\x3c\xd0\xf8\x9f\x14\x08\x09\xc8\xcc\x1f\xf3\x0e\x8b\x32\xf7\xcd\xaf\xe0\x7b\xdf\x01\x85\x2e\x0f\xff\x87\xea\x2f\xa4\x32\x24\x13\x8c\x82\x25\xfc\xcd\x78\x3c\xa2\x6b\x40\xff\xfd\x0e\xfd\x03\xa9\x3c\xb0\x7f\x03\x00\x00\xff\xff\xf4\x77\x8c\x59\x84\x09\x00\x00")

func type_course_graphql() ([]byte, error) {
	return bindata_read(
		_type_course_graphql,
		"type/course.graphql",
	)
}

var _type_users_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x92\x4f\x8f\xd3\x30\x10\xc5\xef\xf9\x14\xb3\xea\x65\x91\xf8\x04\xb9\xad\xb6\x5a\x29\x12\xa0\x45\xd0\x13\xe2\x60\x92\x67\xef\x20\xff\x89\xec\x89\x56\x15\xea\x77\x47\x76\x92\x12\xea\x16\xc4\x91\x9b\xf3\x32\x6f\x66\xde\xcf\x66\x2f\x88\x5a\xf5\xa0\x43\x42\xa4\x1f\x0d\xd1\x34\xf1\xd0\xd2\x27\x89\xec\xcd\x5d\x43\xd4\x47\x28\xc1\xf0\x20\xab\xd8\x10\xc1\x29\xb6\xdb\x22\xcd\x31\xc9\x07\xe5\xb0\x15\xad\xaa\x35\x81\xc5\xf8\x12\x7c\x55\xf8\x2e\x18\xf6\x5b\xf1\x7b\xf8\xf6\x99\xc5\x6e\x0a\x4f\x4d\xc3\x7e\x9c\x84\xde\x2b\xaf\x0c\x62\xb1\x94\x9d\xab\x7d\x46\x95\xd2\x6b\x88\xc3\x15\xf3\xc3\x30\x2c\xfe\xae\x7c\x67\x7f\x1f\xdc\xa8\xfc\xf1\x70\xe8\xf6\xab\x83\x76\xf4\x14\x22\xa9\xc1\xb1\x4f\xf4\xfa\x02\x3f\x93\xc8\xbf\xdc\xec\x4f\x14\x34\x0d\xac\x35\x22\xbc\x2c\x4d\x18\xe9\x5f\x78\x54\x9b\xd7\xb1\x6f\x40\xfb\x43\xc4\x3d\x2c\x04\x55\xca\xdf\x6f\xf6\xd4\x34\x72\x1c\xb1\xc2\x24\x76\xa3\x85\x83\x97\xf4\x3f\xbc\x85\xf3\x9d\xb5\xf4\x38\x1f\x0a\x93\x18\x34\x5b\x74\x4e\x19\x1c\xe2\x79\xab\xcb\xac\xcf\xca\x60\x9b\xf7\x59\x19\xf6\x39\xd8\xc7\x09\xf1\x38\xbf\xa8\xc1\x20\xb5\xf4\x65\x71\x7c\x2d\xc0\x0d\x3a\xaf\x43\x9b\xeb\xcb\x29\xf7\xdd\x51\xe9\x9c\x91\x1b\x25\xb8\x82\x71\x47\x2b\xc8\xfc\xbe\xee\xca\xf7\x05\xb4\x2c\x5d\xc1\x96\xe5\x1a\x5c\x56\xaf\xa0\x5b\x8b\x17\x78\x7b\x25\x28\x5a\xcd\x2e\xab\x7d\x98\x62\x42\xba\x0f\x5a\x27\x48\x4b\x9d\x97\xb7\x64\xd9\xf1\x7a\xd6\x6c\x05\xb1\x3d\x07\x7b\x2c\x86\xa7\xa2\xbe\xc9\xd0\x8b\x7f\xed\xe5\x65\x11\xee\xff\xe2\xeb\xbc\xcc\x1e\x44\x61\xcd\xbd\x92\xdb\x4b\xe4\x31\x9b\xb2\xcd\xac\xad\xb9\x1a\xf8\xeb\xe7\xc5\xd4\x53\xf3\x33\x00\x00\xff\xff\xdd\xd6\xb4\x69\xef\x04\x00\x00")

func type_users_graphql() ([]byte, error) {
	return bindata_read(
		_type_users_graphql,
		"type/users.graphql",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"mutation.graphql": mutation_graphql,
	"query.graphql": query_graphql,
	"schema.graphql": schema_graphql,
	"type/admin.graphql": type_admin_graphql,
	"type/auth.graphql": type_auth_graphql,
	"type/company.graphql": type_company_graphql,
	"type/course.graphql": type_course_graphql,
	"type/users.graphql": type_users_graphql,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"mutation.graphql": &_bintree_t{mutation_graphql, map[string]*_bintree_t{
	}},
	"query.graphql": &_bintree_t{query_graphql, map[string]*_bintree_t{
	}},
	"schema.graphql": &_bintree_t{schema_graphql, map[string]*_bintree_t{
	}},
	"type": &_bintree_t{nil, map[string]*_bintree_t{
		"admin.graphql": &_bintree_t{type_admin_graphql, map[string]*_bintree_t{
		}},
		"auth.graphql": &_bintree_t{type_auth_graphql, map[string]*_bintree_t{
		}},
		"company.graphql": &_bintree_t{type_company_graphql, map[string]*_bintree_t{
		}},
		"course.graphql": &_bintree_t{type_course_graphql, map[string]*_bintree_t{
		}},
		"users.graphql": &_bintree_t{type_users_graphql, map[string]*_bintree_t{
		}},
	}},
}}
