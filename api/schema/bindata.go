package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _mutation_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xcb\x31\x0e\x82\x40\x10\x85\xe1\x7e\x4f\xf1\x8c\x8d\x36\x1c\x80\x8e\x5e\x3a\x2f\x30\xb2\x4f\x98\xc8\xce\xa2\xcc\x26\x6e\x8c\x77\xb7\x31\x46\xda\x3f\xdf\xbf\x47\x2a\x2e\xae\xd9\x56\x0c\x62\x48\x39\xea\xb5\xc2\x27\x22\x5e\x1a\xf0\xc9\xa1\x38\x23\x56\xde\x0b\xcd\x55\xe6\xb9\x36\xc1\xeb\x42\xf4\xdf\x11\xaf\x00\x48\x4c\x6a\xa7\x3c\xaa\x1d\xd4\x96\xe2\x2d\xba\x5f\xd9\x1d\x5b\x74\xc5\xa7\x73\xbe\xd1\x02\x90\xc4\x64\xe4\x63\xa3\xfb\xbf\xb6\xf5\xef\xf0\x09\x00\x00\xff\xff\xc0\xcb\x8e\x94\xa4\x00\x00\x00")

func mutation_graphql() ([]byte, error) {
	return bindata_read(
		_mutation_graphql,
		"mutation.graphql",
	)
}

var _query_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x90\xc1\x4e\x33\x31\x0c\x84\xef\x79\x8a\xa9\x7a\xe9\x2f\xfd\xea\x03\xf4\x56\x71\xea\x01\x04\x82\x17\x48\x1b\x67\xd7\xd2\xc6\x59\x12\x07\xba\x42\x7d\x77\x94\x94\x5d\x5a\xae\x9e\x6f\x6c\xcf\xac\xf1\x5e\x28\x31\x65\xe4\x3e\x96\xc1\x41\xa2\x22\x44\xc7\x7e\x82\xf6\x04\x77\xdc\x82\xce\x74\x2a\x4a\x0e\x99\x43\x19\xd4\x0a\xc5\x92\x87\x69\x6b\x74\x1a\x09\xcf\xb6\xa3\x83\xf8\x88\x2f\x03\x8c\xb6\xa3\xbc\xf7\x4a\x69\x87\x83\xe8\x0a\x6b\x3c\x95\x70\xa4\x84\xe8\xaf\x22\x6c\x55\xa1\x3d\x67\x44\x21\x03\x44\xef\x33\xe9\xc2\xbf\xf5\xf4\x33\xaa\x9e\xc6\x55\x23\x7c\x8a\xa1\xbd\x94\xd5\x26\x35\xc0\xc0\x81\xef\x6d\xc1\x9e\x6b\x8c\x4f\xc1\x48\xa9\xb9\x0c\xd0\xf1\x07\xc9\x1d\x26\xcb\x47\xac\x14\x32\x12\x69\x49\x42\x0e\x2c\xed\x40\x6d\x64\x32\x17\x63\x58\x94\x92\xb7\xa7\x16\x92\xc5\x2a\xb9\x97\xaa\x2d\x51\x6b\xee\xdd\xd2\x40\xb5\xb4\x4a\x7e\x21\x6e\xc0\xab\x26\x96\x6e\x65\x00\xeb\x02\xcb\xa6\x14\x76\xf3\xf4\xdf\x0e\xfb\x3a\x9c\xc5\xbc\xb9\xe9\xe3\xff\x4d\xc8\x19\xac\xd7\xea\xaa\x35\x82\x15\xdb\x51\xfa\xbb\xee\x21\x86\xd1\xca\xf4\x78\x55\xcd\xc5\x7c\x07\x00\x00\xff\xff\x8a\x5d\xc1\x52\xe4\x01\x00\x00")

func query_graphql() ([]byte, error) {
	return bindata_read(
		_query_graphql,
		"query.graphql",
	)
}

var _schema_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x4e\xce\x48\xcd\x4d\x54\xa8\xe6\x52\x50\x28\x2c\x4d\x2d\xaa\xb4\x52\x08\x04\x51\x5c\x0a\x0a\xb9\xa5\x25\x89\x25\x99\xf9\x79\x56\x0a\xbe\x50\x16\x57\x2d\x17\x20\x00\x00\xff\xff\x1f\x5d\x4a\xc1\x2f\x00\x00\x00")

func schema_graphql() ([]byte, error) {
	return bindata_read(
		_schema_graphql,
		"schema.graphql",
	)
}

var _type_admin_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8f\x4d\x0a\xc2\x30\x10\x85\xf7\x39\xc5\xf3\x1a\xdd\xb9\x92\x82\x48\xc5\xa5\xb8\x18\xc8\x34\x0c\x34\x3f\x24\x13\xa4\x88\x77\x97\x06\xd1\x6a\x77\xc9\xc7\x37\x6f\xe6\xe9\x9c\x18\x7b\xeb\x25\xe0\x61\x80\x5a\xc5\x76\xb8\x68\x96\xe0\x76\x06\x60\x4f\x32\xad\xc1\x28\xb9\xe8\x89\x3c\xaf\xe1\x44\xff\xec\x69\xcc\x37\x79\x20\xc7\x10\x9f\x26\xf6\x1c\xb4\x60\x20\x27\x81\x94\xed\xb9\x72\x9e\xdb\x5e\xb6\x8e\x4b\x87\x6b\xf3\x6f\x06\x48\xe4\xb8\x0f\x63\xec\x16\xbb\xbd\x96\x4c\x09\xa9\x2a\x0e\xac\xcd\xeb\xdb\x6f\x7b\xf6\x47\x6c\xd6\x31\xba\x77\xb9\x4d\x99\x44\xa5\xdc\x63\xfe\x19\x7d\x05\x00\x00\xff\xff\x16\x90\x7b\x4e\x11\x01\x00\x00")

func type_admin_graphql() ([]byte, error) {
	return bindata_read(
		_type_admin_graphql,
		"type/admin.graphql",
	)
}

var _type_auth_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\xa9\x2c\x48\x55\x70\x2c\x2d\xc9\x08\xc9\xcf\x4e\xcd\x53\xa8\xe6\x52\x50\x28\x01\xb1\xac\x14\x82\x4b\x8a\x32\xf3\xd2\x15\xb9\x6a\xb9\x00\x01\x00\x00\xff\xff\xa3\x33\x16\xdc\x24\x00\x00\x00")

func type_auth_graphql() ([]byte, error) {
	return bindata_read(
		_type_auth_graphql,
		"type/auth.graphql",
	)
}

var _type_users_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x8f\x41\x4e\xc3\x30\x10\x45\xf7\x39\xc5\x54\xdd\x14\x89\x13\x64\xdb\x0a\xa9\x12\xb0\x81\x1e\x60\x48\xc7\x61\x90\x3d\xb6\xec\x89\x50\x85\x7a\x77\x14\x37\x01\x53\x07\xb1\x65\x17\xbf\xfc\xef\xff\xcc\xa2\x14\x0d\x76\x04\x87\x44\x11\x3e\x1a\x80\x61\xe0\x63\x0b\x4f\x1a\x59\xfa\x55\x03\x40\x0e\xd9\x96\xc0\x70\x4c\xfa\x88\x8e\x4a\x68\xb1\x66\x4a\x96\xc2\xab\x97\x2a\x78\xef\x7b\x96\x12\xbe\xf9\x97\x67\x56\x5b\x04\xcf\x4d\xc3\x12\x06\x85\x07\x14\xec\x29\xe6\x4a\xf6\xab\x7c\x02\xa6\xf4\xee\xe3\xf1\x47\x59\x4f\x81\x60\xeb\x5d\x40\x39\x4d\x57\x00\xbb\x60\xc9\x91\x68\xfa\x87\xaf\x5d\x43\x56\xde\x91\xa5\x1e\x95\x16\x64\xd7\x30\xeb\x1e\x0e\xfb\xdd\x2a\x9f\xaf\x74\x47\xb4\x20\x3c\xe2\x5a\x79\xa4\x0b\xd2\x73\x78\xd2\xde\xa1\x52\x66\xb5\xf5\x48\x3b\x3f\xc4\x44\x69\xe3\x8d\x49\xa4\x2d\xec\x45\x6f\xc1\xb2\xe3\xf9\xdb\xb0\x55\x8a\xed\xd7\xc3\xb6\xb9\x70\x97\xe9\x4d\x0b\x97\x63\x9a\xef\x12\x9d\xc0\xe6\x8f\xde\x5e\xf4\xd2\xa1\xa8\x6c\xb8\x43\xfd\x5d\x62\x9c\x29\x62\xc5\x56\x59\xae\x06\xbf\x7f\x5e\xad\x9e\x9b\xcf\x00\x00\x00\xff\xff\xaa\xd1\x3e\x18\x37\x03\x00\x00")

func type_users_graphql() ([]byte, error) {
	return bindata_read(
		_type_users_graphql,
		"type/users.graphql",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"mutation.graphql": mutation_graphql,
	"query.graphql": query_graphql,
	"schema.graphql": schema_graphql,
	"type/admin.graphql": type_admin_graphql,
	"type/auth.graphql": type_auth_graphql,
	"type/users.graphql": type_users_graphql,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"mutation.graphql": &_bintree_t{mutation_graphql, map[string]*_bintree_t{
	}},
	"query.graphql": &_bintree_t{query_graphql, map[string]*_bintree_t{
	}},
	"schema.graphql": &_bintree_t{schema_graphql, map[string]*_bintree_t{
	}},
	"type": &_bintree_t{nil, map[string]*_bintree_t{
		"admin.graphql": &_bintree_t{type_admin_graphql, map[string]*_bintree_t{
		}},
		"auth.graphql": &_bintree_t{type_auth_graphql, map[string]*_bintree_t{
		}},
		"users.graphql": &_bintree_t{type_users_graphql, map[string]*_bintree_t{
		}},
	}},
}}
