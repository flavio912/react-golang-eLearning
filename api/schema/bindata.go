package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _mutation_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\xcc\x4d\x0e\x82\x40\x0c\x05\xe0\xfd\x9c\xe2\x19\x37\xba\xe1\x00\xec\x58\x9a\xc8\xce\x0b\x54\x5a\xa1\x91\xe9\xa0\x74\x12\x89\xf1\xee\x86\x04\x7f\x97\xfd\xfa\xde\x5b\x23\x66\x27\xd7\x64\x23\x1a\x32\xc4\xc4\x7a\x9a\xe0\x9d\x80\x8f\x05\xe4\x26\x4d\x76\x61\x8c\x72\xc9\x62\xae\xd4\xf7\x53\x11\x7c\x1a\x04\xf5\x52\xc4\x3d\x00\xc4\x51\x6d\x9f\x5a\xb5\x8d\xda\x90\xbd\x44\xf5\x96\xd5\xb6\x44\x95\xbd\x3b\xa4\xb3\x58\x00\x22\x19\xb5\x72\xfd\x49\xd7\x5f\xf6\x9f\x27\xe6\xe5\xfd\xd9\x7e\xc9\x6e\x86\xb9\xb0\xdc\xe1\x11\x9e\x01\x00\x00\xff\xff\x34\xca\x29\x9c\xd3\x00\x00\x00")

func mutation_graphql() ([]byte, error) {
	return bindata_read(
		_mutation_graphql,
		"mutation.graphql",
	)
}

var _query_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x91\x4d\x8e\xdb\x30\x0c\x85\xf7\x3a\xc5\x0b\xb2\x49\x81\xa2\x07\xf0\xae\x9b\x02\x59\xb4\x68\xd1\x5c\x80\x89\x29\x9b\x85\x7e\x5c\x89\x9a\x49\x30\xc8\xdd\x07\x92\x93\xd8\xc1\xcc\x4e\x12\xbf\xf7\x48\x3e\x6d\xf1\xbf\x70\x12\xce\xc8\x63\x2c\xae\x47\x88\x0a\x1f\x7b\xb1\x17\xe8\xc8\xe8\x8f\xdf\xc0\x67\x3e\x15\xe5\x1e\x12\x30\x51\x4a\xe4\x1c\x3b\xa3\x97\x89\xf1\x9b\x06\xde\x07\x1b\xf1\x66\x00\x8d\x4a\xae\xc3\x3e\xe8\x06\x5b\xfc\x2a\xfe\xc8\x09\xd1\x62\xa2\x81\x33\xc8\x2a\x27\xe8\x28\x19\x31\xb0\x01\xa2\xb5\x99\xf5\xc1\x1f\x46\xbe\x3d\x55\x4d\xe3\xaa\x10\x36\x45\xdf\x46\xc9\x4a\x49\x0d\xe0\xc4\xcb\xb3\xcc\xd3\xb9\x8e\xff\x1a\x30\x71\x6a\x2a\x03\x0c\xf2\xc2\xe1\x93\x69\x44\xd9\xe7\xb9\x6a\xae\xc6\x48\x98\x8a\xb6\x3d\xda\x0e\xab\xa1\x9e\x5a\x2d\xe8\x4f\x0a\x34\x70\xfa\x21\xae\xee\x53\x35\x81\x3c\x77\xf8\xab\x49\xc2\x60\x00\xf6\x24\x6e\x75\xff\x17\x8f\x07\x51\xb7\x46\x4a\x91\x7e\x75\x55\x76\x3c\x8d\x31\x2c\x48\xeb\xa6\x9c\x2c\x9d\x5a\xc8\x12\x48\xb9\xff\x53\x38\x5d\x5a\xcb\xe9\x96\x7b\xf7\xf8\x81\x2a\x69\x5f\xb2\x40\xd2\x80\xd9\x71\x63\x00\xea\xbd\x84\xdd\xba\xf7\xe6\x4b\x87\xef\xf5\xf5\x5e\xcd\xbb\xea\x3c\xbb\xde\x6b\xf5\x5c\xe5\x7e\x5e\xfc\x83\xc1\x2d\x90\x85\x58\x9b\x7c\x85\x6d\x41\x75\xcf\xb9\x2d\xb2\x0a\x99\xab\x79\x0f\x00\x00\xff\xff\x29\xd3\x3d\x8d\x88\x02\x00\x00")

func query_graphql() ([]byte, error) {
	return bindata_read(
		_query_graphql,
		"query.graphql",
	)
}

var _schema_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x4e\xce\x48\xcd\x4d\x54\xa8\xe6\x52\x50\x28\x2c\x4d\x2d\xaa\xb4\x52\x08\x04\x51\x5c\x0a\x0a\xb9\xa5\x25\x89\x25\x99\xf9\x79\x56\x0a\xbe\x50\x16\x57\x2d\x17\x20\x00\x00\xff\xff\x1f\x5d\x4a\xc1\x2f\x00\x00\x00")

func schema_graphql() ([]byte, error) {
	return bindata_read(
		_schema_graphql,
		"schema.graphql",
	)
}

var _type_admin_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8f\x4d\x0a\xc2\x30\x10\x85\xf7\x39\xc5\xf3\x1a\xdd\xb9\x92\x82\x48\xc5\xa5\xb8\x18\xc8\x34\x0c\x34\x3f\x24\x13\xa4\x88\x77\x97\x06\xd1\x6a\x77\xc9\xc7\x37\x6f\xe6\xe9\x9c\x18\x7b\xeb\x25\xe0\x61\x80\x5a\xc5\x76\xb8\x68\x96\xe0\x76\x06\x60\x4f\x32\xad\xc1\x28\xb9\xe8\x89\x3c\xaf\xe1\x44\xff\xec\x69\xcc\x37\x79\x20\xc7\x10\x9f\x26\xf6\x1c\xb4\x60\x20\x27\x81\x94\xed\xb9\x72\x9e\xdb\x5e\xb6\x8e\x4b\x87\x6b\xf3\x6f\x06\x48\xe4\xb8\x0f\x63\xec\x16\xbb\xbd\x96\x4c\x09\xa9\x2a\x0e\xac\xcd\xeb\xdb\x6f\x7b\xf6\x47\x6c\xd6\x31\xba\x77\xb9\x4d\x99\x44\xa5\xdc\x63\xfe\x19\x7d\x05\x00\x00\xff\xff\x16\x90\x7b\x4e\x11\x01\x00\x00")

func type_admin_graphql() ([]byte, error) {
	return bindata_read(
		_type_admin_graphql,
		"type/admin.graphql",
	)
}

var _type_auth_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\xa9\x2c\x48\x55\x70\x2c\x2d\xc9\x08\xc9\xcf\x4e\xcd\x53\xa8\xe6\x52\x50\x28\x01\xb1\xac\x14\x82\x4b\x8a\x32\xf3\xd2\x15\xb9\x6a\xb9\x00\x01\x00\x00\xff\xff\xa3\x33\x16\xdc\x24\x00\x00\x00")

func type_auth_graphql() ([]byte, error) {
	return bindata_read(
		_type_auth_graphql,
		"type/auth.graphql",
	)
}

var _type_company_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\xa9\x2c\x48\x55\x70\xce\xcf\x2d\x48\xcc\xab\x54\xa8\xe6\x52\x50\x28\x2d\xcd\x4c\xb1\x52\x08\x2e\x29\xca\xcc\x4b\xe7\x52\x50\xc8\x4b\xcc\x4d\x85\x73\x6b\xb9\x00\x01\x00\x00\xff\xff\xf2\x13\xf6\x15\x2f\x00\x00\x00")

func type_company_graphql() ([]byte, error) {
	return bindata_read(
		_type_company_graphql,
		"type/company.graphql",
	)
}

var _type_users_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x91\xc1\x6a\xfb\x30\x0c\xc6\xef\x79\x0a\x95\x5e\xfa\x87\xff\x13\xe4\x36\x56\x06\x81\x6d\x74\x6c\x3d\x8d\x1d\xb4\x46\xf6\x34\x1c\x3b\xd8\x0a\xa3\x94\xbe\xfb\xb0\x9b\x6c\xa6\x4e\x19\xbb\xed\x66\xfd\xa2\x4f\xfa\xf4\x85\xad\x90\x57\xb8\x23\xd8\x06\xf2\x70\xa8\x00\x86\x81\xdb\x1a\x1e\xc5\xb3\xd5\x8b\x0a\x80\x3a\x64\x93\x03\xc5\x3e\xc8\x3d\x76\x94\x43\x83\x25\x13\x32\xd4\xbf\x39\x5b\x34\xde\x3a\xcd\x36\x87\xef\xee\xf5\x89\xc5\x64\x8d\xc7\xaa\x62\xdb\x0f\x02\x77\x68\x51\x93\x4f\x92\xe4\xaf\xf0\xd3\x63\x08\x1f\xce\xb7\x33\xe2\xab\xb6\x1d\xf5\x4d\xaa\x0f\xbf\xb1\x5f\x2c\x2a\x5d\x5e\xb8\x71\xd6\x91\xec\x7b\x9a\xae\x01\xee\x7a\x43\x1d\x59\x09\x7f\x30\xf8\xdc\xe9\x06\x35\xe5\x6e\x37\xa8\xd9\xa2\x50\xfb\x30\x90\xdf\x9f\x7e\x48\xab\x29\xd4\xf0\x3c\x2a\x5e\x52\x00\x9a\x1a\xab\x5c\x1d\xfb\xd3\x2b\xce\x5d\x42\x9a\xbc\x26\x43\x1a\x85\x66\x42\x58\xc2\x14\xc3\x76\xdb\xac\x17\xa9\x3e\x8b\x21\xa2\x99\x20\x22\x2e\xa3\x88\x74\x26\x8c\xa9\x79\x8c\x63\x8d\x42\x89\x95\x69\x44\xba\x73\x83\x0f\x14\x56\x4e\xa9\x40\x52\x43\x63\xe5\x3f\x18\xee\x78\x7a\x2b\x36\x42\xbe\xfe\x3a\xec\x3a\x09\x6e\x12\xfd\x57\xc3\xa9\x0c\xd3\x2c\x2b\x23\x58\xfd\xa0\x6b\xac\x9c\x34\xe4\x85\x15\xef\x50\x2e\x9b\x88\x6b\xb2\xb6\x6c\x57\x2e\x2e\x16\x7e\x7f\x3c\xdb\x7a\xac\x3e\x03\x00\x00\xff\xff\x73\x81\x3c\x18\x1a\x04\x00\x00")

func type_users_graphql() ([]byte, error) {
	return bindata_read(
		_type_users_graphql,
		"type/users.graphql",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"mutation.graphql": mutation_graphql,
	"query.graphql": query_graphql,
	"schema.graphql": schema_graphql,
	"type/admin.graphql": type_admin_graphql,
	"type/auth.graphql": type_auth_graphql,
	"type/company.graphql": type_company_graphql,
	"type/users.graphql": type_users_graphql,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"mutation.graphql": &_bintree_t{mutation_graphql, map[string]*_bintree_t{
	}},
	"query.graphql": &_bintree_t{query_graphql, map[string]*_bintree_t{
	}},
	"schema.graphql": &_bintree_t{schema_graphql, map[string]*_bintree_t{
	}},
	"type": &_bintree_t{nil, map[string]*_bintree_t{
		"admin.graphql": &_bintree_t{type_admin_graphql, map[string]*_bintree_t{
		}},
		"auth.graphql": &_bintree_t{type_auth_graphql, map[string]*_bintree_t{
		}},
		"company.graphql": &_bintree_t{type_company_graphql, map[string]*_bintree_t{
		}},
		"users.graphql": &_bintree_t{type_users_graphql, map[string]*_bintree_t{
		}},
	}},
}}
