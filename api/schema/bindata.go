package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _mutation_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x52\xd1\x6e\x1b\x21\x10\x7c\xe7\x2b\xd6\xea\x4b\xfb\x92\x0f\xf0\x5b\xea\xa8\x52\xa4\x58\xad\xe2\xe4\x03\xb6\xc7\xc6\x46\xe5\x16\x0a\x4b\xd4\x53\xe5\x7f\x8f\x0e\x63\xee\xb8\x8b\x1f\x77\x98\x19\x66\x07\xbe\x40\x9f\x04\xc5\x38\x8e\xd0\x21\x43\xef\xb4\x79\x1b\x40\x4e\x04\xfa\xf7\x1d\xd0\x3f\xea\x92\x90\x86\x48\x7f\x13\xb1\x18\xb4\x76\xb8\x53\xca\xb0\x4f\x02\xaf\xde\x3a\xd4\x3f\x8c\xa5\x3d\x09\xc2\x7f\x05\xf0\x66\x2c\xbd\x0c\x9e\xb6\x70\x90\x60\xf8\xb8\x51\x00\x9d\x63\x21\x96\x27\xe2\xa3\x9c\xb6\xf0\xc8\xb2\x51\x67\xa5\x64\xf0\x34\xb3\x78\xa6\xe8\xb3\x45\x0a\x76\xae\x8e\xa9\xeb\x28\xc6\x17\xf7\x87\x78\xc2\xcf\xeb\x0c\x87\x0b\x31\x7b\xdc\x14\xe5\x4b\xf7\x65\xe5\x4c\x45\xdd\x1b\x7e\x72\x47\xc3\x5f\xb3\xe3\x16\xee\x2b\xb2\xf9\xb6\x85\xfb\x24\xa7\xec\xa3\x00\x7a\x64\x3c\x52\x68\xd8\xfb\x19\xb6\xe4\x77\x81\x50\xa8\x30\xae\x82\xdd\x1c\x7c\x1c\xb1\x51\x56\xe6\xe9\x92\x5f\xc1\x8d\x65\x5e\xf6\x7b\x1e\xeb\x8f\x72\xb5\x68\x8b\x1f\xe5\x6d\x8f\x37\x5c\x4a\x43\x6b\x97\x72\xd0\xe6\xd0\x64\x69\x15\xfe\x61\x0e\xd6\xf0\xdf\x9d\xb3\x84\xbc\xa9\x2b\xe7\x0a\xdb\x85\x33\x54\x15\x79\x1a\x1f\xdb\xeb\x25\xfd\x75\x82\x56\xf4\x4b\xa6\x86\xfe\x30\x41\xb7\xf3\xec\x5c\xef\x91\x87\x36\x51\x01\xab\xaa\xcc\x4b\xd1\xb5\x7b\x05\x30\xfe\xe5\x8c\x7d\x6a\x91\x09\xa5\xf7\x4f\x9f\x39\x13\x02\x75\xe8\xa5\x3b\xe1\xfc\x93\xb7\x99\xd1\xfb\xe0\xde\x6b\xe8\x94\x8c\xae\xe4\x26\x67\xc4\x77\xfa\xc9\xd6\x30\xed\x5c\x0a\x91\xae\xfb\x1d\x16\x78\x5d\x71\x0e\x16\xfd\xce\x62\x8c\xc1\xb9\x7e\x6d\xb1\x38\xaa\x2e\x97\x28\xea\xac\x3e\x02\x00\x00\xff\xff\xcc\x25\xae\x8c\x3e\x04\x00\x00")

func mutation_graphql() ([]byte, error) {
	return bindata_read(
		_mutation_graphql,
		"mutation.graphql",
	)
}

var _query_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x52\xcb\x6e\x14\x31\x10\xbc\xfb\x2b\x6a\x95\xcb\x22\x45\x7c\xc0\xdc\x08\x08\x69\x0f\x40\x10\xc9\x07\x78\x77\xda\xb3\x8d\xec\xf6\x60\xf7\x40\x56\x28\xff\x8e\xec\x99\x9d\x07\xd9\x9b\xed\xae\xea\xaa\xea\xf6\x1d\x7e\x0d\x94\x98\x32\xf2\x39\x0e\xbe\x85\x44\x45\x88\x2d\xbb\x0b\xf4\x4c\x68\x8f\xef\x41\x2f\x74\x1a\x94\x5a\xb0\xa0\xb7\x29\x59\xef\xc9\x1b\xbd\xf4\x84\x47\xdb\xd1\x41\x5c\xc4\x5f\x03\x68\x54\xeb\x1b\x1c\x44\x77\xb8\xc3\xd7\x21\x1c\x29\x21\x3a\xf4\xb6\xa3\x0c\xeb\x94\x12\xf4\xcc\x19\x51\xc8\x00\xd1\xb9\x4c\x3a\xe3\x9f\xce\x34\x3d\x15\x4e\xc5\x15\x22\x5c\x8a\xa1\x5a\xc9\x6a\x93\x1a\xc0\x73\xe0\x2d\x2d\xd8\x97\x62\xff\x8f\xa0\xa7\x54\x59\x06\xe8\xf8\x37\xc9\x0d\x37\xac\x14\xf2\x58\x35\xaf\xc6\xb0\xf4\x83\xd6\x1c\x35\xc3\xca\xd4\x46\x6a\x81\x7e\xb1\x62\x3b\x4a\x9f\xd9\x97\x3c\x85\x23\x36\x50\x83\x1f\x9a\x58\x3a\x03\x50\xb0\xec\x57\xf7\x9f\xf1\xf8\xc4\xea\xd7\x90\x61\xe0\x76\x75\x55\xf2\xd4\x9f\xa3\x2c\x90\x59\xed\x63\x0c\xbd\x95\xcb\x4a\xed\x3f\xee\x46\xbc\xd2\x94\x92\xb3\xa7\xba\x1b\x16\xab\xd4\x7e\x1f\x28\x5d\x2a\xb7\x9f\xd6\xd5\xcc\x8b\x5b\x94\xbe\xa5\x96\xd2\xc3\x88\xb3\xf9\x44\xd2\xb2\x74\x0d\x1e\x62\xf4\x64\xc5\x00\x8e\xc9\xcf\xca\xbb\x42\xac\x5f\x60\xe9\xce\xb5\xf3\xb5\x0e\xd8\x36\xb0\xec\x47\xbf\xcf\xcf\x87\x4f\xbb\x77\x0d\x3e\x94\xb7\x6b\x2d\xef\x8b\xa1\xd1\xcc\xb5\x56\xce\x85\x1c\xc6\x31\xef\xd7\x71\x4b\x83\x69\xfc\x0b\x62\xdd\xe4\x1e\xae\x0e\xaa\xd9\x6e\xe9\x1e\x71\x0c\xd7\x5c\x53\x2e\x8d\x1e\xc7\xdf\x72\x1a\xe7\xfc\x46\x6e\x9a\xff\x8c\x60\xba\xad\xb7\xd9\xd3\x4d\xbd\x09\x51\xf5\x5e\xcd\xbf\x00\x00\x00\xff\xff\xaf\x14\x1d\x32\x78\x03\x00\x00")

func query_graphql() ([]byte, error) {
	return bindata_read(
		_query_graphql,
		"query.graphql",
	)
}

var _schema_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x4e\x4e\xcc\x49\x2c\x52\x08\x0d\xf5\x74\xe1\xe2\x2a\x4e\xce\x48\xcd\x4d\x54\xa8\xe6\x52\x50\x28\x2c\x4d\x2d\xaa\xb4\x52\x08\x04\x51\x5c\x0a\x0a\xb9\xa5\x25\x89\x25\x99\xf9\x79\x56\x0a\xbe\x50\x16\x57\x2d\x17\x20\x00\x00\xff\xff\x7d\xb7\x88\x41\x3c\x00\x00\x00")

func schema_graphql() ([]byte, error) {
	return bindata_read(
		_schema_graphql,
		"schema.graphql",
	)
}

var _type_admin_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\xcf\xc1\x4a\xc4\x30\x10\x06\xe0\x7b\x9e\x62\x7c\x8d\xdc\xc4\x05\x29\x88\xac\x48\x4f\xe2\x61\x20\xff\x86\x81\x24\x0d\xc9\x04\x59\x64\xdf\x5d\x1a\x85\xae\x6d\x41\xf7\x96\x0c\x7f\xe6\xcb\xaf\xe7\x0c\xba\x77\x51\x12\x7d\x1a\xa2\xd6\xc4\x59\x1a\xc7\xe1\x70\x67\x88\x10\x59\x82\xa5\x57\x2d\x92\xfc\x3c\x38\x49\xa9\xfa\xcc\x11\xd7\xc3\xc0\xeb\xd9\xc5\x98\x65\xef\x91\x3d\x48\x62\x0e\x88\x48\x5a\xe9\xc8\x5e\x12\x2b\xdc\x4b\x43\x39\x77\x15\xce\xa3\x5a\x7a\xeb\xf9\x77\x43\x94\xd9\x63\x48\xa7\xc9\xce\xe9\x7e\x9a\x77\x4a\xca\x4d\xe9\x11\xda\x73\x43\xbf\x2d\x9f\xbe\xc2\xbf\x83\x3d\xf5\x34\xf9\x9f\x6a\x9b\x32\x99\x6b\xfd\x98\xca\xde\xd3\x87\x02\x56\xac\x98\x7f\x96\xbf\x4d\x1a\xb3\xdb\x4a\xbf\x0b\xed\xc8\x3b\xf0\xda\x5d\x88\x03\x02\xfe\x20\x2e\xe6\x2b\x00\x00\xff\xff\xf0\x8e\x27\x90\x08\x02\x00\x00")

func type_admin_graphql() ([]byte, error) {
	return bindata_read(
		_type_admin_graphql,
		"type/admin.graphql",
	)
}

var _type_auth_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\xa9\x2c\x48\x55\x70\x2c\x2d\xc9\x08\xc9\xcf\x4e\xcd\x53\xa8\xe6\x52\x50\x28\x01\xb1\xac\x14\x82\x4b\x8a\x32\xf3\xd2\x15\xb9\x6a\xb9\x00\x01\x00\x00\xff\xff\xa3\x33\x16\xdc\x24\x00\x00\x00")

func type_auth_graphql() ([]byte, error) {
	return bindata_read(
		_type_auth_graphql,
		"type/auth.graphql",
	)
}

var _type_company_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x50\xbb\x6a\x03\x31\x10\xec\xf5\x15\xe3\x2e\x01\x37\x49\xa9\xce\x3e\x08\x18\xf2\x24\x65\x48\xb1\x44\x6b\x21\xb8\x5b\x09\x49\x17\x38\x4c\xfe\x3d\x48\x3a\x07\x25\xe9\xdd\x8d\x46\xb3\xbb\x33\x93\x97\xc0\x18\xfc\x14\x48\x16\x9c\x14\x40\x21\x44\xff\xc9\x46\x63\xef\xfd\xc8\x24\x0a\x98\x67\x67\x34\x5e\x73\x74\x62\x37\x0a\xf8\x88\x4c\x99\xcd\x2e\x9f\x49\x05\x08\x4d\xdc\x6b\x26\x12\xb2\x1c\xd3\x55\x20\xcb\x1a\xcf\x64\x79\x8b\xa3\x1b\x33\x47\x8d\x87\xf6\x79\x57\x9f\x5b\xf8\x68\x38\xee\x17\x8d\xa7\x06\xae\x7f\x14\x65\xac\x6c\x23\x63\x22\xa7\xa4\xb1\x6b\x60\xa3\xbe\x94\xaa\xde\x57\xa2\x79\x6f\xf8\xde\x09\xdf\xf4\x5e\x3a\xfe\xf6\x57\x0e\x3f\x4b\x5e\x7a\x26\xf8\x94\x07\x6f\xf8\x9f\x2a\x76\xb2\xf3\xe9\xb5\xb6\xe2\x11\x6e\x0a\x23\x4f\x2c\x39\x95\xa8\x4e\x4a\x3f\x2f\x33\xc7\x56\x2a\x1b\xcb\x49\xe3\x6d\x9d\x78\x2f\x97\xc8\xf2\x41\x8e\xbe\x55\x53\x50\xd9\xeb\x24\xcc\x19\x43\xed\x77\x15\x1f\x2a\x75\xaa\x46\x2a\xf1\xf8\xa7\xe9\x8b\xa5\xfe\x0e\x00\x00\xff\xff\x87\xf2\x57\xad\x2c\x02\x00\x00")

func type_company_graphql() ([]byte, error) {
	return bindata_read(
		_type_company_graphql,
		"type/company.graphql",
	)
}

var _type_course_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x54\x4d\x6b\x1b\x31\x10\xbd\xeb\x57\x3c\xdb\x97\x16\xe2\x43\x62\x3b\xb4\x7b\x4b\x5d\x17\x0c\x0d\x09\xb1\x0d\x05\xe3\x83\x2a\xcf\x3a\x22\xbb\xd2\xa2\x8f\x12\x13\xf2\xdf\x8b\xa4\xf5\xee\xda\x4e\x2f\xa1\x97\x16\x2d\x3b\xfa\x78\xef\xcd\x68\xa4\x11\x29\x5f\xe2\x46\x08\xb2\x76\xb9\xaf\x08\x2f\x0c\x30\x64\x9d\x91\xc2\xd1\x96\x01\xba\x22\xc5\x5e\x19\x8b\xc0\x85\x33\x5e\x38\x6f\x68\x56\x50\x49\xca\x45\x78\xa9\xb7\xbe\x20\x06\x38\xb2\x8e\x01\x05\x59\xab\x5b\xce\x6d\x5c\xee\x12\xce\x70\x2e\x78\x9e\x6a\x6f\x2c\xcd\x55\xae\x23\x48\xf1\x92\xb2\xe0\x50\xaa\x5d\x83\xb9\x53\x85\x54\x94\x90\x11\xe5\xbd\xdc\x66\x58\xad\xe6\x5f\x7b\x0c\x90\x2a\xd7\x59\x47\xa8\xd7\x8a\x17\xdc\x5a\xa3\x75\xf9\x26\xf7\x0d\x6a\x60\x4a\x55\x79\x87\x05\xff\x45\x27\xf4\x79\x5c\x38\xd3\x38\x0a\x19\x10\xdc\xd1\x4e\x9b\x7d\x58\x6d\x30\xf4\x2c\xc8\x54\xae\x03\x93\xca\x19\xbd\xf5\xc2\x49\xad\x3a\xd3\x3f\xb9\x78\xda\x19\xed\xd5\x76\xfa\x48\xe2\x29\xc3\x17\xad\x0b\xe2\x8a\x01\xbc\x39\xae\xac\x73\x74\x0c\xa8\x8c\x14\x94\xe1\x5b\xa1\x79\x48\xb0\xd0\x85\x36\x1d\x49\xc7\x77\x36\xc3\x3a\x8d\x37\x0c\xb0\x15\x09\x99\x4b\xb1\x24\x53\xda\x23\xdf\x4a\x91\x99\x97\x7c\x47\x0b\x1f\x1d\x74\x55\xbc\xd3\xa6\xdd\x13\x06\xc9\xe8\x1c\xee\x91\xb0\x0c\xab\xf8\x20\x0e\x09\x83\x48\x09\xd7\xaa\xd8\x7f\x0c\x97\x85\x3f\xdf\x73\xe3\xa4\x90\x15\x57\xce\x66\x98\x2b\x77\x9c\xeb\xee\x19\xff\x0f\x89\xee\xbd\x3b\xd3\xf6\x50\x6d\x19\xd6\x75\x3e\x1c\x95\xbd\x0d\x06\xa1\x10\xf6\xc8\xb5\x09\x79\x95\x8a\xea\x2c\xdb\x36\x93\x2d\x3e\x95\x5c\xdc\xc3\x69\xf9\xf6\xce\x2b\xc8\x51\x88\x6f\x9d\x8a\x36\xb9\xeb\xb5\xaa\xed\x74\x47\xf5\xa8\xc0\x4f\x25\x5f\x19\x1b\x60\x8d\xd9\x8f\x9b\xdb\xfb\xef\x33\x4c\xef\x56\x0f\x8b\x19\x16\xcb\x87\xd5\x74\xb9\x7a\x98\xb1\x01\x80\x97\xa4\xd3\x4f\x0f\x49\xff\xa2\x16\xe8\x8f\xc6\xa3\xf1\x68\xd8\xfd\x8f\xa3\xe9\xbf\x5e\x24\x1e\x4e\x88\x71\xf6\xe0\xbf\x7f\x79\x35\x0a\xdf\xb0\xb6\x57\x75\x27\x9a\x51\x03\x3e\xec\xb8\x1e\xb6\xd1\xa4\xe7\xa9\x8d\xe6\xf2\x2a\xb6\x61\x32\x41\xad\x19\x1d\x02\xea\xd2\xc3\x23\xd7\x92\x3f\x7d\x4e\x6d\x38\xb9\x8e\x6d\x38\xb9\x6e\x3a\x93\xeb\x49\x2b\xb0\x89\xf6\xaf\x6c\x10\x03\xc8\x1c\xd2\xc2\x51\x59\x15\xdc\x11\x4a\xfe\x44\xe0\x10\xba\xda\xff\x0b\xbb\xff\x43\x28\xa3\x78\x09\xc6\xe9\x4a\x84\xce\x64\x32\x8e\x6d\x18\xff\xfd\x13\xfa\x3b\x42\xd9\xb0\xdf\x01\x00\x00\xff\xff\x70\xfa\x76\x15\x17\x07\x00\x00")

func type_course_graphql() ([]byte, error) {
	return bindata_read(
		_type_course_graphql,
		"type/course.graphql",
	)
}

var _type_users_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x92\xc1\x8e\xd4\x30\x0c\x86\xef\x7d\x0a\xaf\xe6\xb2\x48\x3c\x41\x6f\x68\x46\x2b\x55\x02\xb4\x08\x7a\x42\x1c\x4c\xeb\x64\x8d\x12\xa7\x4a\x5c\xad\x46\x68\xde\x1d\x25\x6d\x87\x32\xed\x82\x38\xee\x2d\xfd\xeb\xdf\xf6\xff\x25\x2c\x4a\xd1\x60\x47\xd0\x26\x8a\xf0\xb3\x02\x18\x47\xee\x6b\xf8\xac\x91\xc5\xde\x55\x00\x5d\x24\x54\xea\xdf\xe9\x22\x56\x00\xe4\x91\xdd\xba\xc8\x70\x4c\xfa\x11\x3d\xad\x45\x87\x5b\x4d\xc9\xd1\xf0\x14\x64\x53\xf8\x3e\x58\x96\xb5\xf8\x23\x7c\xff\xc2\xea\x56\x85\x97\xaa\x62\x19\x46\x85\x0f\x28\x68\x29\x16\x4b\xd9\x79\xb3\xcf\x80\x29\x3d\x87\xd8\xef\x98\x8f\x25\xcf\xdc\xa2\x29\x52\x6e\xd1\x05\x3f\xa0\x9c\xdb\xb6\x39\x2d\x26\x38\xc0\x43\x88\x80\xbd\x67\x49\xf0\xfc\x44\x32\xc1\xc8\xbf\xfc\xe4\x4f\x10\x0c\xf4\x6c\x0c\x45\x12\x9d\x9b\x30\xa5\xff\x41\xb2\x59\x7e\x9b\xfc\x05\x6e\x7f\x49\x79\x22\x47\x3b\x29\xff\xbc\xdc\x4b\x55\xe9\x79\xa0\x85\x27\xb0\x1f\x1c\x79\x12\x4d\xaf\xe1\x39\x5c\xef\xac\x86\xe3\x74\x28\x4c\x62\x30\xec\xa8\xf1\x68\xa9\x8d\xd7\xad\x6e\xb3\x3e\xa2\xa5\x75\xde\x47\xb4\x2c\x39\xd8\xa7\x91\xe2\x79\x7a\x54\xbd\xa5\x54\xc3\xd7\xd9\xf1\xad\x00\xb7\xd4\x88\x09\x75\xae\x2f\xa7\xdc\xf7\x00\xa5\x73\x46\x6e\x51\x69\x07\xe3\x01\x16\x90\xf9\x7d\xdd\x95\xef\x1b\x68\x59\xda\xc1\x96\xe5\x2d\xb8\xac\xee\xa0\x5b\x8a\x67\x78\x27\x54\x2a\xda\x96\x5d\x56\xbb\x30\xc6\x44\xe9\x3e\x18\x93\x48\x6b\x68\x44\xdf\x82\x63\xcf\xcb\xd9\xb0\x53\x8a\xf5\x35\xd8\xb1\x18\x1e\x8a\xfa\x26\x43\x2f\xfe\xa5\x97\xe8\x2c\xdc\xff\xc3\xd7\x88\x4e\x1e\x8a\xca\x86\x3b\xd4\x97\x97\xc8\x63\x56\x65\xab\x59\x6b\xf3\x66\xe0\xef\x9f\x37\x53\x2f\xd5\xaf\x00\x00\x00\xff\xff\x38\xa7\x9b\x25\xf2\x04\x00\x00")

func type_users_graphql() ([]byte, error) {
	return bindata_read(
		_type_users_graphql,
		"type/users.graphql",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"mutation.graphql": mutation_graphql,
	"query.graphql": query_graphql,
	"schema.graphql": schema_graphql,
	"type/admin.graphql": type_admin_graphql,
	"type/auth.graphql": type_auth_graphql,
	"type/company.graphql": type_company_graphql,
	"type/course.graphql": type_course_graphql,
	"type/users.graphql": type_users_graphql,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"mutation.graphql": &_bintree_t{mutation_graphql, map[string]*_bintree_t{
	}},
	"query.graphql": &_bintree_t{query_graphql, map[string]*_bintree_t{
	}},
	"schema.graphql": &_bintree_t{schema_graphql, map[string]*_bintree_t{
	}},
	"type": &_bintree_t{nil, map[string]*_bintree_t{
		"admin.graphql": &_bintree_t{type_admin_graphql, map[string]*_bintree_t{
		}},
		"auth.graphql": &_bintree_t{type_auth_graphql, map[string]*_bintree_t{
		}},
		"company.graphql": &_bintree_t{type_company_graphql, map[string]*_bintree_t{
		}},
		"course.graphql": &_bintree_t{type_course_graphql, map[string]*_bintree_t{
		}},
		"users.graphql": &_bintree_t{type_users_graphql, map[string]*_bintree_t{
		}},
	}},
}}
