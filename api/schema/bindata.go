package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _mutation_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x90\x4f\x6a\xf3\x30\x10\xc5\xf7\x3a\xc5\x98\x6f\xf3\x75\x93\x03\x78\x97\x12\x0a\x81\x18\x4a\x92\x1e\x60\x6a\x4d\x6c\x51\x79\xe4\x5a\x23\xa8\x29\xbe\x7b\xb1\xec\xf8\x4f\x4c\x96\xf3\xf4\xde\x4f\x33\xef\x1f\x54\x41\x50\x8c\x63\x0f\x39\x32\x54\x4e\x9b\x5b\x0b\x52\x12\xe8\xcf\x1d\xd0\x0f\xe5\x41\x48\x83\xa7\xef\x40\x2c\x06\xad\x6d\x77\x4a\x19\xae\x83\xc0\x47\x6d\x1d\xea\x37\x63\x29\x23\x41\xf8\x55\x00\x37\x63\xe9\xda\xd6\x94\xc2\x45\x1a\xc3\x45\xa2\x00\x72\xc7\x42\x2c\x27\xe2\x42\xca\x14\x8e\x2c\x89\xea\x94\x92\xb6\xa6\x05\xe2\x4c\xbe\x8e\x88\xd0\xd8\x65\xda\x87\x3c\x27\xef\xaf\xee\x8b\x78\xd6\xbb\xed\x0e\x97\xc1\x18\x19\x4f\x43\xf1\xd3\x6c\x3c\x39\x5a\x51\x57\x86\x4f\xae\x30\xfc\x3f\x12\x53\xd8\x4f\x4a\xf2\x92\xc2\x3e\x48\x19\x39\x0a\xa0\x42\xc6\x82\x9a\x95\x3b\x5b\x68\x8f\x7e\xd4\x7a\x7c\x9e\xd9\x77\xe5\xd8\x0b\x7d\x60\x9c\x67\xfc\x7b\xe3\xfa\x1a\x87\xcb\xce\x7d\xf1\x5e\xee\xf9\x75\xe5\x7d\x7c\xdd\xe0\x13\xca\xd8\xcd\x96\x32\x3e\xac\xf7\xd0\x64\x49\xe8\x61\xf3\xc3\x52\x9c\x96\x7f\x75\xce\x12\x72\x32\x1c\x1b\x9b\x5b\x9c\x1a\xe7\xc9\x1b\xa7\x09\xbf\xf2\x1e\x66\x69\x8b\xee\xd4\x5f\x00\x00\x00\xff\xff\x57\xeb\x91\x38\xa6\x02\x00\x00")

func mutation_graphql() ([]byte, error) {
	return bindata_read(
		_mutation_graphql,
		"mutation.graphql",
	)
}

var _query_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x52\xcb\x6e\xdc\x30\x0c\xbc\xeb\x2b\x66\x91\x4b\x0a\x04\xfd\x00\xdf\x9a\x02\x05\x72\x68\x9b\xa2\xf9\x01\xed\x9a\xb2\x59\x48\x94\x2b\xd1\x6d\x16\x45\xfe\xbd\x90\xec\xf5\x23\xbb\x37\x49\x9c\xe1\x0c\x39\xba\xc3\xef\x91\x12\x53\x46\xee\xe3\xe8\x5b\x48\x54\x84\xd8\xb2\x3b\x43\x7b\x42\x7b\xfc\x08\x7a\xa5\xd3\xa8\xd4\x82\x05\x83\x4d\xc9\x7a\x4f\xde\xe8\x79\x20\x3c\xdb\x8e\x9e\xc4\x45\xfc\x33\x80\x46\xb5\xbe\xc1\x93\xe8\x01\x77\xf8\x36\x86\x23\x25\x44\x87\xc1\x76\x94\x61\x9d\x52\x82\xf6\x9c\x11\x85\x0c\x10\x9d\xcb\xa4\x0b\xfe\xa5\xa7\xf9\xa9\x70\x2a\xae\x10\xe1\x52\x0c\xd5\x4a\x56\x9b\xd4\x00\x9e\x03\xef\x69\xc1\xbe\x16\xfb\x7f\x05\x03\xa5\xca\x32\x40\xc7\x7f\x48\x6e\xb8\x61\xa5\x90\xa7\xaa\x79\x33\x86\x65\x18\xb5\xce\x51\x67\xd8\x98\xda\x49\xad\xd0\xaf\x56\x6c\x47\xe9\x0b\xfb\x32\x4f\xe1\x88\x0d\xd4\xe0\xa7\x26\x96\xce\x00\x14\x2c\xfb\xcd\xfd\x57\x3c\xbe\xb0\xfa\x2d\x64\x1c\xb9\xdd\x5c\x95\x3c\x0d\x7d\x94\x15\xb2\xa8\x7d\x8e\x61\xb0\x72\xde\xa8\xbd\xe3\xee\xc4\x2b\x4d\x29\x39\x7b\xaa\xd9\xb0\x58\xa5\xf6\xc7\x48\xe9\x5c\xb9\xc3\x1c\x57\xb3\x04\xb7\x2a\x7d\x4f\x2d\xa5\xc7\x09\x67\xf3\x89\xa4\x65\xe9\x1a\x3c\xc6\xe8\xc9\x8a\x01\x1c\x93\x5f\x94\x0f\x85\x58\xbf\xc0\xda\x9d\x6b\xe7\x4b\x1d\xb0\x6d\x60\xb9\xdf\xfa\x3d\x7c\x68\xf0\xa9\xbc\x5e\xaa\xf9\xbe\x58\x9a\xec\x5c\x6a\xe5\x5c\xe8\x61\x5a\xf4\x55\x83\x39\x80\x15\xb1\x6d\xf2\x00\x57\x57\xd5\xec\x73\x7a\x40\x9c\xc6\x6b\x2e\x73\xae\x8d\x9e\xa7\xff\x72\x9a\x36\x7d\x25\x37\x27\xb0\x20\x98\x6e\xeb\xed\x92\xba\xa9\x37\x23\xaa\xde\x9b\xf9\x1f\x00\x00\xff\xff\x43\x83\x89\xca\x7a\x03\x00\x00")

func query_graphql() ([]byte, error) {
	return bindata_read(
		_query_graphql,
		"query.graphql",
	)
}

var _schema_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x4e\xce\x48\xcd\x4d\x54\xa8\xe6\x52\x50\x28\x2c\x4d\x2d\xaa\xb4\x52\x08\x04\x51\x5c\x0a\x0a\xb9\xa5\x25\x89\x25\x99\xf9\x79\x56\x0a\xbe\x50\x16\x57\x2d\x17\x20\x00\x00\xff\xff\x1f\x5d\x4a\xc1\x2f\x00\x00\x00")

func schema_graphql() ([]byte, error) {
	return bindata_read(
		_schema_graphql,
		"schema.graphql",
	)
}

var _type_admin_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x8f\xc1\x6a\xc3\x30\x10\x44\xef\xfa\x8a\xed\x6f\xf8\x56\x28\x14\x43\x29\x2e\x3d\x96\x1e\x16\x34\x16\x0b\x92\x2c\xa4\x15\xc1\x84\xfc\x7b\xb0\x08\x89\xb1\x03\x49\x6e\xd2\xf0\x34\xa3\xa7\x73\x02\xbd\xdb\x20\x91\x8e\x86\xa8\x56\xb1\x1d\xfd\x6a\x96\xe8\xde\x0c\x11\x02\x8b\x5f\x07\xa3\xe4\xa2\xdf\x1c\xb0\x0e\x3d\x6f\xb3\x93\x31\xb7\xe6\x81\x1d\x48\x42\xf2\x08\x88\x5a\x68\x60\x27\x91\x15\xf6\xa7\x22\xcf\x6d\x17\xd6\xa1\x74\xf4\xd7\xf8\x7f\x43\x94\xd8\xa1\x8f\xe3\xd4\x2d\x74\x3b\x2d\x9d\x12\x53\x55\xfa\x84\x36\xae\x6f\xb7\xfd\xb7\xaf\x60\xa3\xbe\x26\x77\x91\xdb\xc9\x24\x2e\xe5\x30\xe5\xfb\x4f\xed\x66\xe3\x49\xf3\xd7\x66\x3e\xe0\xa1\x78\x60\x73\x0e\x00\x00\xff\xff\x7f\xeb\x7e\xa5\xa4\x01\x00\x00")

func type_admin_graphql() ([]byte, error) {
	return bindata_read(
		_type_admin_graphql,
		"type/admin.graphql",
	)
}

var _type_auth_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\xa9\x2c\x48\x55\x70\x2c\x2d\xc9\x08\xc9\xcf\x4e\xcd\x53\xa8\xe6\x52\x50\x28\x01\xb1\xac\x14\x82\x4b\x8a\x32\xf3\xd2\x15\xb9\x6a\xb9\x00\x01\x00\x00\xff\xff\xa3\x33\x16\xdc\x24\x00\x00\x00")

func type_auth_graphql() ([]byte, error) {
	return bindata_read(
		_type_auth_graphql,
		"type/auth.graphql",
	)
}

var _type_company_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8e\x41\xca\xc2\x30\x14\x84\xf7\xef\x14\xd3\xdd\xff\x43\x4f\x90\x9d\x0a\x82\x0b\x51\x71\x29\x2e\x82\x99\x86\x40\x93\x86\x34\x5d\x14\xe9\xdd\x25\x46\xa5\xbb\x79\xf3\x66\x86\x2f\xcf\x91\xd8\x0d\x3e\xea\x30\xe3\x29\xc0\x34\x39\xa3\x70\xcd\xc9\x05\xdb\x08\xf0\x48\xd4\x99\x66\x93\xbf\xa6\x00\x41\x7b\xae\x33\x5e\x07\x6d\x99\xc6\xbf\xa8\x2d\x15\xce\xda\xb2\x45\xe7\xfa\xcc\xa4\x70\xac\xcf\xfd\xfb\x6c\x31\x24\xc3\xb4\x9d\x15\x4e\x55\xfc\xff\x12\xa5\xd6\xc8\x22\xb2\x66\x2a\x26\x9c\x8f\x3d\x3d\x43\x1e\xcb\xb6\x0b\x05\xe8\x32\x31\x55\x62\x1a\xcb\x51\xe1\xf6\x69\xdc\x05\x28\x1c\x87\xd0\x0d\x95\xa5\x28\x59\xe4\x15\x00\x00\xff\xff\x00\x22\xec\x14\xeb\x00\x00\x00")

func type_company_graphql() ([]byte, error) {
	return bindata_read(
		_type_company_graphql,
		"type/company.graphql",
	)
}

var _type_users_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x92\xc1\x6a\xe3\x30\x10\x86\xef\x7a\x8a\x09\xb9\x64\x61\x9f\xc0\xb7\x90\xb0\x60\xd8\x5d\xb2\xec\xfa\xb4\xf4\xa0\xda\x23\x75\x8a\x2c\x19\x69\x4c\x09\x25\xef\x5e\xa4\xd8\xa9\x1a\x39\x2d\xf4\xd6\x9b\xfc\x7b\xfe\x99\x7f\x3e\x89\x2c\xa3\x57\xb2\x45\x68\x02\x7a\x78\x16\x00\xe3\x48\x5d\x05\x7f\xd9\x93\xd5\x2b\x01\xd0\x7a\x94\x8c\xdd\x96\x67\x51\x00\x60\x2f\xc9\xe4\x45\x8a\x7c\xe0\xdf\xb2\xc7\x5c\x34\xb2\xd4\x18\x0d\x0e\x0f\xce\x16\x85\x3f\x9d\x26\x9b\x8b\x8f\xee\xfe\x1f\xb1\xc9\x0a\x4f\x42\x90\x1d\x46\x86\x5f\xd2\x4a\x8d\x3e\x59\x52\xe6\x22\xcf\x20\x43\x78\x72\xbe\x5b\x30\x6f\xbb\x6e\xf2\xd7\xe9\x3b\xfa\x5b\xd7\x0f\xd2\x1e\x9b\xa6\xde\x7f\x6a\xab\x62\x7e\x19\xfe\xc6\xea\xef\x04\xdd\xa3\x41\xc6\x22\xeb\xdb\xfb\x39\x09\xc1\xc7\x01\x67\x24\x40\xfd\x60\xb0\x47\xcb\xe1\x2b\xdc\xe8\x85\x7c\x05\xbb\xf3\x21\x31\xf1\x4e\x91\xc1\xba\x97\x1a\x1b\x7f\x49\x75\xbd\xeb\x41\x6a\xcc\xf7\x3d\x48\x4d\x36\x2e\xf6\x67\x44\x7f\x3c\xbf\x8b\x4e\x63\xa8\xe0\xff\xe4\xb8\x4b\xc0\x35\xd6\x56\xb9\x2a\xd6\xa7\x53\xec\xbb\x86\xd4\x39\x22\xd7\x92\x71\x01\xe3\x1a\x66\x90\xf1\x95\xac\xd2\xf7\x15\xb4\x28\x2d\x60\x8b\x72\x09\x2e\xaa\x0b\xe8\xe6\xe2\x09\xde\x5e\x32\x26\xad\x64\x17\xd5\xd6\x8d\x3e\x60\xd8\x38\xa5\x02\x72\x05\xb5\xe5\xef\x60\xa8\xa7\xf9\xac\xc8\x30\xfa\xea\xb2\xd8\x2e\x19\x7e\x24\xf5\x5b\x84\x9e\xfc\x73\x2f\xcb\x93\xb0\xf9\xc0\x57\x5b\x3e\x7b\xd0\x33\x29\x6a\x25\xdf\x0e\x11\xc7\x64\x65\xd9\xac\xdc\x5c\x0c\x7c\xfd\x79\x35\xf5\x24\x5e\x02\x00\x00\xff\xff\xd6\x40\xc0\x42\xb5\x04\x00\x00")

func type_users_graphql() ([]byte, error) {
	return bindata_read(
		_type_users_graphql,
		"type/users.graphql",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"mutation.graphql": mutation_graphql,
	"query.graphql": query_graphql,
	"schema.graphql": schema_graphql,
	"type/admin.graphql": type_admin_graphql,
	"type/auth.graphql": type_auth_graphql,
	"type/company.graphql": type_company_graphql,
	"type/users.graphql": type_users_graphql,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"mutation.graphql": &_bintree_t{mutation_graphql, map[string]*_bintree_t{
	}},
	"query.graphql": &_bintree_t{query_graphql, map[string]*_bintree_t{
	}},
	"schema.graphql": &_bintree_t{schema_graphql, map[string]*_bintree_t{
	}},
	"type": &_bintree_t{nil, map[string]*_bintree_t{
		"admin.graphql": &_bintree_t{type_admin_graphql, map[string]*_bintree_t{
		}},
		"auth.graphql": &_bintree_t{type_auth_graphql, map[string]*_bintree_t{
		}},
		"company.graphql": &_bintree_t{type_company_graphql, map[string]*_bintree_t{
		}},
		"users.graphql": &_bintree_t{type_users_graphql, map[string]*_bintree_t{
		}},
	}},
}}
