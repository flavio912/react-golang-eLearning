package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _mutation_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\xcc\x4d\x0e\x82\x40\x0c\x05\xe0\xfd\x9c\xe2\x19\x37\xba\xe1\x00\xec\x58\x9a\xc8\xce\x0b\x54\x5a\xa1\x91\xe9\xa0\x74\x12\x89\xf1\xee\x86\x04\x7f\x97\xfd\xfa\xde\x5b\x23\x66\x27\xd7\x64\x23\x1a\x32\xc4\xc4\x7a\x9a\xe0\x9d\x80\x8f\x05\xe4\x26\x4d\x76\x61\x8c\x72\xc9\x62\xae\xd4\xf7\x53\x11\x7c\x1a\x04\xf5\x52\xc4\x3d\x00\xc4\x51\x6d\x9f\x5a\xb5\x8d\xda\x90\xbd\x44\xf5\x96\xd5\xb6\x44\x95\xbd\x3b\xa4\xb3\x58\x00\x22\x19\xb5\x72\xfd\x49\xd7\x5f\xf6\x9f\x27\xe6\xe5\xfd\xd9\x7e\xc9\x6e\x86\xb9\xb0\xdc\xe1\x11\x9e\x01\x00\x00\xff\xff\x34\xca\x29\x9c\xd3\x00\x00\x00")

func mutation_graphql() ([]byte, error) {
	return bindata_read(
		_mutation_graphql,
		"mutation.graphql",
	)
}

var _query_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x52\xcd\x6e\xd4\x30\x10\xbe\xfb\x29\xbe\x55\x2f\x45\xaa\x78\x80\xdc\x28\x12\x52\x0f\x40\x11\x7d\x81\xd9\xcd\x38\x19\x64\x8f\x83\x33\x81\xae\x50\xdf\x1d\xd9\xd9\xcd\x4f\xdb\x5b\xe2\xf9\xfe\x3c\x9f\x6f\xf0\x7b\xe2\x2c\x3c\x62\xec\xd3\x14\x5a\x68\x32\xc4\xd4\x8a\x3f\xc3\x7a\x46\x7b\xfc\x08\x7e\xe6\xd3\x64\xdc\x42\x14\x03\xe5\x4c\x21\x70\x70\x76\x1e\x18\x8f\xd4\xf1\x83\xfa\x84\x7f\x0e\xb0\x64\x14\x1a\x3c\xa8\x1d\x70\x83\x6f\x53\x3c\x72\x46\xf2\x18\xa8\xe3\x11\xe4\x8d\x33\xac\x97\x11\x49\xd9\x01\xc9\xfb\x91\x6d\xc1\x3f\xf5\x7c\x39\x2a\x9c\x8a\x2b\x44\xf8\x9c\x62\x8d\x32\x1a\x65\x73\x40\x90\x28\x7b\x5a\xa4\xe7\x12\xff\xaf\x62\xe0\x5c\x59\x0e\xe8\xe4\x0f\xeb\x3b\x69\xc4\x38\x8e\xf3\xd4\xbd\x38\x27\x3a\x4c\x56\xef\x51\xef\xb0\x09\xb5\xb3\x5a\xa1\x5f\x49\xa9\xe3\xfc\x45\x42\xb9\x4f\xe1\x28\x45\x6e\xf0\xd3\xb2\x68\xe7\x00\x8e\x24\x61\xf3\xff\x2b\x1d\x9f\xc4\xc2\x16\x32\x4d\xd2\x6e\x7e\x8d\x03\x0f\x7d\xd2\x15\xb2\xb8\x7d\x4e\x71\x20\x3d\x6f\xdc\x5e\x71\x77\xe6\x95\x66\x9c\x3d\x9d\x6a\x37\xa2\x64\xdc\xfe\x98\x38\x9f\x2b\x77\xb8\xd4\xd5\x2c\xc5\xad\x4e\xdf\x73\xcb\xf9\x7e\xc6\xd1\x78\x62\x6d\x45\xbb\x06\xf7\x29\x05\x26\x75\x80\x17\x0e\x8b\xf3\xa1\x10\xeb\x13\x58\xd5\xa5\x2a\x5f\xe7\x00\xb5\x51\xf4\x76\x9b\xf7\xf0\xa1\xc1\xa7\x72\x7a\x9d\x8e\xb7\x25\xd2\x1c\xe7\x3a\x2b\xdf\x85\x1e\xe7\x45\xbf\x11\xb8\x14\xb0\x22\xb6\x22\x77\xf0\x75\x55\xcd\xbe\xa7\x95\xf6\x38\xbf\x8e\xd3\xbc\xd7\x37\xe2\x97\x7d\x2f\x08\xe1\xf7\xd5\x77\xbd\xdc\x21\xcd\xcb\x6b\xae\x5b\x5c\x95\xaa\xdf\x8b\xfb\x1f\x00\x00\xff\xff\x2f\x76\x66\x14\x68\x03\x00\x00")

func query_graphql() ([]byte, error) {
	return bindata_read(
		_query_graphql,
		"query.graphql",
	)
}

var _schema_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x4e\xce\x48\xcd\x4d\x54\xa8\xe6\x52\x50\x28\x2c\x4d\x2d\xaa\xb4\x52\x08\x04\x51\x5c\x0a\x0a\xb9\xa5\x25\x89\x25\x99\xf9\x79\x56\x0a\xbe\x50\x16\x57\x2d\x17\x20\x00\x00\xff\xff\x1f\x5d\x4a\xc1\x2f\x00\x00\x00")

func schema_graphql() ([]byte, error) {
	return bindata_read(
		_schema_graphql,
		"schema.graphql",
	)
}

var _type_admin_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8f\x4d\x0a\xc2\x30\x10\x85\xf7\x39\xc5\xf3\x1a\xdd\xb9\x92\x82\x48\xc5\xa5\xb8\x18\xc8\x34\x0c\x34\x3f\x24\x13\xa4\x88\x77\x97\x06\xd1\x6a\x77\xc9\xc7\x37\x6f\xe6\xe9\x9c\x18\x7b\xeb\x25\xe0\x61\x80\x5a\xc5\x76\xb8\x68\x96\xe0\x76\x06\x60\x4f\x32\xad\xc1\x28\xb9\xe8\x89\x3c\xaf\xe1\x44\xff\xec\x69\xcc\x37\x79\x20\xc7\x10\x9f\x26\xf6\x1c\xb4\x60\x20\x27\x81\x94\xed\xb9\x72\x9e\xdb\x5e\xb6\x8e\x4b\x87\x6b\xf3\x6f\x06\x48\xe4\xb8\x0f\x63\xec\x16\xbb\xbd\x96\x4c\x09\xa9\x2a\x0e\xac\xcd\xeb\xdb\x6f\x7b\xf6\x47\x6c\xd6\x31\xba\x77\xb9\x4d\x99\x44\xa5\xdc\x63\xfe\x19\x7d\x05\x00\x00\xff\xff\x16\x90\x7b\x4e\x11\x01\x00\x00")

func type_admin_graphql() ([]byte, error) {
	return bindata_read(
		_type_admin_graphql,
		"type/admin.graphql",
	)
}

var _type_auth_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\xa9\x2c\x48\x55\x70\x2c\x2d\xc9\x08\xc9\xcf\x4e\xcd\x53\xa8\xe6\x52\x50\x28\x01\xb1\xac\x14\x82\x4b\x8a\x32\xf3\xd2\x15\xb9\x6a\xb9\x00\x01\x00\x00\xff\xff\xa3\x33\x16\xdc\x24\x00\x00\x00")

func type_auth_graphql() ([]byte, error) {
	return bindata_read(
		_type_auth_graphql,
		"type/auth.graphql",
	)
}

var _type_company_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8e\x31\xab\xc2\x40\x10\x84\xfb\xfd\x15\x93\xee\x3d\x78\xbf\xe0\xba\x87\x20\x58\x08\x8a\xa5\x58\x2c\x66\x72\x1c\xe4\x36\xc7\xe5\x52\x04\xc9\x7f\x97\x33\x2a\xe9\x76\x66\x67\xf7\x9b\x32\x27\x62\x37\xc4\xa4\x36\xe3\x21\xc0\x34\x85\xd6\xe1\x52\x72\x30\xdf\x08\x70\xcf\xd4\xc2\xf6\xbf\x7c\x4c\x01\x4c\x23\xb7\x99\xa8\xa6\x9e\x79\xfc\x49\xea\xe9\x70\x52\xcf\x3f\x74\xa1\x2f\xcc\x0e\xc7\x75\xb9\x7f\xc9\xdf\xaf\xae\xa1\x46\x16\x91\x6d\x83\x6a\x22\xc4\xd4\x33\xd2\xca\x58\x3f\x05\xab\xf8\xf3\xc4\xbc\xf6\x63\xeb\x39\x3a\x5c\xdf\x17\x37\x01\x2a\xf5\x60\xdd\xb0\x92\xeb\x24\x8b\x3c\x03\x00\x00\xff\xff\xa0\x80\x61\xb5\xd9\x00\x00\x00")

func type_company_graphql() ([]byte, error) {
	return bindata_read(
		_type_company_graphql,
		"type/company.graphql",
	)
}

var _type_users_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x91\xc1\x4a\xc3\x40\x10\x86\xef\x79\x8a\x29\xbd\x54\xf0\x09\x72\x93\x16\x21\xa0\x52\xd1\x9e\xc4\xc3\x98\x4c\xd6\x91\xcd\x6e\xd8\x9d\x20\x45\xfa\xee\xb2\xdb\xa4\x2e\xdd\x14\xc1\x93\xb7\xcd\x9f\xf9\x67\xfe\xf9\x86\x8d\x90\x6b\xb1\x26\xd8\x79\x72\xf0\x55\x00\x0c\x03\x37\x25\x3c\x89\x63\xa3\x16\x05\x00\x75\xc8\x3a\x15\x5a\x76\x5e\x1e\xb0\xa3\x54\xd4\x98\x6b\x42\x9a\xfa\x77\x6b\xb2\xc2\x3b\xab\xd8\xa4\xe2\x87\x7d\x7b\x66\xd1\x49\xe1\xa1\x28\xd8\xf4\x83\xc0\x3d\x1a\x54\xe4\xa2\x25\xe6\xcb\xf2\xf4\xe8\xfd\xa7\x75\xcd\x8c\xf9\xa6\x69\x46\x7f\x15\xbf\x83\xbf\xb6\x5d\x8f\x66\xbf\xdb\x55\x9b\x3f\x6d\x95\xcd\xcf\xc3\x5f\x58\x7d\x36\xa8\xec\x7b\x9a\x96\x04\xee\x7a\x4d\x1d\x19\xf1\xff\xed\x1e\x27\x6e\x25\xac\x8f\x8f\x2c\xfd\x16\x15\xa5\x1b\x6c\x51\xb1\x41\xa1\xe6\x71\x20\xb7\x3f\xde\xae\x51\xe4\x4b\x78\x19\x1d\xaf\x11\x8a\xa2\xca\xb4\xb6\x0c\xf5\xf1\x15\xfa\x2e\x21\x76\xde\x90\x26\x85\x42\x33\x60\x96\x30\xa1\x09\x97\x5c\xc4\xef\x33\x34\x41\x9a\x81\x13\xe4\x1c\x4f\x50\x67\x00\x4d\xc5\x23\xa2\x0d\x0a\x45\x2d\x27\x14\xd4\xda\x0e\xce\x93\x5f\xd9\xb6\xf5\x24\x25\x54\x46\xae\x41\x73\xc7\xd3\xbb\x65\x2d\xe4\xca\xd3\x62\xeb\x68\xb8\x8d\xea\x55\x40\x1b\xfd\x53\x2f\x23\xa3\xb0\xfa\xc5\x57\x19\x39\x7a\xc8\x09\xb7\x5c\xa3\x5c\x0e\x11\xc6\x24\x65\xc9\xac\xd4\x9c\x0d\xfc\xf9\x79\x36\xf5\x50\x7c\x07\x00\x00\xff\xff\x46\x13\x1a\x47\x45\x04\x00\x00")

func type_users_graphql() ([]byte, error) {
	return bindata_read(
		_type_users_graphql,
		"type/users.graphql",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"mutation.graphql": mutation_graphql,
	"query.graphql": query_graphql,
	"schema.graphql": schema_graphql,
	"type/admin.graphql": type_admin_graphql,
	"type/auth.graphql": type_auth_graphql,
	"type/company.graphql": type_company_graphql,
	"type/users.graphql": type_users_graphql,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"mutation.graphql": &_bintree_t{mutation_graphql, map[string]*_bintree_t{
	}},
	"query.graphql": &_bintree_t{query_graphql, map[string]*_bintree_t{
	}},
	"schema.graphql": &_bintree_t{schema_graphql, map[string]*_bintree_t{
	}},
	"type": &_bintree_t{nil, map[string]*_bintree_t{
		"admin.graphql": &_bintree_t{type_admin_graphql, map[string]*_bintree_t{
		}},
		"auth.graphql": &_bintree_t{type_auth_graphql, map[string]*_bintree_t{
		}},
		"company.graphql": &_bintree_t{type_company_graphql, map[string]*_bintree_t{
		}},
		"users.graphql": &_bintree_t{type_users_graphql, map[string]*_bintree_t{
		}},
	}},
}}
