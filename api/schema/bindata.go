package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _mutation_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x53\xd1\x8e\xdb\x20\x10\x7c\xe7\x2b\x36\xea\x4b\xfb\x72\x1f\xe0\xb7\x6b\xa2\x4a\x91\x2e\x6a\x75\xb1\x3f\x60\x6b\xef\x39\xa8\x18\xa8\x59\xa2\x5a\x55\xfe\xfd\x64\x42\x30\xc4\xc9\x23\xc3\xcc\x78\x76\xd6\x7c\x81\xc1\x33\xb2\x34\xda\x41\x8b\x1a\x06\xd3\xc9\x8f\x09\xf8\x44\xd0\xfd\x7e\x01\xfa\x47\xad\x67\xea\xc0\xd1\x5f\x4f\x9a\x25\x2a\x35\xbd\x08\x21\xb5\xf5\x0c\x8d\x55\x06\xbb\x1f\x52\xd1\x81\x18\xe1\xbf\x00\xf8\x90\x8a\xea\xc9\x52\x05\x47\x1e\xa5\xee\x37\x02\xa0\x35\x9a\x49\xf3\x1b\xe9\x9e\x4f\x15\xec\x35\x6f\xc4\x45\x08\x9e\x2c\x65\x16\xef\xe4\x6c\xb0\xf0\xa3\xca\xd5\xce\xb7\x2d\x39\x57\x9b\x3f\xa4\x17\xfc\xb2\xce\x70\xbc\x12\x83\xc7\x53\x51\xf8\xe8\x21\x8e\x1c\xa8\xd8\x0d\x52\xbf\x99\x5e\xea\xaf\xc1\xb1\x82\xd7\x84\x6c\xbe\x55\xf0\xea\xf9\x14\x7c\x04\xc0\x80\x1a\x7b\x1a\x0b\xf6\x21\xc3\xee\xf9\xed\x48\xc8\x14\x19\x37\xc1\x36\x07\xf7\x33\x36\xcb\xe2\x79\x9e\xdf\x76\x6b\x51\x93\x83\x0f\x44\x31\xd9\xaf\xd1\xcc\x1b\xb8\x96\xf2\x3e\xef\xcc\xf1\x62\x91\x6f\x6b\x96\x97\xe5\x3f\x71\x89\xb5\xae\x5d\xe2\x45\x99\xa3\x23\x45\xab\xf0\xbb\x1c\x4c\xe1\xbf\x1b\xa3\x08\xf5\x26\xf5\x14\x7a\x2f\x5b\x0a\x50\x52\x84\x53\x6a\xa8\xa0\x37\x0b\xb4\xa2\x5f\x33\x15\xf4\xdd\x02\x3d\xcf\xb3\x35\x83\x45\x3d\x95\x89\x22\x98\x54\xf1\x7c\x2f\xba\x75\x2f\x00\xe6\x07\x10\xb0\x87\x16\x81\x10\x7b\x7f\xf8\x6f\x04\xc2\x48\x2d\x5a\x6e\x4f\x98\xbf\x8c\x32\x33\x5a\x3b\x9a\x73\x0a\xed\xbd\xec\x2a\x68\x9a\xfd\xae\x4c\xe9\xf0\x4c\x3f\xb5\x92\x9a\xb6\xc6\x8f\x8e\x6e\xd3\x1d\xef\xf0\x34\x60\x0e\x46\xfd\x56\xa1\x73\xa3\x31\xc3\xda\xe2\xee\x6a\xa9\xa9\xc4\x53\x5d\x35\xf6\x65\xbf\x35\xf6\x49\x54\x63\x2f\x2e\xe2\x33\x00\x00\xff\xff\x68\x99\x55\x17\xa3\x04\x00\x00")

func mutation_graphql() ([]byte, error) {
	return bindata_read(
		_mutation_graphql,
		"mutation.graphql",
	)
}

var _query_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x53\xcd\x6e\xdb\x3c\x10\xbc\xf3\x29\xc6\xc8\xc5\x06\x82\xef\x01\x78\x4b\xf2\x21\x80\x0f\x6d\x53\xd4\x79\x00\x5a\x5a\x49\xdb\xf0\x47\x25\xa9\x36\x46\x91\x77\x2f\x48\x59\x12\xe5\xb8\x39\xf4\x66\x69\x67\x76\x66\x56\xe3\x1b\xfc\x18\xc8\x33\x05\x84\xce\x0d\xba\x86\x75\x11\xc6\xd5\xdc\x9c\x10\x3b\x42\x7d\xfc\x0f\xf4\x4a\xd5\x10\xa9\x06\x5b\xf4\xca\x7b\xa5\x35\x69\x11\x4f\x3d\xe1\x49\xb5\xb4\xb7\x8d\xc3\x6f\x01\x44\x17\x95\x96\xd8\xdb\xb8\xc1\x0d\x3e\x0f\xe6\x48\x1e\xae\x41\xaf\x5a\x0a\x50\x4d\x24\x8f\xd8\x71\x80\xb3\x24\x00\xd7\x34\x81\xe2\x8c\x3f\x74\x74\x7e\x95\x38\x19\x97\x88\x68\xbc\x33\xd9\x4a\x88\xca\x47\x01\x68\x36\xbc\xa6\x19\xf5\x9a\xec\xff\xb2\xe8\xc9\x67\x96\x00\x5a\xfe\x49\xf6\x8a\x1b\x8e\x64\xc2\x38\x15\x6f\x42\xb0\xed\x87\x98\x73\xe4\x0c\x85\xa9\x95\xd4\x02\xfd\xa4\xac\x6a\xc9\x3f\xb2\x4e\x79\x12\xc7\x2a\x43\x12\xdf\xa2\x67\xdb\x0a\x80\x8c\x62\x5d\x3c\x7f\x77\xc7\x03\x47\x5d\x42\x86\x81\x6b\x89\xe7\xe7\xfd\xff\xe9\x6c\xa4\xa9\xef\x9c\x5d\x00\xb3\xd6\x83\x1b\x7c\xc8\x07\xfe\xbb\x9c\xaa\x2a\x0a\xe1\x70\xea\x49\xe2\x6e\xfe\x2d\x80\xa3\xaa\x5e\x5a\xef\x06\x5b\x3f\x74\x54\xbd\x48\xdc\x3b\xa7\x49\x59\x01\xf4\x9e\x2b\x92\x78\xd4\x4e\x15\xc9\xbe\x58\xcd\x96\x46\xcd\x42\xaf\x9a\x4d\xc8\x77\x86\x0a\xab\x5a\x85\xe0\x9d\x33\xff\xca\x77\xa6\x57\xf6\x54\xf0\x56\x47\x5a\x85\xce\xa4\x48\xbe\x51\x55\xae\x20\x5b\x15\xa9\xfe\x3a\x90\x3f\x65\x66\x7f\x6e\xa5\x9c\xfb\x59\x84\xf4\x35\xf9\xfb\x11\xa7\x42\x45\xb6\x66\xdb\x96\xb7\x69\x98\x74\x3d\x49\x6d\x12\x31\x37\x7d\xd9\xce\x79\xf3\x34\x07\x54\x6d\xd8\x6e\x17\xb7\x9b\x9d\xc4\x5d\x7a\x37\xcd\xc2\x36\x19\x1a\xcd\x4c\xb3\xf4\x3b\x91\xcd\xd8\xa6\x82\xbe\x93\x53\xc5\x96\x71\xb9\xe1\x16\x4d\xbe\x91\x5c\x37\xf1\x16\x6e\x4c\x26\xa7\x88\xcb\xa2\xa7\xf1\x1f\x51\x8d\x27\xbe\xb0\x7a\x3e\xfc\x3c\x67\xba\xae\xb6\xfa\x40\x57\xd5\xce\x88\xb3\x9a\x2b\xda\x14\xb6\x02\x18\xbf\xcb\xb8\x36\x3f\x4e\x9b\xdf\xf7\x2e\x8f\x2f\x15\x04\xb0\x5b\x83\xa7\x5c\xeb\xea\x7d\x2c\x76\xb5\xa7\x1f\xe8\x5d\xe0\xf3\xbe\x37\xf1\x27\x00\x00\xff\xff\x34\x13\x0e\xff\x37\x05\x00\x00")

func query_graphql() ([]byte, error) {
	return bindata_read(
		_query_graphql,
		"query.graphql",
	)
}

var _schema_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x4e\x4e\xcc\x49\x2c\x52\x08\x0d\xf5\x74\xe1\x82\xb2\x43\x32\x73\x53\xb9\xb8\x8a\x93\x33\x52\x73\x13\x15\xaa\xb9\x14\x14\x0a\x4b\x53\x8b\x2a\xad\x14\x02\x41\x14\x97\x82\x42\x6e\x69\x49\x62\x49\x66\x7e\x9e\x95\x82\x2f\x94\xc5\x55\xcb\x05\x08\x00\x00\xff\xff\xc2\x82\x45\xdf\x48\x00\x00\x00")

func schema_graphql() ([]byte, error) {
	return bindata_read(
		_schema_graphql,
		"schema.graphql",
	)
}

var _type_admin_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x90\xcd\x8a\x83\x30\x14\x85\xf7\x79\x8a\x3b\xaf\x91\xdd\x30\x6e\x84\x61\x70\x28\xae\x4a\x17\x17\x72\x0d\x17\x92\x18\xf2\x43\x11\xf1\xdd\x8b\xb1\x60\xd5\x52\xda\x5d\x38\x9c\x7c\xdf\x49\xd2\xe0\x09\xbe\x95\x65\x07\xa3\x00\xc8\x99\x95\x84\xb6\xad\xab\x2f\x01\x40\x16\xd9\x48\x38\xa5\xc0\x4e\xcf\x41\xc7\x21\xa6\x3f\xb4\xf4\x18\x1a\xdc\x67\x93\x10\x2b\xb7\x41\x4d\xc0\xd6\x1b\xb2\xe4\x52\x84\x06\x35\x3b\x4c\xa4\xfe\x33\x85\xa1\x58\x49\x69\x8a\x12\xce\xa5\x7f\x11\x00\x1e\x35\xd5\xae\xeb\xe5\xdc\x2e\xa7\x99\xc9\xce\xe7\xb4\x40\x7f\x7b\x7d\x5f\x7c\xd8\xe8\x31\xc6\x6b\x1f\xd4\x66\xce\x72\xf5\x27\x10\x26\x2a\x80\xba\x04\xe3\xfb\x6f\xfa\xcc\xd4\x7a\x75\x34\x6d\x3f\xf7\xe0\x7d\xa2\xdd\x5b\x57\x41\x45\x86\x5e\x0a\x26\x71\x0b\x00\x00\xff\xff\x68\xfa\x3e\xad\xdb\x01\x00\x00")

func type_admin_graphql() ([]byte, error) {
	return bindata_read(
		_type_admin_graphql,
		"type/admin.graphql",
	)
}

var _type_auth_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\xa9\x2c\x48\x55\x70\x2c\x2d\xc9\x08\xc9\xcf\x4e\xcd\x53\xa8\xe6\x52\x50\x28\x01\xb1\xac\x14\x82\x4b\x8a\x32\xf3\xd2\x15\xb9\x6a\xb9\x00\x01\x00\x00\xff\xff\xa3\x33\x16\xdc\x24\x00\x00\x00")

func type_auth_graphql() ([]byte, error) {
	return bindata_read(
		_type_auth_graphql,
		"type/auth.graphql",
	)
}

var _type_company_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x50\x3d\x6b\x03\x31\x0c\xdd\xfd\x2b\x5e\xb6\x16\xb2\xb4\xa3\xb7\xe4\x4a\xe1\xa0\x9f\x94\x4c\xa5\x83\x88\x15\x63\xb8\x93\x8d\xed\x2b\x1c\xa1\xff\xbd\xd8\xbe\x94\xa3\xdd\xbb\x3d\x3d\x3d\x49\x4f\x2f\xcf\x81\xd1\xf9\x31\x90\xcc\x38\x2b\x80\x42\x88\xfe\x93\x8d\xc6\xde\xfb\x81\x49\x14\x30\x4d\xce\x68\x1c\x0e\xfd\xdd\x46\x01\xc7\xc8\x94\xd9\xec\xb2\xc6\x5b\x8e\x4e\xac\x02\x84\x46\xbe\x94\x45\x33\x92\x90\xe5\x98\xae\x02\x59\xd6\x78\x21\xcb\x5b\x9c\xdc\x90\x39\x6a\x3c\xb6\xe6\x7d\x2d\xb7\xf0\xd1\x70\xdc\xcf\x1a\xcf\x0d\x5c\xff\x28\xca\x58\xd9\x46\xc6\x44\x4e\x49\x63\xd7\xc0\x46\x7d\x29\x55\x9d\x2f\x44\x73\xde\xf0\x83\x13\xbe\x59\x7b\x59\xf1\xb7\x6b\xfe\xe8\x27\xc9\xf3\x9a\x09\x3e\xe5\xce\x1b\xfe\xa3\x8a\x2b\xd9\xe5\xf4\x12\x5a\xf1\x08\x37\x86\x81\x47\x96\x9c\xca\xab\x4e\x4a\x3e\xaf\x13\xc7\x16\x29\x1b\xcb\x49\xe3\x7d\x99\xf8\x28\x97\xc8\x72\x2f\x27\xdf\xa2\x29\xa8\xec\x75\x12\xa6\x8c\xae\xe6\xbb\x88\xfb\x4a\x9d\xab\x91\x4a\x3c\xfd\x4a\xfa\xdf\xbe\xfe\x0e\x00\x00\xff\xff\x10\xb8\xf9\xd1\x2a\x02\x00\x00")

func type_company_graphql() ([]byte, error) {
	return bindata_read(
		_type_company_graphql,
		"type/company.graphql",
	)
}

var _type_course_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x55\x4d\x6b\x1b\x3b\x14\xdd\xcf\xaf\xb8\xb6\x37\xef\x41\xbc\x48\x6c\x87\xf7\x66\x97\x3a\x2e\x18\x1a\xe2\xc6\x63\x28\x04\x2f\x6e\x35\xd7\x13\x91\x19\x69\x90\xee\x94\x98\x90\xff\x5e\x24\xd9\xd6\x78\xf2\xd1\x36\x74\x53\x8a\x8c\xa5\x91\xee\x39\x3a\xf7\x43\x12\xa9\xa6\x82\x0b\x21\xc8\xda\x6c\x5b\x13\x3c\x26\x00\x86\x2c\x1b\x29\x98\xf2\x04\x40\xd7\xa4\x92\xa7\x24\xf1\x86\x4b\x36\x8d\xe0\xc6\xd0\xac\xa4\x8a\x14\x7b\xf3\x4a\xe7\x4d\x49\x09\x00\x93\xe5\x04\xa0\x24\x6b\x75\xc4\x5c\xf9\xe5\x36\xe0\x99\x1d\xbb\x9d\xa7\xba\x31\x96\xe6\x6a\xa3\xbd\x91\xc2\x8a\x52\xb7\xa1\x54\x45\x02\xf0\x15\xc5\x7d\x61\x74\xa3\xf2\xe9\x1d\x89\xfb\x14\x3e\x68\x5d\x12\xaa\x04\xa0\x36\x52\x50\x0a\x1f\x4b\x8d\x8e\x56\xe8\x52\x9b\x16\x92\x1e\x04\x99\x9a\x5b\x33\x52\xb1\xd1\x79\x23\x58\x6a\xd5\x9a\xb6\x35\x09\xb9\x91\x22\x23\x53\xd9\xc3\xfc\x5e\xde\xb5\x2a\xa5\xa2\x20\xd2\x0b\x6c\x1a\x99\xa7\xb0\x5a\xcd\x2f\x7b\x9e\x73\xa3\xd3\x96\x0f\xbd\x17\x81\x0b\x2c\x08\x64\x55\x87\x60\x58\x58\x60\x21\x15\x32\xe5\x9f\x1b\x32\x5b\x4f\x4b\x79\x41\x36\x85\xdb\x36\x6c\xed\xbc\xc4\xc2\x13\xa7\x0e\xe4\x47\x31\x72\x25\x5a\x6b\xb4\xae\xde\xa1\xae\x83\xfd\x05\x81\x1d\xe4\xeb\x1a\xa5\xaa\x1b\x86\x25\x7e\xa3\x0e\x64\xee\x17\x8e\xd5\x3e\xcf\xbc\x40\xa6\x42\x9b\xad\x5b\x3d\xd8\xfc\x74\x52\xdf\xa8\x1b\x3c\x54\x7d\xda\x3a\x01\x3f\x2e\x28\xc6\xc2\xf9\xef\x63\xbb\x7e\xb5\x6e\xdc\xd6\x4a\x91\x99\x57\x58\xd0\xb2\xf1\xfc\x6d\x92\x86\xb5\x89\x2e\xc1\x20\x74\x7a\x03\x7c\x47\x90\xb9\x55\xf8\x47\xec\xe3\x05\x22\x64\x56\xab\x72\xfb\xaf\x3b\x72\xf8\xb0\x40\xc3\x52\xc8\x1a\x15\xdb\x14\xe6\xca\x29\xb5\x8c\x86\x2f\x91\x29\x85\x4c\x56\xce\x15\x52\xf9\xd1\x77\xa9\x05\x1e\x45\xe8\x28\x3f\xed\x9a\xfb\x9b\x93\x63\xf7\xd7\x9c\x2b\xf3\x10\x0d\xa6\xaa\xb7\x86\x81\x3b\xcd\x5b\xd8\x68\xe3\x52\x21\x15\xed\x12\x63\x63\x1c\xa3\x7d\xb8\xeb\xbc\x07\xdd\x7b\xb3\xf7\xfc\x84\x32\x39\x7d\xb7\xe1\xb6\x0c\xdb\xf5\x22\x6b\x9c\x6e\xb1\x1e\xdd\xac\x5d\xca\x28\xc8\x10\x32\x65\x58\xc4\x8c\xb6\x93\xd8\xeb\x06\x31\xde\x0d\x19\x16\x6f\x17\xc0\x8b\xd8\x01\xdc\xc2\xec\xcb\xc5\xd5\xe2\xd3\x0c\xa6\xd7\xab\x9b\xe5\x0c\x96\xd9\xcd\x6a\x9a\xad\x6e\x66\xc9\x00\x00\x1e\x83\xfa\x7e\x78\x37\xfa\x27\x3b\xfe\xfe\x68\x3c\x1a\x8f\x86\xed\xff\xb1\xef\xfa\x4f\x27\x01\x07\x1d\xa0\x9f\xdd\xcb\xeb\x9f\x9e\x8d\xdc\x6f\xb8\xeb\xcf\x76\x03\xdf\x8d\x0e\xc6\xfb\x38\xef\x3e\xa3\x9a\xf0\x1a\x45\x35\xa7\x67\xbe\x0d\x43\xe7\xd8\x0e\x5f\x7b\x41\x6d\xb8\x7b\xd3\x22\xf8\xbf\xff\x43\x1b\x4e\xce\x7d\x1b\x4e\xce\x0f\x83\xc9\xf9\x24\x12\xac\x7d\xff\x5b\x1c\x84\x01\xc8\x0d\x48\x0b\x4c\x55\x5d\x22\x13\x54\x78\x4f\x80\x20\x74\xbd\xfd\x13\xbc\x7f\x45\xca\xc8\x17\xc1\x38\x94\x84\x1b\x4c\x26\x63\xdf\x86\xfe\xbf\xdf\x81\xbf\x43\xca\x3a\xf9\x1e\x00\x00\xff\xff\x8b\x06\xa6\xba\x06\x09\x00\x00")

func type_course_graphql() ([]byte, error) {
	return bindata_read(
		_type_course_graphql,
		"type/course.graphql",
	)
}

var _type_users_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x52\xc1\xae\xd3\x30\x10\xbc\xe7\x2b\x16\xf5\xf2\x90\xf8\x82\xdc\x50\xab\x27\x45\x02\xf4\x10\xe4\x84\x38\x98\x64\xed\xb7\xc8\x5e\x47\xf6\x46\x55\x85\xfa\xef\xc8\x4e\xd2\xa6\x8d\x0b\xe2\xc6\x6d\x33\xd9\xd9\xdd\x99\x31\xb1\x60\xd0\xaa\x43\x68\x23\x06\xf8\x55\x01\x8c\x23\xf5\x35\xb4\x6d\x73\x78\x53\x01\x74\x01\x95\x60\xff\x5e\x6a\xf8\x22\x81\xd8\x54\x00\xe8\x14\xd9\xe5\x3b\x35\x69\x0a\x51\x3e\x29\x87\x6b\xd0\xaa\x2d\x26\x68\x71\x78\xf5\xbc\x69\xfc\xe0\x0d\xf1\x1a\xfc\xe9\x7f\x7c\x25\xb1\xab\xc6\x73\x55\x11\x0f\xa3\xc0\x47\xc5\xca\x60\xc8\x94\x7c\xf1\xe6\x9e\x41\xc5\x78\xf4\xa1\x2f\x90\xf7\x59\xcf\x3c\xa2\xc9\x50\x1a\xd1\x79\x37\x28\x3e\x25\xd5\x93\x76\xd8\xc1\xb3\x0f\xa0\x7a\x47\x1c\xe1\xf8\x8a\x3c\x59\x41\x6c\xc0\x4d\xec\x08\x5e\x43\x4f\x5a\x63\x40\x96\x79\x04\x61\xfc\x17\x43\x36\xa7\x6f\x75\x3f\x70\xed\x0f\x1a\x0f\x68\xb1\xa0\x71\x1d\xec\xb9\xaa\xe4\x34\xe0\xe2\x25\x90\x1b\x2c\x3a\x64\x89\xff\xff\x43\xb8\xa4\x55\xc3\x7e\x2a\xb2\x1f\xc1\x6b\xb2\xd8\x38\x65\xb0\x0d\x97\xab\xae\xae\xb4\x43\x5f\x4a\xfe\x56\xe5\x8d\xa2\x92\xa0\x82\x9e\x92\x9c\xc2\xe1\xf7\x9e\xbf\x28\x83\x6b\xdf\x5f\x94\x21\x4e\x16\x7f\x1e\x31\x9c\xa6\x87\xdd\x1b\x8c\x35\x7c\x9b\x19\xdf\x73\xec\x06\x1b\xd6\xbe\x4e\xfd\xb9\x4a\x73\x77\x90\x27\xa7\xe0\x8d\x12\x2c\xc4\xb9\x83\x5b\xa9\xe9\xfb\x2e\xbe\x04\x15\x02\x4c\xf0\x36\xc2\x84\x16\x42\x5c\x9a\xe7\x18\x0f\x4a\x30\x63\xdb\x14\x13\xda\xf9\x31\x44\x8c\x4f\x5e\xeb\x88\x52\x43\xc3\xf2\x0e\x2c\x39\x5a\x6a\x4d\x56\x30\xd4\x17\x61\xfb\x4c\x78\xce\xe8\xdb\x14\x7f\xe6\x2f\xb3\x58\x66\xe0\xe9\x2f\xbc\x86\x65\xe2\x60\x10\xd2\xd4\x29\x79\x7c\x44\x5a\xb3\x6a\x5b\xed\x5a\x93\x37\x0b\xaf\x3f\xef\xb6\x9e\xab\xdf\x01\x00\x00\xff\xff\x93\xe1\xac\xe7\x74\x05\x00\x00")

func type_users_graphql() ([]byte, error) {
	return bindata_read(
		_type_users_graphql,
		"type/users.graphql",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"mutation.graphql": mutation_graphql,
	"query.graphql": query_graphql,
	"schema.graphql": schema_graphql,
	"type/admin.graphql": type_admin_graphql,
	"type/auth.graphql": type_auth_graphql,
	"type/company.graphql": type_company_graphql,
	"type/course.graphql": type_course_graphql,
	"type/users.graphql": type_users_graphql,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"mutation.graphql": &_bintree_t{mutation_graphql, map[string]*_bintree_t{
	}},
	"query.graphql": &_bintree_t{query_graphql, map[string]*_bintree_t{
	}},
	"schema.graphql": &_bintree_t{schema_graphql, map[string]*_bintree_t{
	}},
	"type": &_bintree_t{nil, map[string]*_bintree_t{
		"admin.graphql": &_bintree_t{type_admin_graphql, map[string]*_bintree_t{
		}},
		"auth.graphql": &_bintree_t{type_auth_graphql, map[string]*_bintree_t{
		}},
		"company.graphql": &_bintree_t{type_company_graphql, map[string]*_bintree_t{
		}},
		"course.graphql": &_bintree_t{type_course_graphql, map[string]*_bintree_t{
		}},
		"users.graphql": &_bintree_t{type_users_graphql, map[string]*_bintree_t{
		}},
	}},
}}
