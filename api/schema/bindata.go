package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _mutation_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x56\x4d\x8f\xdb\x36\x10\xbd\xeb\x57\x8c\xe1\xcb\xe6\xd0\xf4\xee\x5b\x6a\x23\x80\x81\x5d\xd8\x8d\xa5\x1f\x30\x11\xc7\x32\x11\x8a\x54\xf9\xb1\xa9\x51\xec\x7f\x2f\x48\x49\xfc\xb2\x9b\x4b\x8f\x7c\x9a\xf7\xe6\x71\x86\x33\xf6\x16\x46\x67\xd1\x72\x25\x0d\xf4\x28\x61\x54\x8c\x5f\xef\x60\x6f\x04\xec\xfb\x67\xa0\xbf\xa9\x77\x96\x18\x18\xfa\xcb\x91\xb4\x1c\x85\xb8\x7f\x6e\x1a\x2e\x27\x67\xa1\x9b\x84\x42\xf6\x95\x0b\x7a\x23\x8b\xf0\x4f\x03\x70\xe5\x82\xda\xfb\x44\x3b\xb8\x58\xcd\xe5\xb0\x69\x00\x7a\x25\x2d\x49\xfb\x4a\x72\xb0\xb7\x1d\x1c\xa5\xdd\x34\x1f\x4d\x63\xef\x13\x65\x12\xdf\xc8\x4c\x41\xc2\x69\x91\xb3\x8d\xeb\x7b\x32\xa6\x55\x3f\x48\x26\xfc\xe3\xd1\xc3\x65\x0e\x0c\x1a\xff\x49\x0a\x49\xdf\x96\x2b\x87\x50\x64\x23\x97\xaf\x6a\xe0\xf2\x25\x28\xee\xe0\x4b\x44\x36\x9f\x76\xf0\xc5\xd9\x5b\xd0\x69\x00\x46\x94\x38\x90\x2e\xa2\xdf\x32\xac\x8e\x67\x24\x68\x40\x4b\x05\xe1\x90\x83\x25\xc3\x17\x4b\x13\x5a\x5a\x44\x57\xca\x3e\x07\x8f\x1e\xf3\xbc\xe5\xec\x4b\x36\xb1\x47\x52\x97\x83\x4f\x48\x93\x56\xbe\x5b\xc7\x11\x07\x9a\xab\xf8\xcd\x37\xd9\xd8\x24\x90\xb7\xd7\x93\xcb\x6e\xd5\x89\xcf\x99\xe0\xa3\xc6\xd2\x9e\xd2\x83\x2f\xd0\x83\xf1\x43\x0e\x46\xe3\x7f\x28\x25\x08\xe5\x26\x15\x29\xf4\xa9\x2c\x51\x80\x22\x25\x9c\xa2\xcb\x22\xbc\x4b\xd0\x43\xf8\x6c\xaa\x08\x3f\x24\xe8\x17\x86\xd6\xce\x96\x9e\x56\x34\x12\x4b\xd8\x57\x52\x49\x43\x0d\xc0\x76\x71\xba\x7e\x4a\xca\x7b\x35\x4e\x28\xef\xa5\xf0\x02\x26\xdd\xf9\x1c\x2f\x5c\x91\xba\x1c\x7c\x42\xda\x2e\x17\x4f\x48\x91\x7b\x7d\x1c\x0d\x80\x1f\xe9\x80\x3d\x75\x12\x02\x96\x49\x79\xfa\x74\x43\x80\xa6\x1e\x27\xdb\xdf\x30\x9f\xf5\xbc\xaa\x00\x38\x4d\x5a\xbd\xc7\x6b\x38\xc7\xd9\x0e\xba\xee\x78\xc8\x7d\xfb\x9d\xe3\xc4\x95\x8b\x33\x49\xc6\xe5\x70\xd2\x8c\xf4\x4b\x2f\x38\x49\x7b\xa1\x5e\x93\x8d\x09\x4a\x75\x83\xef\x74\x92\x82\x4b\xda\x2b\xa7\x4d\x6c\xda\xa5\xc2\xb3\x4a\xf9\x23\x6c\xa1\x3d\x1d\x4e\x80\x42\xa8\x9f\x20\xb8\xfc\xb1\x68\xed\x05\x1a\xa3\x95\x1a\x1f\xe5\xaa\x4f\x4f\x14\x15\x53\x80\x8c\x81\x75\x56\x69\xb0\x0a\xfa\xf0\xc9\x4f\xa9\xd3\xfd\x0d\xcd\x62\xc6\xac\xb2\xe7\x12\x8e\x92\x15\x9e\x3d\xae\xb5\xb9\xb9\xb9\x43\x86\xfd\xe2\x5d\xb7\x38\x94\x2f\xaf\xc5\x21\x86\xb7\x38\xa4\xa7\x82\x96\x06\xa5\xeb\x77\xba\xa0\xe9\xde\x0b\x90\x32\xbc\x92\x31\xaa\x9a\xe5\x19\x8b\xa4\xf9\x18\x19\x47\xc9\xf8\x3b\x67\x0e\x45\xc9\x4a\x78\x35\x6f\xe9\x43\x56\x14\xe3\xbe\x8f\xdc\xb6\xd9\xd2\xbb\x44\x24\xf2\x13\x74\xc6\xbb\x5f\x67\xb0\x5d\x30\x03\x18\x77\xfc\xef\x3c\x26\x30\x80\xd2\xfc\x24\x6d\x7c\x27\x11\x2c\x19\x9b\x6a\x99\xe5\xda\x47\xa4\xf2\x9a\xe5\x8a\xd3\xdc\x16\x9b\x99\xd5\xc4\x04\xad\x44\x3f\x41\xc1\xc6\xff\xda\xf0\xb3\xeb\x3f\x3d\x8b\xd7\x1d\x5a\xd1\xca\xfd\x0a\xd7\x37\xa8\x45\xba\x02\xad\x6e\xf2\x28\xb2\xee\xa7\xf5\x4b\xf6\x6b\xa9\x98\x13\xd5\xd6\x9d\xb1\xca\xd9\x0c\xd6\xbe\x4a\x7a\x97\x61\x95\xa7\x92\x1e\x2c\x2d\x4d\xf5\x63\x9b\x2d\xf0\xf9\x1c\x00\x43\x76\x5d\xe7\xd9\x1a\x18\x27\x41\xe1\x1f\xc8\x6f\x3e\xc0\x00\xbf\x66\x2f\x09\x26\x34\x86\x18\x28\x0d\x57\xe4\x82\x18\x20\xf4\x2b\x77\xd9\x0c\xf0\xf2\x55\x69\x08\x79\xcc\xa7\xe6\xa3\xf9\x37\x00\x00\xff\xff\x53\x9f\x0d\x42\xc8\x09\x00\x00")

func mutation_graphql() ([]byte, error) {
	return bindata_read(
		_mutation_graphql,
		"mutation.graphql",
	)
}

var _query_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x95\x4f\x6f\xe3\x36\x10\xc5\xef\xfc\x14\x2f\xc8\xc5\x01\x8c\xee\x5d\xb7\x64\x17\x5b\x04\xe8\xb6\x59\xd8\x39\x15\x45\x31\x96\x46\x12\x1b\x8a\x54\x49\x6a\x13\xb5\x9b\xef\x5e\x90\xd4\x5f\x57\x36\xda\x9b\xed\x79\x33\xbf\xc7\xf1\x0c\x79\x8b\x3f\x3b\xb6\x92\x1d\x5c\x6d\x3a\x55\x40\x1b\x8f\xc6\x14\xb2\xec\xe1\x6b\x46\x71\xfa\x01\xfc\xc6\x79\xe7\xb9\x80\xd4\x68\xc9\x5a\x52\x8a\x95\xf0\x7d\xcb\x78\xa2\x8a\x1f\x75\x69\xf0\xb7\x00\xbc\xf1\xa4\x32\x3c\x6a\x7f\x83\x5b\xfc\xdc\x35\x27\xb6\x30\x25\x5a\xaa\xd8\x81\x4a\xcf\x16\xbe\x96\x0e\x46\xb3\x00\x4c\x59\x3a\xf6\x93\xfe\x58\xf3\xf0\x53\xc8\x89\xba\x90\x88\xd2\x9a\x26\x5a\x71\x9e\xac\x17\x80\x92\x8d\x5c\xa7\x35\xf4\x16\xec\xbf\x6a\xb4\x6c\x63\x96\x00\x2a\xf9\x8d\xf5\x86\x1b\xe9\xb9\x71\x29\x2a\xde\x85\x90\xba\xed\x7c\x3c\x47\x3c\xc3\xc2\xd4\x0a\x35\x4b\xbf\x90\xa6\x8a\xed\x67\xa9\xc2\x79\x42\x8e\xa6\x86\x33\x1c\xbc\x95\xba\x12\x00\x37\x24\xd5\xe2\xfb\x1f\xe6\x74\x94\x5e\x2d\x25\x5d\x27\x8b\x0c\xcf\xcf\x8f\x9f\x42\xdb\x58\x71\x5b\x1b\x3d\x0b\x26\xd6\x27\x56\x5c\x91\xe7\x05\x6c\x9d\xea\xf3\xdf\xc3\xd7\xa9\xf0\xff\xb7\x72\x85\xfe\xd1\x74\xd6\xb1\xbb\x7c\x52\xca\x73\x76\xee\xd8\xb7\x9c\xe1\x7e\xfa\x2c\x80\x13\xe5\x2f\x95\x35\x9d\x2e\x3e\xd6\x9c\xbf\x64\x78\x30\x46\x31\x69\x01\xb4\x56\xe6\x9c\xe1\xb3\x32\x14\x3a\x4c\x4a\x99\x57\x2e\x8e\xe6\xa1\xeb\x27\x19\x6e\x71\xa8\xcd\x2b\x8c\x56\x3d\xf2\xe4\x02\xbe\x26\x8f\xde\x74\x20\xcb\xa0\xce\xd7\xc6\xca\xbf\xb8\x80\x37\x38\x19\xf3\xb2\xb4\xdd\xb4\xa4\xfb\x4b\x3d\x5b\x9d\x61\x4a\xfa\x89\x9d\x33\xfa\x3f\xe5\x00\x9e\x2a\x97\xe1\xd7\x10\xfc\x2d\x95\xf0\x6c\x4b\xca\xe3\x3e\x48\x4d\x9e\x8b\xaf\x1d\xdb\x3e\x16\x6a\x87\x15\xc9\xa6\x65\x99\xa9\xbf\xd8\x82\xed\x43\xd2\x91\xcb\x59\x17\x52\x57\xcb\x6e\x95\x92\xd5\xf4\xff\xde\x84\xc4\xb8\x76\x73\x75\x19\x2b\x8f\x71\x80\x8a\x46\xea\xdd\x6c\xfe\x2e\xc3\x7d\xf8\x69\x0c\xb9\x5d\xf0\x93\xbc\x8c\xb1\xf0\x39\xe4\x36\x69\xb2\xd7\xd9\xc3\xb8\xcf\xe1\x65\x85\x3d\xca\xd8\xb1\x6c\xbd\x15\x7b\x98\x74\xb0\x6c\x3c\xe1\x5c\xe8\x29\x6d\x67\x31\x4c\xf6\x02\x76\x73\x97\x4d\x03\xbf\x50\x6c\xf3\xd6\x9b\xb1\x09\x1c\x25\x03\x31\x4f\x63\x71\x06\x1c\x86\x65\x8a\xcb\x0b\xbc\xd5\x50\x6d\xe2\x06\xc5\x40\x53\x71\x9e\xce\x60\x69\xc8\xa6\xe8\x36\x69\x39\x89\x9b\xa0\x24\x98\x4e\x15\xb7\xe3\x82\xe7\xc5\xfe\x5e\xf0\x1c\x14\xab\x52\xbb\x60\x38\x5c\x9a\x53\x38\x2c\x83\x0b\xf5\x9e\x1d\x5b\x21\x10\x5e\x0c\xe7\xe5\x25\xff\x5f\x87\xe8\x15\xec\x28\x19\xc0\x63\xbd\xb3\x6e\x8d\xaa\x78\x49\x39\xbf\x4d\x3b\xb2\xf3\x57\x48\x21\x3c\x50\x42\x8d\x33\x42\x88\x0a\xe0\x36\x3c\x78\x9d\xba\xd0\xc5\x2f\x31\x76\x6d\xb0\xa3\x60\xa0\xa4\x4a\x67\x9c\xa4\x10\x11\xe5\x98\x6c\x5e\x1f\x7a\xa5\xe8\xd4\x6d\x13\xc7\x60\x62\xde\xe1\xc3\x07\xdc\x87\x6b\xd2\x0d\xc9\x52\x57\xa3\xe3\xfd\x38\x4a\x20\x5d\xa4\x36\x45\x4a\x4e\x9e\x2b\x13\xde\xf5\x9d\xe2\x6f\xac\x32\x3c\x59\xd9\x90\xed\xf1\xfd\x3b\x0e\x9c\x1b\x5d\x90\xed\xf7\xf0\xfc\xe6\xc7\xeb\x23\x82\x7e\x64\x1f\xee\xe4\xf4\x04\xf3\x30\x13\x8b\x72\xb1\x7a\xb8\xff\x76\xff\x4a\x4d\xe6\xc2\x4b\x3f\xe7\x07\xa5\x78\x17\xff\x04\x00\x00\xff\xff\x97\x8b\xd8\x02\x66\x08\x00\x00")

func query_graphql() ([]byte, error) {
	return bindata_read(
		_query_graphql,
		"query.graphql",
	)
}

var _schema_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x4e\x4e\xcc\x49\x2c\x52\x08\x0d\xf5\x74\xe1\x82\xb2\x43\x32\x73\x53\xb9\xb8\x8a\x93\x33\x52\x73\x13\x15\xaa\xb9\x14\x14\x0a\x4b\x53\x8b\x2a\xad\x14\x02\x41\x14\x97\x82\x42\x6e\x69\x49\x62\x49\x66\x7e\x9e\x95\x82\x2f\x94\xc5\x55\xcb\x05\x08\x00\x00\xff\xff\xc2\x82\x45\xdf\x48\x00\x00\x00")

func schema_graphql() ([]byte, error) {
	return bindata_read(
		_schema_graphql,
		"schema.graphql",
	)
}

var _type_admin_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x90\xcd\x8a\x83\x30\x14\x85\xf7\x79\x8a\x3b\xaf\x91\xdd\x30\x6e\x84\x61\x70\x28\xae\x4a\x17\x17\x72\x0d\x17\x92\x18\xf2\x43\x11\xf1\xdd\x8b\xb1\x60\xd5\x52\xda\x5d\x38\x9c\x7c\xdf\x49\xd2\xe0\x09\xbe\x95\x65\x07\xa3\x00\xc8\x99\x95\x84\xb6\xad\xab\x2f\x01\x40\x16\xd9\x48\x38\xa5\xc0\x4e\xcf\x41\xc7\x21\xa6\x3f\xb4\xf4\x18\x1a\xdc\x67\x93\x10\x2b\xb7\x41\x4d\xc0\xd6\x1b\xb2\xe4\x52\x84\x06\x35\x3b\x4c\xa4\xfe\x33\x85\xa1\x58\x49\x69\x8a\x12\xce\xa5\x7f\x11\x00\x1e\x35\xd5\xae\xeb\xe5\xdc\x2e\xa7\x99\xc9\xce\xe7\xb4\x40\x7f\x7b\x7d\x5f\x7c\xd8\xe8\x31\xc6\x6b\x1f\xd4\x66\xce\x72\xf5\x27\x10\x26\x2a\x80\xba\x04\xe3\xfb\x6f\xfa\xcc\xd4\x7a\x75\x34\x6d\x3f\xf7\xe0\x7d\xa2\xdd\x5b\x57\x41\x45\x86\x5e\x0a\x26\x71\x0b\x00\x00\xff\xff\x68\xfa\x3e\xad\xdb\x01\x00\x00")

func type_admin_graphql() ([]byte, error) {
	return bindata_read(
		_type_admin_graphql,
		"type/admin.graphql",
	)
}

var _type_auth_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\xa9\x2c\x48\x55\x70\x2c\x2d\xc9\x08\xc9\xcf\x4e\xcd\x53\xa8\xe6\x52\x50\x28\x01\xb1\xac\x14\x82\x4b\x8a\x32\xf3\xd2\x15\xb9\x6a\xb9\x00\x01\x00\x00\xff\xff\xa3\x33\x16\xdc\x24\x00\x00\x00")

func type_auth_graphql() ([]byte, error) {
	return bindata_read(
		_type_auth_graphql,
		"type/auth.graphql",
	)
}

var _type_company_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x92\x4f\x6b\x33\x21\x18\xc4\xef\x7e\x8a\xc9\xed\x7d\x21\x97\xf6\xe8\x2d\x49\x29\x04\xfa\x97\xb2\xa7\xd2\x83\xc4\x27\x22\xec\x3e\x8a\xba\x85\x25\xe4\xbb\x17\x75\x53\x96\xec\xe6\xda\xdb\x38\x8e\xfa\x73\x78\xd2\xe0\x09\x3b\xd7\x79\xc5\x03\x4e\x02\x50\xde\x07\xf7\x4d\x5a\x62\xeb\x5c\x4b\x8a\x05\xd0\xf7\x56\x4b\x34\xcd\xfe\x61\x25\x80\x43\x20\x95\x48\x6f\x92\xc4\x47\x0a\x96\x8d\x00\x58\x75\x74\x59\xe6\x4c\xa7\x58\x19\x0a\xf1\x9f\x57\x86\x24\xde\x94\xa1\x35\x8e\xb6\x4d\x14\x24\x9e\xeb\xe6\x63\x59\xae\xe1\x82\xa6\xb0\x1d\x24\x5e\xab\xf8\xff\x9b\xc8\xc7\xf2\x6d\x4a\xeb\x40\x31\x4a\x6c\xaa\x58\x89\xb3\x10\x85\x7c\x34\x2a\x79\xd5\x4f\x96\xe9\x6e\xca\x32\xf1\xef\xa7\xfe\xc1\xf5\x9c\x86\xa9\xe3\x5d\x4c\x3b\xa7\x69\x96\x0a\x93\xd8\xe5\xe9\xb1\xb4\xcc\x08\xdb\xf9\x96\x3a\xe2\x14\xf3\x57\x2d\xe7\x7e\xde\x7b\x0a\xb5\x52\xd2\x86\xa2\xc4\xe7\x78\xe2\x2b\xbf\xa4\x0c\xed\xf9\xe8\x6a\x35\x59\xe5\x7b\x2d\xfb\x3e\x61\x57\xfa\x1d\xc3\xfb\x62\x9d\x0a\x48\x31\x5e\xae\x9a\xfe\xbb\x5f\x57\xba\xc6\xeb\x25\xba\xab\x11\x99\xb3\xde\x18\xad\x25\xfc\x1b\xf4\x33\xf8\x05\xf6\x39\xba\x38\x8b\x9f\x00\x00\x00\xff\xff\xc7\xdd\x28\x06\xe4\x02\x00\x00")

func type_company_graphql() ([]byte, error) {
	return bindata_read(
		_type_company_graphql,
		"type/company.graphql",
	)
}

var _type_course_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x56\x4f\x6f\xe3\xb6\x13\xbd\xeb\x53\x4c\xe2\x43\x7e\x3f\x60\x73\xe8\x66\x13\xb4\xbe\x65\x15\x17\x35\x90\x62\x53\x5b\x46\x5b\x04\x39\x4c\xa8\xb1\x4c\x2c\x45\xaa\xe4\x30\x89\xb0\xd8\xef\x5e\x90\x54\x2c\xda\x89\x8b\x4d\xf7\x52\x18\xb0\xfe\x70\xde\xcc\x70\xde\x9b\xa1\x48\xfb\x16\x2e\x85\x20\xe7\xaa\xbe\x23\xf8\x52\x00\x58\x72\x6c\xa5\x60\xaa\x0b\x00\xd3\x91\x2e\xbe\x16\x45\x34\x5c\xb2\xf5\x82\xbd\xa5\x99\xa2\x96\x34\x47\xf3\xd6\xd4\x5e\x51\x01\xc0\xe4\xb8\x00\x50\xe4\x9c\x19\x31\xa5\xf1\xd6\xd1\xd6\xb9\xd1\x4a\xea\x60\x2d\x14\x3a\x67\x8d\x69\x83\xa5\xd4\x4c\x76\x8d\x82\x60\xd9\x2b\x85\xf7\xde\xcd\x99\xda\x08\xd0\xd8\xd2\x34\x44\x96\xba\x39\x2a\x00\xbc\x97\xf5\x14\x56\xab\xf9\x55\x78\x12\xa6\xed\x14\x31\x4d\xe1\xa3\x31\x8a\x30\xc6\xe5\x10\xec\x3a\xa6\x01\x32\xac\x87\x5c\xdd\xf7\xbb\x06\x68\xbb\xb3\xd5\xe2\xfa\x19\x13\xf7\xfc\xc4\xb9\x0b\xc6\xc6\x4d\xe1\xb6\xc2\xe6\xe8\x6e\x9b\x4a\x2a\x41\x0c\x19\x02\xcc\x35\x47\xd3\xbe\xa3\x69\x56\x9e\xa3\x57\x32\xba\x47\xf1\xb9\xb1\xc6\xeb\xba\xdc\x90\xf8\x9c\xa7\x82\x5b\xd2\xa6\x19\x81\x01\xd4\x59\x29\x68\x0a\x3f\x2b\x83\x9c\x36\xa2\x8c\xcd\x72\xa6\x27\x41\xb6\xe3\xec\x8d\xd4\x6c\x4d\xed\x05\x4b\xa3\xb3\xd7\x1b\xf3\x58\x99\x72\x5b\x86\xec\xbd\xb7\x2e\x5f\x89\xa1\x0a\x80\xc7\x0d\xf2\x9f\xc6\x5f\x13\x5a\x3d\x85\xdb\x61\x1f\x77\x51\x53\x7f\x79\x69\x13\x11\xbb\x2b\xae\x23\x21\xd7\x52\x54\x64\x5b\x97\x05\x11\xc8\xd4\x18\xdb\x4f\xa1\x1c\xee\xc2\xa6\x95\x32\x8f\x54\x57\xe6\xa3\xef\xf3\x62\xb8\x81\xda\xe0\x3a\x63\xf9\x05\x07\x37\xd8\x50\x2e\x89\x1b\x6c\xa4\x46\xa6\xfa\x37\x4f\xb6\x8f\x0c\x51\xdd\x50\xf0\x93\x00\x21\xc3\x0e\x1b\x9a\xeb\xb5\x99\x06\xf3\x78\x97\x24\xdb\x79\x86\x25\x3e\x50\xf9\xac\xe4\x04\x99\xc7\x85\x8c\xec\x3d\x5e\xb3\xbd\x05\xa9\x25\xc1\xbd\x85\x96\x37\x8b\x62\x4f\x13\xaf\x48\x62\x90\x6d\x94\xfe\x3f\x91\x72\x8f\x5a\x93\x9d\xb7\xd8\xd0\xd2\x47\xff\xb9\x13\xcf\xc6\x8e\x5b\x82\x49\xba\x98\x35\xf0\x86\xa0\x0a\xab\xf0\xbf\x6d\xdb\x83\x48\x5d\x61\xb4\xea\xff\x1f\x5a\x0b\x9f\x6e\xd0\xb2\x14\xb2\xc3\x28\x92\x54\x39\xc7\x68\xf9\x0a\x83\xca\x2a\xd9\x86\xad\x90\xae\x77\x9e\x95\x11\xb8\x53\xa1\x1d\x72\x3e\xc5\x79\xf3\x7d\xcc\x4c\xc0\x91\x30\xba\x46\xdb\x97\xdf\xc0\x1c\x4c\x60\xb9\x31\x96\xa1\x26\x27\xac\xec\x42\x72\xa1\x0a\x69\xc3\x07\x78\x85\x09\x9c\x5c\xde\x1b\xcf\xc0\x1b\xe9\x06\xdb\x93\x10\x38\x58\x1d\x6a\xc6\x80\xfa\xc5\x3c\x02\x9b\xed\xb8\x3a\x8c\x7f\xad\x69\x61\x02\x33\xc7\xb2\x0d\x3d\x90\x4c\x0e\xf9\x3a\xdc\xde\x21\x89\xdf\x37\xc8\xd0\x1b\x7f\xa2\x14\xa8\xb0\x7e\x02\xf7\x5e\x29\x62\xe8\x8c\xd4\xec\x0e\x8f\x80\x80\x5e\x64\x4b\x2f\x81\xff\x55\xbd\xbb\xe7\xd3\x70\x3b\x2d\xc6\x99\x93\x04\x38\xbe\x8d\xaa\x4b\x13\x7f\xff\x10\xdd\x3f\x79\x46\xb4\x25\x64\xaa\xb0\x19\x75\xbb\x7f\x3e\xec\xec\xeb\x68\x3b\xec\x2a\x6c\xa2\xf9\xe8\xf6\xdb\xb1\xcf\x0a\xff\x37\x0e\xf2\xbc\x9f\xfd\xbc\x25\xf9\x84\xbf\xf1\x56\x6c\xd0\x0d\x4d\xeb\x46\x07\x49\x88\x81\xb8\x70\x84\xde\xc5\xc2\x39\xb2\x23\x93\x47\x30\x81\x6b\xe9\x38\x74\x5b\x4d\x8a\x1a\x64\x72\x31\x7d\x17\xdb\x94\x2d\xce\xf5\x83\x91\x82\x66\x2d\x4a\x95\x71\x19\x84\xd4\x31\xd5\x83\x00\x06\x85\xbd\x72\x04\x97\x46\xaf\xa5\x6d\x5f\x7e\x6f\xec\x65\xbd\x20\xd7\x19\x3d\x9c\xfa\x6c\x51\x3b\x8c\x9d\x58\xee\x7f\x55\x84\x9c\xd9\x7a\x02\x99\xe6\x64\xe8\x3d\xd4\x3d\x48\x07\x46\x03\x82\x30\x9a\x2d\x0a\x06\xd4\x35\xf0\xc6\x3b\xa8\x0d\x39\x7d\xc2\xa0\x89\xea\xd0\xad\x1d\xf6\xe0\xbb\xb5\x35\xc3\xc0\xb4\xb2\xa3\x52\x49\xd2\xbc\x24\x61\x29\x9f\x4b\xf3\xf5\x6b\xb9\x84\x58\x6b\x54\x8e\xde\xa5\x86\x97\x0e\x1a\xf9\x40\x1a\x9c\x89\x05\x06\x81\x3a\x44\x19\x29\xba\xa2\x80\x3b\x30\x55\x23\x95\x13\xb8\x85\xd9\x1f\x97\xbf\xde\x5c\xcf\xa0\xfc\xb4\x5a\x2c\x67\xb0\xac\x16\xab\xb2\x5a\x2d\x66\xc5\x04\x00\xbe\xa4\x6e\x38\x4e\x9f\x8f\xc7\xef\x06\xad\x1d\x9f\x7d\x38\xfb\x70\x76\x9a\xff\x7f\x88\x97\xe3\xaf\xef\x76\x70\xe9\x33\x73\xc4\xfd\xf0\x3e\xfe\x4e\xd3\xe5\xfd\x69\xf6\xb4\x0f\x0d\x1f\xaa\x23\xf0\xc7\x9f\xd2\xef\xf4\xfc\x22\xfe\x4e\xcf\x2f\xb6\x37\xe7\x17\xe7\x09\x7c\x57\xfc\x1d\x00\x00\xff\xff\x37\x20\x35\x52\x2a\x0b\x00\x00")

func type_course_graphql() ([]byte, error) {
	return bindata_read(
		_type_course_graphql,
		"type/course.graphql",
	)
}

var _type_delegate_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x92\xc1\x4e\xf3\x30\x10\x84\xef\x79\x8a\xed\xed\xff\x5f\xc1\xb7\xd2\x5e\x22\x21\x54\x20\x3d\x21\x84\x96\x7a\x6a\x0c\x8e\x6d\xd9\x0e\x28\xaa\xfa\xee\xc8\x49\xd3\xa4\x69\x2f\xdc\x92\xd1\xac\x77\xe7\xdb\x4d\xad\x07\xad\x61\xa0\x38\x81\x0e\x05\x51\xd3\x68\x29\x68\xbb\x2d\xd7\x8b\x82\x68\x17\xc0\x09\x72\x99\x04\x3d\xa7\xa0\xad\x2a\x88\xaa\x6a\xf5\x56\xae\x07\x21\xbb\x50\xb3\x36\x13\xc7\x5e\x87\x98\x1e\xb8\xc6\xd4\x64\xf8\x5a\x4b\x30\xf0\x1f\xce\x62\x52\x9c\x7d\xf7\x4e\x69\x3b\x35\x7e\xba\xf7\x4a\x27\x73\x51\xbc\x73\xb5\x67\xdb\x0a\x5a\xf5\x1f\x59\xf3\xc1\xed\xb5\x41\x59\xb3\xc2\x36\x4c\x67\xe2\x5d\xd2\xdf\x3a\xb5\xff\x3c\x2b\x08\xda\xb0\xc2\x7f\x41\xcb\x93\x9a\x7f\x8b\x63\x51\x68\xeb\x9b\x44\xab\x2e\xf5\x80\xa5\xec\xb4\xc3\xd8\x31\xc3\xe9\x11\xfd\x25\xeb\x1c\xd2\xad\x48\xb7\x78\x28\x58\x04\x4e\xd8\x70\x8c\x3f\x2e\x48\x41\x77\xce\x19\xb0\x9d\xc7\xf5\xc6\xb1\xac\xdc\x17\xce\xe4\x72\xa2\x6e\xc3\x97\x81\x9e\x10\xbd\xb3\xb1\xdf\xb7\x3c\x89\xe2\x7c\x06\x8b\x49\x53\x39\x76\x9d\x3d\x39\xb8\x33\x39\xd2\xb5\x37\xa8\x61\x53\xcc\x60\xb5\xcd\x95\x8f\x0d\x42\xdb\xb5\x80\x54\x88\x82\x5e\x86\x92\xd7\x3c\x39\x2b\x94\x76\xef\xfa\x4d\xe4\xaf\x11\xff\xe0\xeb\xae\xa0\x7b\xe1\xfa\xe4\xfc\x6c\xae\xac\x59\x97\x93\x8d\x7c\x8e\xc5\x6f\x00\x00\x00\xff\xff\x41\x95\x11\x83\xdf\x02\x00\x00")

func type_delegate_graphql() ([]byte, error) {
	return bindata_read(
		_type_delegate_graphql,
		"type/delegate.graphql",
	)
}

var _type_individual_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xce\x3d\xca\xc2\x40\x10\x87\xf1\x7e\x4e\x31\xef\x35\xd2\xbe\x55\x1a\x0b\x3f\x0e\x30\xb2\x7f\x75\x64\xb3\xbb\xcc\xcc\x2a\x22\xb9\xbb\x90\x42\x03\x69\x7f\xf0\xc0\xa3\xa5\xf5\xe0\x7f\x83\x04\xc6\x92\xf4\xa1\xa9\x4b\x1e\x17\x7d\x13\xf3\x45\xcd\x63\x27\x13\x06\x3e\x84\x69\xb9\xfe\x11\x73\x96\xad\xdd\xeb\xf9\xa8\x91\xbf\x46\xcc\x81\x8c\x76\xab\x65\x6d\x98\x44\xf3\xba\x6b\xe2\xfe\xac\x96\x7e\x36\x13\xc5\xab\x61\x33\xb5\x87\xb7\x5a\x1c\xcb\x57\x77\xd8\xc0\x27\x87\xd1\x4c\x9f\x00\x00\x00\xff\xff\xb1\x3b\x04\x79\xc5\x00\x00\x00")

func type_individual_graphql() ([]byte, error) {
	return bindata_read(
		_type_individual_graphql,
		"type/individual.graphql",
	)
}

var _type_lesson_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x8c\xb1\xca\x83\x40\x10\x84\xfb\x7d\x8a\xf1\x35\x6c\xff\xbf\x11\x52\x18\x82\x55\x48\xb1\xe0\x64\x39\x88\xeb\xe1\xad\x10\x09\xbe\x7b\x38\x2d\xd2\x0d\x33\xdf\x7c\xb1\x65\xe2\xc2\x52\x66\xef\xd5\x88\x34\xe5\x17\x27\x7a\x14\xf4\x6a\xc9\x35\x38\x5e\x57\x2e\x1b\x3e\x02\x70\x34\x96\x16\xf7\xf3\xf0\x10\x20\xab\xb1\xf3\xe7\xdc\x56\xfc\x48\xb2\x8b\x24\xcf\x6b\xe0\x6f\xa1\x06\x4f\xb6\x3b\x9a\xea\x70\x9d\xd8\xe2\x16\x4b\x72\x6b\x04\x08\xb5\xaa\x1c\x86\xee\xbf\xa9\xc6\xe0\x3b\x7e\xfb\x2e\xdf\x00\x00\x00\xff\xff\x22\x19\xc7\xa3\xa2\x00\x00\x00")

func type_lesson_graphql() ([]byte, error) {
	return bindata_read(
		_type_lesson_graphql,
		"type/lesson.graphql",
	)
}

var _type_manager_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x92\xcd\x6e\xe3\x30\x0c\x84\xef\x7a\x0a\x2e\xf6\x2d\x7c\xdb\x4d\xb0\x80\x81\x6d\x91\xfe\xf8\x54\xf4\xc0\x46\xb4\xc2\x42\xa2\x04\x49\x46\x10\x04\x79\xf7\x42\x76\x7e\x9c\x5a\x97\xde\xec\xc1\x70\xc0\x8f\xa3\x7c\x08\x04\x0f\x28\x68\x28\x02\x1c\x15\xc0\x30\xb0\x6e\xa0\xeb\xda\xf5\x2f\x05\xb0\x8d\x84\x99\xf4\x9f\xdc\xc0\x4b\x8e\x2c\x46\x01\x90\x43\xb6\x97\xff\x62\xea\x39\xa6\xfc\x88\x8e\xe6\xa2\xc5\xa5\x96\xc9\x52\xd8\x79\x59\x18\xff\x7b\xc3\x32\x17\x3f\xfd\xc7\x2b\x67\x7b\x67\xdc\x7a\x17\x50\x0e\x0d\xac\xa6\x8f\xa2\x85\xe8\x7b\xb6\xd4\x3a\x34\xd4\xc5\xeb\x56\xea\xa4\xd4\x1c\x6d\x83\x86\x80\x5d\xb0\xe4\x48\x72\x82\x0d\x1a\x96\x02\xf6\x34\x50\x3c\x8c\xdc\xa4\x0d\xa5\x06\xde\xce\x13\xef\x25\x1c\x0d\xb5\xd2\xfb\xa6\xf8\xc7\xaf\x92\xcb\x12\x86\x7c\x09\x1e\x17\x9f\xe6\xbf\x5f\x25\x60\x4a\x7b\x1f\xf5\x5c\x13\xff\x4c\x29\x34\xf0\xd7\x7b\x4b\x28\xb7\xb8\xd5\x78\xe7\x73\x68\x3b\x4a\xc7\x1b\x72\x69\x63\xea\x04\x7e\xc3\x3f\x1f\x01\xb5\x63\x49\xb0\xdf\x91\x4c\x15\xb1\x18\x70\xd3\x74\x02\xdf\x83\xe6\xbe\xa7\x48\x92\xcf\x11\x4c\xe9\x27\x45\x2d\x60\x6a\x7d\x54\xdb\x5c\x52\x5f\x19\xd7\x64\xa9\xc2\x38\x7f\x70\x57\x6f\x17\x74\xed\x1e\xf7\x8f\xf3\x6e\xcb\x1a\x5e\x85\xae\xb6\x77\x85\x4f\x9d\xd4\x57\x00\x00\x00\xff\xff\xf3\x0d\x49\x60\x1b\x03\x00\x00")

func type_manager_graphql() ([]byte, error) {
	return bindata_read(
		_type_manager_graphql,
		"type/manager.graphql",
	)
}

var _type_module_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x92\xcb\x6a\xc3\x30\x10\x45\xf7\xfa\x8a\xf1\x6f\x78\xd7\xd7\x42\xd0\x42\xa9\xe3\x76\x51\xb2\x50\xac\x21\x88\x4a\x23\xa3\x47\x20\x94\xfc\x7b\x91\x94\xd8\x72\x70\x4b\xbb\xea\xca\x96\xe6\xc1\xbd\xe7\x2a\x1c\x47\x84\x27\x2b\xa3\x46\x50\x66\xd4\x68\x90\x82\x87\xee\xa8\xb5\xd8\x45\xcf\x03\x1a\xf8\x64\x00\x31\x2a\xd9\x42\xdf\xf3\xfb\x86\x01\x90\x30\xd8\x42\x17\x9c\xa2\x7d\x3a\xef\x04\x11\x3a\x6e\xc4\x1e\xfb\x97\xc7\x4b\x85\x01\x48\xf4\x83\x53\x63\x50\x96\xea\xfe\xe0\x04\x95\x42\x7d\x7b\xb0\x6a\x40\x7b\x40\xb7\xdc\x71\x50\x12\x6d\x0b\xaf\xe9\xc3\x00\xfc\x59\x5a\x0b\xef\xb5\xca\x66\xcb\x00\x06\x9b\x2c\x04\x6c\xe1\xd6\x5a\x8d\x82\xd8\x89\x31\xa4\x68\xca\xf4\x26\x99\x4d\x6e\xde\x78\xb7\xe1\x37\xa9\x98\xfd\xe7\x62\x2e\xa4\x63\x3b\x37\x27\x55\xd1\xe9\x59\xe4\x89\x31\x45\x63\x0c\xa5\x85\xe7\xdf\x5f\xce\x65\x19\x85\xf4\x43\xc1\x5c\x26\xd1\x07\x06\xa0\xd1\x7b\x4b\xf3\xfe\xd2\x38\xe1\x2f\xfb\x17\xd3\xcd\x55\x2a\xd3\xe8\x9d\x43\x11\xf0\xbc\x60\x52\x78\x1d\x59\x10\xfb\x84\x30\xcf\x6e\xff\x9a\x54\x95\x77\x17\x87\x01\xbd\xdf\xd8\x0f\xa4\x3a\xb4\x4b\x96\xdf\xd5\xab\x50\xb3\xc8\x65\xb2\xb3\xfd\x66\x3b\xc5\x54\x1b\x7b\x16\x47\x6d\x85\xcc\xd6\x4c\xbe\xb9\xe0\x99\x41\xf4\xa3\x5c\x01\xb1\x7c\xc9\xd7\x18\x6a\x4c\xeb\x54\x56\xa1\xfc\x1b\x93\xda\xe3\x8f\x4c\xbe\x02\x00\x00\xff\xff\xd6\x8d\x98\x78\xe9\x03\x00\x00")

func type_module_graphql() ([]byte, error) {
	return bindata_read(
		_type_module_graphql,
		"type/module.graphql",
	)
}

var _type_question_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x93\xdd\x6e\xa3\x40\x0c\x85\xef\xe7\x29\x8c\xf6\x2d\xb8\x4b\x58\x36\x8b\x94\xdd\x26\x0d\x48\x95\x2a\x14\x59\xc1\x41\xa3\xc2\x0c\x65\x06\xb5\x28\xca\xbb\x57\x0c\x61\xc2\x5f\xaa\x26\x77\xd8\xb2\x7d\x8e\x3f\x0f\xba\x2e\x08\xb6\x15\x29\xcd\xa5\x80\x13\x03\xa8\x2a\x9e\xb8\x10\x45\xc1\x6f\x87\x01\x68\xfa\xd4\x2e\xec\x74\xc9\x45\xda\xc4\x25\x8a\x44\xe6\x5c\xd1\x42\xa8\x0f\x2a\x95\x0b\x4b\x29\x33\x42\xc1\x00\xde\x2f\x63\xc2\xba\x20\xd7\x0e\x6d\xa2\xa6\x13\xbb\x86\xd7\xb6\xd5\x89\xd9\x99\xb1\x81\xfe\x06\x53\x02\x9e\x17\x19\xe5\x24\xb4\x82\x0d\xa6\x5c\xa0\xa6\x64\x5b\x51\x59\x1b\x77\x94\xa4\xd4\xcc\xe8\x5a\x62\x06\x50\x60\x4a\x81\x38\x4a\xb7\x69\x30\x5f\x76\x72\x2b\x35\xb3\x17\x57\x9e\x2c\x4b\x3a\xe8\xfe\x02\xfd\x65\x9b\x9a\x1c\x53\x8a\x9e\xd7\x36\x75\x66\x8c\x44\x95\x0f\x56\x33\xb3\x77\xc1\xff\xd5\xda\xdf\x7b\x7f\x9f\x02\xcf\xb7\x65\xad\xb8\x2d\x0a\xfd\x97\x90\x01\x04\xff\x16\x2b\xff\x12\xee\xdb\xe0\xcc\x18\x17\x45\xa5\xc1\x2b\x09\x35\x75\xe3\x03\x93\x3b\xdd\x73\x05\xe7\x8e\x33\xb4\x62\x4b\x54\xfc\xd0\x8e\x31\x7a\x4e\x6c\xce\x8e\x69\x53\x62\x68\xc5\xce\xd8\xe0\xb8\xc7\x78\x9c\x12\x75\xe0\x17\x24\x74\xc4\x2a\xd3\x0a\xb4\x84\x23\x66\x8a\x6e\x60\x0e\xe5\x1b\x89\x5e\x12\x2d\x3b\xb7\xc7\xd1\xb1\x87\x1d\x92\xda\x60\x9d\x49\x4c\x8c\x8f\x6e\xfd\xeb\xea\x57\xfb\x51\x91\xcc\xf2\xbd\xfd\xe6\x1f\x7e\xf2\x03\xd4\xad\xee\x14\xf5\x98\xf4\xd8\xe9\x2c\xe8\xab\xd9\x6f\x38\xcd\xdd\xe3\xe1\x73\x74\xd0\x87\xf8\x7e\x0a\xbd\xcb\xfc\xe1\x99\x9e\xfc\x8b\x53\xfd\x70\x04\xe4\x2b\x00\x00\xff\xff\x60\x64\xc9\x14\xa2\x04\x00\x00")

func type_question_graphql() ([]byte, error) {
	return bindata_read(
		_type_question_graphql,
		"type/question.graphql",
	)
}

var _type_test_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x54\xc1\x8e\xd3\x30\x10\xbd\xe7\x2b\x26\xea\x5f\xe4\xb6\x80\x56\xea\x89\xae\xda\x1e\xd0\xaa\x07\x37\x7e\x9b\xb5\x70\xec\xe0\x19\xb3\xaa\x10\xff\x8e\xec\xa4\x71\x5a\x08\x02\xc1\xa9\x63\x77\xde\xcb\x9b\x37\x2f\x91\xcb\x00\x3a\x80\x85\x4c\x3f\x58\xf4\x70\xc2\xb4\xbf\x58\xab\xce\x91\xb7\x82\x9e\xbe\x55\x44\x4e\xf5\x68\x68\x2f\xc1\xb8\xae\xae\x88\x62\x34\xba\xa1\xe3\x71\xfb\x21\x9d\x5a\x9f\xa0\x82\x86\xde\x79\x6f\xa1\x5c\x45\x24\xaa\xe3\x86\x9e\x0f\xaa\xab\x4f\x15\x91\x12\x41\x3f\x08\x3f\x58\xeb\xdf\xa0\x1b\xda\x3a\xa9\x88\x06\xc5\xbc\x43\x68\xe1\x44\x75\x68\xe8\xd1\x7a\x95\xee\xbf\x44\xb0\x18\xef\xf8\xe0\x1f\x1c\xbf\x21\x5c\x01\x41\x39\xed\x7b\xc3\x18\xaf\x79\xf9\xc8\x19\xd4\xd0\xf3\xd3\x54\xd7\xa7\xea\x7b\x55\xcd\x43\xee\x54\x87\xe5\xa0\x3b\xd5\x19\xa7\x04\xfa\x29\x22\x5c\xf2\xa8\xd0\x1d\xb2\x72\xb0\x9c\xb2\xc4\x0e\x5b\xf7\xe2\x9b\xd4\x9c\xab\xc4\x68\xdc\x10\x25\x53\x3e\x1a\x2b\x08\x19\x5a\x5c\xb9\xb3\x6c\xd6\xf0\x3e\x40\x09\x46\x25\x17\xeb\x95\xce\x38\x01\x4b\x93\xc9\x0a\x75\xe9\xdc\xe6\xf3\xaf\xb6\x30\x79\x9c\xd7\xb0\x66\x72\xbd\xe6\x72\xbd\x6a\x73\xfd\x3b\x9f\x6b\xda\xd0\xc7\xaf\x08\xc1\x68\x30\x0d\x08\x33\xc9\x8c\x51\xe9\x74\xb7\x8f\x51\x63\x06\x07\x8d\x00\x4d\xd6\xb0\x90\x7f\x21\x79\x45\xe9\x24\xe3\x48\x5e\x0d\x67\x4b\x8a\x19\xd7\x6d\x8e\x62\xb2\x17\x57\x48\x22\x9e\x92\x48\x9b\xfc\x7b\x4f\x4a\x67\x18\xd7\x91\xca\x58\xe8\xe4\x53\x2e\xd7\x91\x0c\x8b\x56\xa0\xa7\xc6\xa2\x63\x1f\xcf\xbd\x91\xdb\xa5\xb4\x3e\x06\x46\xa2\x4a\xd6\xd1\x86\x0a\xcf\xf8\x57\x2e\x23\x23\x50\x9a\x4b\x7d\x4e\x62\xd2\x95\xe4\x97\xce\x4d\xfb\x5f\x57\x93\xfb\x2e\x3e\x92\x0a\x98\x14\xa5\x48\x5d\xc7\x58\xa6\x7d\xf4\x67\xf4\xf9\x93\x8f\xe1\xda\x42\xe2\x67\xaa\x39\x8b\x65\x98\x65\x16\x39\xb6\x2d\x78\xb1\xef\x32\xfd\x71\xd0\x3f\x45\xf2\xf6\x43\x70\x93\xf9\x3f\xcb\xe7\x7f\xfd\x08\xfc\x4b\x36\xff\x3a\x9a\xd9\xc4\xe2\xc9\xea\x0b\xfd\x23\x00\x00\xff\xff\xac\x4d\xf0\xb4\x62\x05\x00\x00")

func type_test_graphql() ([]byte, error) {
	return bindata_read(
		_type_test_graphql,
		"type/test.graphql",
	)
}

var _type_users_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x53\xcd\x6a\xdc\x30\x10\xbe\xeb\x29\xbe\xc5\x97\x16\x4a\x1e\xc0\xb7\x25\xa5\xb0\x50\x4a\x4b\xb2\xa7\x92\xc3\xac\x35\xf6\x4e\x23\x4b\xae\x34\x4a\x31\x25\xef\x5e\x24\xaf\x37\x4e\x53\xe8\x4d\x33\xd6\xf7\x37\x23\xb3\xcf\x23\x8e\x89\xe3\xfd\x3c\x31\x7e\x1b\x60\x24\x4f\x03\x47\x03\x88\xb7\xf2\x24\x36\x93\x33\x80\x65\xc7\x03\x29\x9b\x67\x63\x9a\x8a\x80\x24\x10\xf4\x2c\x1e\x5a\xc0\x7a\x26\x45\x17\x9c\x23\xe5\x04\xf1\x7d\x88\x23\xa9\x04\x0f\x3a\x85\xac\xd0\x33\xaf\xe4\x1f\x5e\xe8\x1a\x90\xb7\x1b\x29\xe4\x42\x5d\x08\xd3\x0d\xee\xc2\xc8\xe8\x85\x9d\x4d\xa0\xc8\xf0\x41\x31\x04\xf1\x03\x34\xe0\xc4\xa0\x27\x12\x47\x27\xc7\xb0\x3c\xb1\xb7\xe2\x07\xd3\x20\xf8\xaa\x55\x4d\x85\x7e\x21\x9c\x43\xae\x0c\x91\x7f\x66\x4e\x5a\x28\x2c\x29\xa1\x0f\xf1\xc6\xd4\x9b\x35\x52\x19\x40\xa9\xda\xeb\x4c\x76\x06\xe0\x91\xc4\xb5\xb8\xd3\x58\x04\x80\x5e\x62\xd2\x2f\x34\xf2\xda\x2b\x97\x1c\xbd\xed\x29\x3b\x9e\xce\xc1\xf3\x06\xfc\x23\x9c\xee\x45\xdd\xb6\x55\xa0\x9f\xc3\x20\x7e\x8b\xed\xc2\x38\x91\x9f\x5b\xdc\x2e\x07\x03\x4c\x31\xf4\xe2\xf8\x30\xd2\xc0\xc7\xb8\x75\x44\x9d\xca\x93\xe8\xfc\x6e\xa2\x81\x5b\x7c\xa5\x81\xdf\xb7\xd8\x5f\xba\xa5\x5c\x2f\xf1\x6d\xc8\x31\x71\x6a\xf1\x7d\xbf\xa9\x77\x0f\x06\x68\xd0\x71\x54\xe9\xa5\x2b\x2b\xac\x0d\xb2\x36\x72\x4a\x2d\xf6\xcb\xa1\xac\xbf\xbe\x99\x95\xfb\xfa\x6e\x3c\xff\x5a\xa8\x56\x25\x52\xb6\x97\x1c\x8e\x95\xed\xf5\x6b\x4f\xe2\xae\xe5\xb3\x59\xc6\xbf\xf5\x0a\x29\x90\x91\xbd\xa6\x12\x45\x7c\xa1\xfa\x96\x39\xce\x55\x89\xed\xf0\xe2\x5f\x74\x2e\xd6\x4b\xee\x83\xef\xc3\x92\xbd\x9c\xde\x30\x57\x6c\xce\x62\x5b\x1c\x8f\x87\x8f\xbb\xeb\xaa\xb7\x51\xea\xe4\x23\x17\xc1\xbd\xbe\x5e\x47\xb1\x5b\xb6\xb1\xda\x6e\xf0\x42\x7f\x99\xe2\x7f\xcd\x37\xf8\xcb\xfe\x05\xf8\x50\xbf\xfc\x23\x44\x83\xaa\xd4\x60\x7f\x71\x80\x2e\xc7\xc8\x5e\xdd\x8c\x13\xd7\x3f\x81\x1e\xd9\xe3\x34\x83\xea\x4b\x37\x6f\x4c\xd5\xdc\xaf\xed\xd7\x40\x0b\xcf\x5e\x95\xc7\x49\x5b\x1c\xbc\x96\xf6\x28\x3e\x2b\xa7\xfb\x48\xdd\x23\xdb\x16\x9f\x5c\x20\xdd\x99\x67\xf3\x27\x00\x00\xff\xff\x27\xaa\xe4\x2d\x2a\x04\x00\x00")

func type_users_graphql() ([]byte, error) {
	return bindata_read(
		_type_users_graphql,
		"type/users.graphql",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"mutation.graphql": mutation_graphql,
	"query.graphql": query_graphql,
	"schema.graphql": schema_graphql,
	"type/admin.graphql": type_admin_graphql,
	"type/auth.graphql": type_auth_graphql,
	"type/company.graphql": type_company_graphql,
	"type/course.graphql": type_course_graphql,
	"type/delegate.graphql": type_delegate_graphql,
	"type/individual.graphql": type_individual_graphql,
	"type/lesson.graphql": type_lesson_graphql,
	"type/manager.graphql": type_manager_graphql,
	"type/module.graphql": type_module_graphql,
	"type/question.graphql": type_question_graphql,
	"type/test.graphql": type_test_graphql,
	"type/users.graphql": type_users_graphql,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"mutation.graphql": &_bintree_t{mutation_graphql, map[string]*_bintree_t{
	}},
	"query.graphql": &_bintree_t{query_graphql, map[string]*_bintree_t{
	}},
	"schema.graphql": &_bintree_t{schema_graphql, map[string]*_bintree_t{
	}},
	"type": &_bintree_t{nil, map[string]*_bintree_t{
		"admin.graphql": &_bintree_t{type_admin_graphql, map[string]*_bintree_t{
		}},
		"auth.graphql": &_bintree_t{type_auth_graphql, map[string]*_bintree_t{
		}},
		"company.graphql": &_bintree_t{type_company_graphql, map[string]*_bintree_t{
		}},
		"course.graphql": &_bintree_t{type_course_graphql, map[string]*_bintree_t{
		}},
		"delegate.graphql": &_bintree_t{type_delegate_graphql, map[string]*_bintree_t{
		}},
		"individual.graphql": &_bintree_t{type_individual_graphql, map[string]*_bintree_t{
		}},
		"lesson.graphql": &_bintree_t{type_lesson_graphql, map[string]*_bintree_t{
		}},
		"manager.graphql": &_bintree_t{type_manager_graphql, map[string]*_bintree_t{
		}},
		"module.graphql": &_bintree_t{type_module_graphql, map[string]*_bintree_t{
		}},
		"question.graphql": &_bintree_t{type_question_graphql, map[string]*_bintree_t{
		}},
		"test.graphql": &_bintree_t{type_test_graphql, map[string]*_bintree_t{
		}},
		"users.graphql": &_bintree_t{type_users_graphql, map[string]*_bintree_t{
		}},
	}},
}}
