package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _mutation_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x56\x4d\x8f\xdb\x36\x10\xbd\xeb\x57\x8c\xe1\xcb\xe6\xd0\xf4\xee\x5b\x6a\x23\x80\x81\x5d\xd8\x8d\xa5\x1f\x30\x11\xc7\x32\x11\x8a\x54\xf9\xb1\xa9\x51\xec\x7f\x2f\x48\x49\xfc\xb2\xdb\x4b\x8e\x7c\x9a\xf7\xe6\x71\x86\x33\xf6\x16\x46\x67\xd1\x72\x25\x0d\xf4\x28\x61\x54\x8c\x5f\xef\x60\x6f\x04\xec\xfb\x67\xa0\xbf\xa9\x77\x96\x18\x18\xfa\xcb\x91\xb4\x1c\x85\xb8\x7f\x6e\x1a\x2e\x27\x67\xa1\x9b\x84\x42\xf6\x95\x0b\x7a\x23\x8b\xf0\x4f\x03\x70\xe5\x82\xda\xfb\x44\x3b\xb8\x58\xcd\xe5\xb0\x69\x00\x7a\x25\x2d\x49\xfb\x4a\x72\xb0\xb7\x1d\x1c\xa5\xdd\x34\x1f\x4d\x63\xef\x13\x65\x12\xdf\xc8\x4c\x41\xc2\x69\x91\xb3\x8d\xeb\x7b\x32\xa6\x55\x3f\x48\x26\xfc\xe3\xd1\xc3\x65\x0e\x0c\x1a\xff\x49\x0a\x49\xdf\x96\x2b\x87\x50\x64\x23\x97\xaf\x6a\xe0\xf2\x25\x28\xee\xe0\x4b\x44\x36\x9f\x76\xf0\xc5\xd9\x5b\xd0\x69\x00\x46\x94\x38\x90\x2e\xa2\xdf\x32\xac\x8e\x67\x24\x68\x40\x4b\x05\xe1\x90\x83\x25\xc3\x17\x4b\x13\x5a\x5a\x44\x57\xca\x3e\x07\x8f\x1e\xf3\xbc\xe5\xec\x4b\x36\xb1\x47\x52\x97\x83\x4f\x48\x93\x56\xbe\x5b\xc7\x11\x07\x9a\xab\xf8\xcd\x37\xd9\xd8\x24\x90\xb7\xd7\x93\xcb\x6e\xd5\x89\xcf\x99\xe0\xa3\xc6\xd2\x9e\xd2\x83\x2f\xd0\x83\xf1\x43\x0e\x46\xe3\x7f\x28\x25\x08\xe5\x26\x15\x29\xf4\xa9\x2c\x51\x80\x22\x25\x9c\xa2\xcb\x22\xbc\x4b\xd0\x43\xf8\x6c\xaa\x08\x3f\x24\xe8\x7f\x0c\xad\x9d\x2d\x3d\xad\x68\x24\x96\xb0\xaf\xa4\x92\x86\x1a\x80\xed\xe2\x74\xfd\x94\x94\xf7\x6a\x9c\x50\xde\x4b\xe1\x05\x4c\xba\xf3\x39\x5e\xb8\x22\x75\x39\xf8\x84\xb4\x5d\x2e\x9e\x90\x22\xf7\xfa\x38\x1a\x00\x3f\xd2\x01\x7b\xea\x24\x04\x2c\x93\xf2\xf4\xe9\x86\x00\x4d\x3d\x4e\xb6\xbf\x61\x3e\xeb\x79\x55\x01\x70\x9a\xb4\x7a\x8f\xd7\x70\x8e\xb3\x1d\x74\xdd\xf1\x90\xfb\xf6\x3b\xc7\x89\x2b\x17\x67\x92\x8c\xcb\xe1\xa4\x19\xe9\x97\x5e\x70\x92\xf6\x42\xbd\x26\x1b\x13\x94\xea\x06\xdf\xe9\x24\x05\x97\xb4\x57\x4e\x9b\xd8\xb4\x4b\x85\x67\x95\xf2\x47\xd8\x42\x7b\x3a\x9c\x00\x85\x50\x3f\x41\x70\xf9\x63\xd1\xda\x0b\x34\x46\x2b\x35\x3e\xca\x55\x9f\x9e\x28\x2a\xa6\x00\x19\x03\xeb\xac\xd2\x60\x15\xf4\xe1\x93\x9f\x52\xa7\xfb\x1b\x9a\xc5\x8c\x59\x65\xcf\x25\x1c\x25\x2b\x3c\x3e\xae\xd8\xcd\x16\x87\xf2\x15\xb5\x38\x44\x76\x8b\x43\x6a\x3b\x5a\x1a\x94\xae\xdf\xdc\x82\xa6\x3b\x2c\x40\xca\xf0\x4a\xc6\xa8\x6a\x2e\x67\x2c\x92\xe6\x63\x64\x1c\x25\xe3\xef\x9c\x39\x14\x25\x2b\xe1\xd5\xec\xa4\x0f\xd9\xf4\x18\xf7\x7d\xe4\xb6\xcd\x16\xd8\x25\x22\x91\x9f\xa0\x33\xde\xfd\x6a\x82\xed\x82\x19\xc0\xb8\xaf\x7f\xe7\x31\x81\x01\x94\xe6\x27\x69\xe3\xbb\x82\x60\xc9\xd8\x54\xcb\x2c\xd7\x3e\x22\x95\xd7\x2c\x57\x9c\xcc\xb6\xd8\xb2\xac\x26\x26\x68\x25\xfa\x69\x08\x36\x7e\x69\x5b\xcf\xae\xff\xf4\x2c\x5e\x77\x68\x45\x2b\xf7\x2b\x5c\xdf\xa0\x16\xe9\x0a\xb4\xba\xc9\xa3\xc8\xba\x6b\xd6\x2f\xd9\x2f\x9f\x62\x4e\x54\x1b\x74\xc6\x2a\x67\x33\x58\xfb\x2a\xe9\x5d\x86\x55\x9e\x4a\x7a\xb0\xb4\x34\xd5\x8f\x60\xb6\x8c\xe7\x73\x00\x0c\xd9\x75\x35\x67\x23\x3d\x4e\x82\xc2\xbf\x89\xdf\x7c\x80\x01\x7e\xcd\x5e\x12\x4c\x68\x0c\x31\x50\x1a\xae\xc8\x05\x31\x40\xe8\x57\xee\x32\xe5\xf0\xf2\x55\x69\x08\x79\xcc\xa7\xe6\xa3\xf9\x37\x00\x00\xff\xff\x6b\x48\x61\xf8\x94\x09\x00\x00")

func mutation_graphql() ([]byte, error) {
	return bindata_read(
		_mutation_graphql,
		"mutation.graphql",
	)
}

var _query_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x56\x4d\x6f\xdb\x46\x10\xbd\xf3\x57\x3c\x43\x17\x19\x30\x9a\x3b\x6f\x76\x82\x14\x06\x9a\xd6\xa9\xe4\x53\x51\x14\x2b\xee\x90\xdc\x7a\xb9\xcb\xee\x47\x6c\xb6\xc9\x7f\x2f\x66\xf9\xad\x50\x42\x7b\x93\xf8\xde\xcc\x7b\x33\x9a\x19\x71\x87\xbf\x22\x39\x45\x1e\xbe\xb6\x51\x4b\x18\x1b\xd0\x58\xa9\xca\x0e\xa1\x26\xc8\xd3\x0f\xa0\x37\x2a\x62\x20\x09\x65\xd0\x0a\xe7\x84\xd6\xa4\xb3\xd0\xb5\x84\x27\x51\xd1\xa3\x29\x2d\xfe\xc9\x80\x60\x83\xd0\x39\x1e\x4d\xb8\xc1\x0e\x3f\xc7\xe6\x44\x0e\xb6\x44\x2b\x2a\xf2\x10\x65\x20\x87\x50\x2b\x0f\x6b\x28\x03\x6c\x59\x7a\x0a\x13\xff\x58\xd3\xf0\x88\x63\x12\x8f\x03\x51\x3a\xdb\x24\x2b\x3e\x08\x17\x32\x40\xab\x46\xad\xc3\x1a\xf1\xc6\xf6\x5f\x0d\x5a\x72\x29\x2a\x03\x2a\xf5\x85\xcc\x86\x1b\x15\xa8\xf1\x3d\x9a\x7d\xcb\x32\x65\xda\x18\x52\x1d\xa9\x86\x85\xa9\x95\xd4\x4c\xfd\x24\x8c\xa8\xc8\x7d\x54\x9a\xeb\xe1\x18\x23\x1a\xca\x71\x08\x4e\x99\x2a\x03\xa8\x11\x4a\x2f\xbe\xff\x69\x4f\x47\x15\xf4\x92\x12\xa3\x92\x39\x9e\x9f\x1f\x3f\x70\xdb\x48\x53\x5b\x5b\x33\x13\x26\xad\x0f\xa4\xa9\x12\x81\x16\x62\xeb\xd0\x50\xfc\xc1\x5f\xa7\xc4\xff\xdf\xca\x15\xf5\xf7\x36\x3a\x4f\xfe\x72\xa5\xa2\x28\xc8\xfb\x63\xd7\x52\x8e\xfb\xe9\x73\x06\x9c\x44\xf1\x52\x39\x1b\x8d\x7c\x5f\x53\xf1\x92\xe3\xc1\x5a\x4d\xc2\x64\x40\xeb\x54\x41\x39\x3e\x6a\x2b\xb8\xc3\x42\x6b\xfb\x4a\xf2\x68\x1f\x62\x37\xd1\xb0\xc3\xa1\xb6\xaf\xb0\x46\x77\x28\x7a\x17\x08\xb5\x08\xe8\x6c\x84\x70\x04\x11\x43\x6d\x9d\xfa\x9b\x24\x82\xc5\xc9\xda\x97\xa5\xed\xa6\x15\xa6\xbb\xd4\xb3\x55\x0d\x53\xd0\x4f\xe4\xbd\x35\xff\x29\x06\x08\xa2\xf2\x39\x7e\x63\xf0\xf7\x39\xc5\xa1\xd3\x5a\x9c\xe2\x95\x7e\xd1\x5b\xa1\xa3\xa4\x5e\x6b\xd9\x94\x01\xf8\x64\x65\xe4\x1f\xe7\x3b\xe0\x48\x3e\xcc\x8f\x93\x62\x20\x57\x8a\x22\x6d\xa0\x32\x22\x90\xfc\x1c\xc9\x75\x49\xb5\x1d\x96\x32\x9f\xd6\x73\x36\xf9\x8b\x93\xe4\x1e\x7a\x9e\xf0\x05\x19\xa9\x4c\xb5\x54\x2c\x15\xe9\x69\xa2\x6e\x38\x30\x2d\xfa\x9c\x5d\xa5\xcc\x23\x0e\x08\xd9\x28\xb3\x9f\xdb\x75\x9b\xe3\x9e\x1f\x8d\x90\xdf\xb3\x9f\xde\xcb\x88\xf1\x67\x8e\x6d\xfa\x5d\x5a\x47\x0f\x0b\x36\xc3\xcb\x0c\x77\x28\x53\x7b\xf3\xf5\x1e\xde\xc1\xf6\x85\xe5\x63\x85\x73\xa2\xa7\xfe\x1e\xc8\x61\x97\x16\x62\x37\xb7\xf9\xb4\x62\x0b\xc6\xb6\xde\x7a\x17\x37\x05\x47\xca\xa0\x58\xf4\x83\x78\x26\x38\x8c\xe7\x84\xab\x0b\x7a\xab\x31\xde\x94\x1b\x18\x83\x9a\x4e\x53\x75\x26\xd6\x8f\xda\x84\x6e\x2b\x2d\x67\x7f\x53\xa8\x27\x4c\x55\xa5\x7d\xbc\xe0\x79\x71\x31\x2e\x78\x66\xc6\x2a\xd5\x9e\x0d\xf3\x99\x9e\x60\x5e\x3f\xcf\xf9\x9e\x3d\xb9\x2c\x03\xff\x47\xf9\xa0\x2e\xf9\xff\x3c\xa0\x57\x64\x47\xca\x20\x3c\xe6\x3b\xeb\xd6\xc8\x4a\x67\xd1\x87\x6d\x35\xde\xc5\x2b\x4a\x0c\x0f\x2a\x9c\xe3\x4c\x81\x51\x1e\xec\xb4\xe8\x17\xe6\x3a\x61\xd7\xc6\x3a\x11\x06\x8d\x3e\xd3\x99\x4a\xcf\xe0\xc6\x79\x12\xae\xa8\xc7\xcb\xb4\xa9\xb7\x3e\x5b\xb7\x39\x0e\xab\x98\x5f\xc9\x47\x1d\xb0\xc3\x3d\x5f\x6a\x3f\x64\x54\xa6\x1a\x8b\xb8\x1b\x67\x0b\xc2\xc8\xbe\x6f\x19\xb0\x43\x21\x02\x55\x96\x5f\x2d\xf6\x9a\xbe\x90\xce\xf1\xe4\x54\x23\x5c\x87\xaf\x5f\x71\xa0\xc2\x1a\x29\x5c\x77\x87\x40\x6f\x61\xbc\x27\xb7\x78\xf7\x0e\x3f\x52\xe0\xbf\x85\xfe\x2d\x80\x86\x21\x59\xa4\x4b\xd9\xf9\x04\xef\xbf\x0b\xed\xcd\xf1\xcb\xc6\x1c\xcf\xcc\xec\x5b\xf6\x6f\x00\x00\x00\xff\xff\x12\x9d\xba\xa3\xe9\x08\x00\x00")

func query_graphql() ([]byte, error) {
	return bindata_read(
		_query_graphql,
		"query.graphql",
	)
}

var _schema_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x4e\x4e\xcc\x49\x2c\x52\x08\x0d\xf5\x74\xe1\x82\xb2\x43\x32\x73\x53\xb9\xb8\x8a\x93\x33\x52\x73\x13\x15\xaa\xb9\x14\x14\x0a\x4b\x53\x8b\x2a\xad\x14\x02\x41\x14\x97\x82\x42\x6e\x69\x49\x62\x49\x66\x7e\x9e\x95\x82\x2f\x94\xc5\x55\xcb\x05\x08\x00\x00\xff\xff\xc2\x82\x45\xdf\x48\x00\x00\x00")

func schema_graphql() ([]byte, error) {
	return bindata_read(
		_schema_graphql,
		"schema.graphql",
	)
}

var _type_admin_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x90\xcd\x8a\x83\x30\x14\x85\xf7\x79\x8a\x3b\xaf\x91\xdd\x30\x6e\x84\x61\x70\x28\xae\x4a\x17\x17\x72\x0d\x17\x92\x18\xf2\x43\x11\xf1\xdd\x8b\xb1\x60\xd5\x52\xda\x5d\x38\x9c\x7c\xdf\x49\xd2\xe0\x09\xbe\x95\x65\x07\xa3\x00\xc8\x99\x95\x84\xb6\xad\xab\x2f\x01\x40\x16\xd9\x48\x38\xa5\xc0\x4e\xcf\x41\xc7\x21\xa6\x3f\xb4\xf4\x18\x1a\xdc\x67\x93\x10\x2b\xb7\x41\x4d\xc0\xd6\x1b\xb2\xe4\x52\x84\x06\x35\x3b\x4c\xa4\xfe\x33\x85\xa1\x58\x49\x69\x8a\x12\xce\xa5\x7f\x11\x00\x1e\x35\xd5\xae\xeb\xe5\xdc\x2e\xa7\x99\xc9\xce\xe7\xb4\x40\x7f\x7b\x7d\x5f\x7c\xd8\xe8\x31\xc6\x6b\x1f\xd4\x66\xce\x72\xf5\x27\x10\x26\x2a\x80\xba\x04\xe3\xfb\x6f\xfa\xcc\xd4\x7a\x75\x34\x6d\x3f\xf7\xe0\x7d\xa2\xdd\x5b\x57\x41\x45\x86\x5e\x0a\x26\x71\x0b\x00\x00\xff\xff\x68\xfa\x3e\xad\xdb\x01\x00\x00")

func type_admin_graphql() ([]byte, error) {
	return bindata_read(
		_type_admin_graphql,
		"type/admin.graphql",
	)
}

var _type_auth_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\xa9\x2c\x48\x55\x70\x2c\x2d\xc9\x08\xc9\xcf\x4e\xcd\x53\xa8\xe6\x52\x50\x28\x01\xb1\xac\x14\x82\x4b\x8a\x32\xf3\xd2\x15\xb9\x6a\xb9\x00\x01\x00\x00\xff\xff\xa3\x33\x16\xdc\x24\x00\x00\x00")

func type_auth_graphql() ([]byte, error) {
	return bindata_read(
		_type_auth_graphql,
		"type/auth.graphql",
	)
}

var _type_company_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x92\x4d\x6b\xf4\x20\x14\x85\xf7\xfe\x8a\x3b\xbb\xf7\x85\xd9\xb4\x4b\x77\xf3\x41\x61\xa0\x9f\x94\xac\x4a\x17\x97\xf1\x8c\x08\x89\x8a\x31\x85\x30\xcc\x7f\x2f\x6a\x52\xc2\x24\xd3\x65\x77\xd7\xe3\xf1\xf8\x78\xaf\xb1\xf7\xa0\x9d\x6b\x3c\xdb\x9e\xce\x82\x88\xbd\x0f\xee\x0b\x4a\xd2\xd6\xb9\x1a\x6c\x05\x51\xd7\x19\x25\xa9\xaa\x0e\xfb\x95\x20\x3a\x06\x70\x84\xda\x44\x49\xef\x31\x18\xab\x05\x91\xe5\x06\xe3\x32\x79\x1a\xb6\xac\x11\xda\x7f\x9e\x35\x24\xbd\xb2\xc6\x9a\x4e\xa6\x8e\x08\x92\x9e\xca\xe6\x43\x5e\xae\xc9\x05\x85\xb0\xed\x25\xbd\x94\xe2\xff\x8f\x23\x1d\x4b\x69\x0a\x35\x34\x47\x2c\xc7\xed\x87\xdd\x5f\xf2\x46\xcb\x18\xc8\x4a\x05\xb4\xad\xa4\x4d\x29\x56\xe2\x22\x44\x6e\xc5\x20\x94\x56\x94\xfa\xd1\x58\xdc\x4d\x1f\x37\xd1\xef\xa7\xfa\xd1\x75\x36\xf6\x53\xc5\xbb\x36\xee\x9c\xc2\xcc\x15\x26\xb6\xf1\xea\x61\x0a\x89\x91\x4c\xe3\x6b\x34\xb0\xb1\x4d\x8f\x35\x36\x35\xfc\xad\x43\x28\x33\x82\xd2\x68\x25\x7d\x0c\x27\x3e\xd3\x4d\xac\x71\xb0\x27\x57\x9a\x93\xaa\x94\x6b\xac\xef\x22\xed\xf2\xc0\x06\xf3\x21\x4b\xe7\x0c\x92\x85\xe7\xab\xd1\xfd\xdd\xab\x0b\x5d\xe5\xd5\x12\xdd\xd5\x9f\x9b\xb3\xde\xf8\xab\x4b\xf8\x37\xe8\x67\xf0\x0b\xec\x73\x74\x71\x11\xdf\x01\x00\x00\xff\xff\x73\xcf\xa7\xa0\x35\x03\x00\x00")

func type_company_graphql() ([]byte, error) {
	return bindata_read(
		_type_company_graphql,
		"type/company.graphql",
	)
}

var _type_course_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x56\x4d\x6f\xe3\x36\x13\xbe\xfb\x57\x4c\xe2\x43\xde\x17\x48\x0e\xdd\x7c\xa0\xf5\x2d\xab\x75\x51\x03\x29\x36\xb5\x65\xb4\x45\x90\xc3\x84\x1a\xcb\xc4\x52\xa4\x4a\x0e\x93\x08\x8b\xfd\xef\x05\x49\xd9\xa2\x9d\xb8\x48\xba\x97\xc2\x80\xf5\xc1\xf9\x7e\x9e\x99\x11\x69\xdf\xc0\xb5\x10\xe4\x5c\xd9\xb5\x04\x5f\x47\x00\x96\x1c\x5b\x29\x98\xaa\x11\x80\x69\x49\x8f\xbe\x8d\x46\x51\x70\xc1\xd6\x0b\xf6\x96\xa6\x8a\x1a\xd2\x1c\xc5\x1b\x53\x79\x45\x23\x00\x26\xc7\x23\x00\x45\xce\x99\x41\xa7\x30\xde\x3a\xda\x1a\x37\x5a\x49\x1d\xa4\x85\x42\xe7\xac\x31\x4d\x90\x94\x9a\xc9\xae\x50\x10\x2c\x3a\xa5\xf0\xc1\xbb\x19\x53\x13\x15\x34\x36\x34\x09\x9e\xa5\xae\x8f\x46\x00\xde\xcb\x6a\x02\xcb\xe5\xec\x53\x78\x12\xa6\x69\x15\x31\x4d\xe0\xa3\x31\x8a\x30\xfa\xe5\xe0\xec\x26\x86\x01\x32\x9c\x87\x58\xdd\xf7\x9b\x06\x68\xda\xf3\xe5\xfc\x66\xa3\x13\x73\x7e\xe6\xdc\x04\x63\xed\x26\x70\x57\x62\x7d\x74\xbf\x0d\x25\x95\x20\xba\x0c\x0e\x66\x9a\xa3\x68\xd7\xd2\x24\x2b\xcf\xd1\x2b\x11\x3d\xa0\xf8\x52\x5b\xe3\x75\x55\xac\x49\x7c\xc9\x43\xc1\x2d\x68\x93\x0c\xc0\xa0\xd4\x5a\x29\x68\x02\x3f\x2b\x83\x9c\x12\x51\xc6\x66\x31\xd3\xb3\x20\xdb\x72\xf6\x46\x6a\xb6\xa6\xf2\x82\xa5\xd1\xd9\xeb\xb5\x79\x2a\x4d\xb1\x2d\x43\xf6\xde\x5b\x97\x9f\x44\x57\x23\x80\xa7\x35\xf2\x9f\xc6\xdf\x10\x5a\x3d\x81\xbb\x3e\x8f\xfb\xc8\xa9\xbf\xbc\xb4\x09\x88\xdd\x13\xd7\x92\x90\x2b\x29\x4a\xb2\x8d\xcb\x9c\x08\x64\xaa\x8d\xed\x26\x50\xf4\x77\x21\x69\xa5\xcc\x13\x55\xa5\xf9\xe8\xbb\xbc\x18\xae\x87\x36\x98\xce\x50\x7e\x81\xc1\x2d\xd6\x94\x53\xe2\x16\x6b\xa9\x91\xa9\xfa\xcd\x93\xed\x22\x42\x54\xd5\x14\xec\x24\x85\x10\x61\x8b\x35\xcd\xf4\xca\x4c\x82\x78\xbc\x4b\x94\x6d\x3d\xc3\x02\x1f\xa9\xd8\x30\x39\xa9\xcc\xe2\x41\x06\xf6\x1e\xae\x59\x6e\x81\x6a\x89\x70\xef\x81\xe5\xdd\xa4\xd8\xe3\xc4\x2b\x94\xe8\x69\x1b\xa9\xff\x4f\xa0\x3c\xa0\xd6\x64\x67\x0d\xd6\xb4\xf0\xd1\x7e\x6e\xc4\xb3\xb1\x43\x4a\x30\x4e\x17\xb3\x02\x5e\x13\x94\xe1\x14\xfe\xb7\x6d\x7b\x10\xa9\x2b\x8c\x56\xdd\xff\x43\x6b\xe1\xf3\x2d\x5a\x96\x42\xb6\x18\x49\x92\x2a\xe7\x18\x2d\x7f\xc2\xc0\xb2\x52\x36\x21\x15\xd2\xd5\xce\xb3\x32\x02\x77\x2a\xb4\x03\xce\xe7\x38\x6f\xbe\x0f\x99\x31\x38\x12\x46\x57\x68\xbb\xe2\x0d\xc8\xc1\x18\x16\x6b\x63\x19\x2a\x72\xc2\xca\x36\x04\x17\xaa\x90\x12\x3e\x80\x2b\x8c\xe1\xe4\xfa\xc1\x78\x06\x5e\x4b\xd7\xcb\x9e\x04\xc7\x41\xea\x50\x33\x06\xad\x5f\xcc\x13\xb0\xd9\x8e\xab\xc3\xfa\xaf\x35\x2d\x8c\x61\xea\x58\x36\xa1\x07\x92\xc8\x21\x5b\x87\xdb\x3b\x04\xf1\xfb\x1a\x19\x3a\xe3\x4f\x94\x02\x15\xce\x4f\xe0\xc1\x2b\x45\x0c\xad\x91\x9a\xdd\xe1\x11\x10\xb4\xe7\xd9\xd1\x4b\xc5\xff\x2a\xdf\xdd\x66\x1b\x6e\xa7\xc5\x30\x73\x12\x01\x87\xb7\x91\x75\x69\xe2\xef\x2f\xd1\xfd\xcd\x33\x68\x5b\x42\xa6\x12\xeb\x81\xb7\xfb\xfb\x61\x27\xaf\xa3\xed\xb0\x2b\xb1\x8e\xe2\x83\xd9\xb7\xeb\x6e\x18\xfe\x6f\x0c\xe4\x71\x6f\xec\xbc\x27\xf8\xa4\x7f\xeb\xad\x58\xa3\xeb\x9b\xd6\x0d\x06\x12\x11\x03\x70\x61\x85\xde\xc7\xc2\x39\xb2\x03\x92\x47\x30\x86\x1b\xe9\x38\x74\x5b\x45\x8a\x6a\x64\x72\x31\x7c\x17\xdb\x94\x2d\xce\xf4\xa3\x91\x82\xa6\x0d\x4a\x95\x61\x19\x88\xd4\x32\x55\x3d\x01\x7a\x86\xbd\xb2\x82\x0b\xa3\x57\xd2\x36\x2f\xbf\x37\xf6\xa2\x9e\x93\x6b\x8d\xee\xb7\x3e\x5b\xd4\x0e\x63\x27\x16\xfb\x5f\x15\x21\x66\xb6\x9e\x40\xa6\x39\x19\x7a\x0f\x75\x07\xd2\x81\xd1\x80\x20\x8c\x66\x8b\x82\x01\x75\x05\xbc\xf6\x0e\x2a\x43\x4e\x9f\x30\x68\xa2\x2a\x74\x6b\x8b\x1d\xf8\x76\x65\x4d\x3f\x30\xad\x6c\xa9\x50\x92\x34\x2f\x48\x58\xca\xe7\xd2\x6c\xf5\x5a\x2c\xc1\xd7\x0a\x95\xa3\xd3\xd4\xf0\xd2\x41\x2d\x1f\x49\x83\x33\xb1\xc0\x20\x50\x07\x2f\xdb\x5c\x17\x84\x56\xac\x37\x9b\x76\x4e\xce\x2b\x7e\xe3\x5a\xdd\x5b\xcf\x87\xb6\xeb\x18\xee\x60\xfa\xc7\xf5\xaf\xb7\x37\x53\x28\x3e\x2f\xe7\x8b\x29\x2c\xca\xf9\xb2\x28\x97\xf3\xe9\x68\x0c\x00\x5f\x53\x33\x1d\xa7\xaf\xcf\xe3\xd3\x9e\xaa\xc7\xe7\x17\xe7\x17\xe7\x67\xf9\xff\x45\xbc\x1c\x7f\x3b\xdd\xd1\x4b\x5f\xa9\x83\xde\x0f\x1f\xe2\xef\x2c\x5d\x3e\x9c\x65\x4f\xfb\xaa\xe1\x3b\x77\x50\xfc\xf1\xa7\xf4\x3b\xbb\xbc\x8a\xbf\xb3\xcb\xab\xed\xcd\xe5\xd5\x65\x52\xbe\x1f\xfd\x1d\x00\x00\xff\xff\x72\x0c\xc4\xfc\x69\x0b\x00\x00")

func type_course_graphql() ([]byte, error) {
	return bindata_read(
		_type_course_graphql,
		"type/course.graphql",
	)
}

var _type_delegate_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x92\xc1\x4e\xc3\x30\x10\x44\xef\xf9\x8a\xed\x0d\x7e\xc1\xb7\x92\x5e\x22\x21\x54\x20\x3d\xa1\x0a\x2d\xcd\xd4\x18\x1c\xdb\xb2\x1d\x50\x54\xf5\xdf\x91\x93\xa6\x49\xd3\x5e\xb8\xd9\xa3\x59\xef\xee\xf3\xc4\xd6\x81\x56\xd0\x90\x1c\x41\x87\x8c\xa8\x69\x54\x25\x68\xb3\x29\x56\x8b\x8c\x68\xe7\xc1\x11\xd5\x32\x0a\x7a\x8d\x5e\x19\x99\x11\x95\x65\xfe\x5e\xac\x06\x21\xb9\x50\xb3\xd2\x13\xc7\x5e\xf9\x10\x9f\xb8\xc6\xd4\xa4\xf9\x5a\x8b\xd0\x70\x9f\xd6\x60\x52\x9c\x7c\x8f\x56\x2a\x33\x35\x7e\xd9\x8f\x52\x45\x7d\x51\xbc\xb3\xb5\x63\xd3\x0a\xca\xfb\x43\xd2\x9c\xb7\x7b\xa5\x51\xd4\x2c\xb1\xf1\xd3\x99\x78\x17\xd5\x8f\x8a\xed\x9d\x63\x09\x41\x6b\x96\xb8\x17\xb4\x3c\xa9\xe9\x3a\x98\x90\xdb\xc6\x07\x04\x41\x6f\xcb\xc9\x7d\xb1\xcd\x8e\x59\xa6\x8c\x6b\x22\xe5\x1d\x96\x81\x5b\xd1\x69\x87\x71\xa4\x44\xaf\x67\xf8\x1f\x18\x73\x8a\xb7\x76\xbe\x05\x4c\xc2\xc0\x73\xc4\x9a\x43\xf8\xb5\xbe\x12\xf4\x60\xad\x06\x9b\x39\x0f\xa7\x2d\x57\xa5\xfd\xc6\x19\x6d\xda\xa8\x8b\xc0\xe5\x42\x2f\x08\xce\x9a\xd0\x07\xa2\x3a\x89\xe2\x9c\x93\xc5\xa4\x69\x35\x76\x9d\x3d\x39\xb8\x13\x5a\x52\xb5\xd3\xa8\x61\x62\x48\xe4\x95\x49\x95\xcf\x0d\x7c\xdb\xb5\x40\x25\x3b\xdc\x43\xc9\x36\x4d\xce\x12\x85\xd9\xdb\xfe\xab\xd2\x69\xc4\x3f\xf8\xba\x98\x74\x2f\x5c\x67\xd2\xcd\xe6\x4a\x9a\xb1\x69\xb3\x91\xcf\x31\xfb\x0b\x00\x00\xff\xff\x66\xf7\x0c\x7e\x00\x03\x00\x00")

func type_delegate_graphql() ([]byte, error) {
	return bindata_read(
		_type_delegate_graphql,
		"type/delegate.graphql",
	)
}

var _type_individual_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xce\x3d\xca\xc2\x40\x10\x87\xf1\x7e\x4e\x31\xef\x35\xd2\xbe\x55\x1a\x0b\x3f\x0e\x30\xb2\x7f\x75\x64\xb3\xbb\xcc\xcc\x2a\x22\xb9\xbb\x90\x42\x03\x69\x7f\xf0\xc0\xa3\xa5\xf5\xe0\x7f\x83\x04\xc6\x92\xf4\xa1\xa9\x4b\x1e\x17\x7d\x13\xf3\x45\xcd\x63\x27\x13\x06\x3e\x84\x69\xb9\xfe\x11\x73\x96\xad\xdd\xeb\xf9\xa8\x91\xbf\x46\xcc\x81\x8c\x76\xab\x65\x6d\x98\x44\xf3\xba\x6b\xe2\xfe\xac\x96\x7e\x36\x13\xc5\xab\x61\x33\xb5\x87\xb7\x5a\x1c\xcb\x57\x77\xd8\xc0\x27\x87\xd1\x4c\x9f\x00\x00\x00\xff\xff\xb1\x3b\x04\x79\xc5\x00\x00\x00")

func type_individual_graphql() ([]byte, error) {
	return bindata_read(
		_type_individual_graphql,
		"type/individual.graphql",
	)
}

var _type_lesson_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x8c\xb1\xca\x83\x40\x10\x84\xfb\x7d\x8a\xf1\x35\x6c\xff\xbf\x11\x52\x18\x82\x55\x48\xb1\xe0\x64\x39\x88\xeb\xe1\xad\x10\x09\xbe\x7b\x38\x2d\xd2\x0d\x33\xdf\x7c\xb1\x65\xe2\xc2\x52\x66\xef\xd5\x88\x34\xe5\x17\x27\x7a\x14\xf4\x6a\xc9\x35\x38\x5e\x57\x2e\x1b\x3e\x02\x70\x34\x96\x16\xf7\xf3\xf0\x10\x20\xab\xb1\xf3\xe7\xdc\x56\xfc\x48\xb2\x8b\x24\xcf\x6b\xe0\x6f\xa1\x06\x4f\xb6\x3b\x9a\xea\x70\x9d\xd8\xe2\x16\x4b\x72\x6b\x04\x08\xb5\xaa\x1c\x86\xee\xbf\xa9\xc6\xe0\x3b\x7e\xfb\x2e\xdf\x00\x00\x00\xff\xff\x22\x19\xc7\xa3\xa2\x00\x00\x00")

func type_lesson_graphql() ([]byte, error) {
	return bindata_read(
		_type_lesson_graphql,
		"type/lesson.graphql",
	)
}

var _type_manager_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x92\xcd\x6e\xe3\x30\x0c\x84\xef\x7a\x0a\x2e\xf6\x2d\x7c\xdb\x4d\xb0\x80\x81\x6d\x91\xfe\xf8\x54\xf4\xc0\x46\xb4\xc2\x42\xa2\x04\x49\x46\x10\x04\x79\xf7\x42\x76\x7e\x9c\x5a\x97\xde\xec\xc1\x70\xc0\x8f\xa3\x7c\x08\x04\x0f\x28\x68\x28\x02\x1c\x15\xc0\x30\xb0\x6e\xa0\xeb\xda\xf5\x2f\x05\xb0\x8d\x84\x99\xf4\x9f\xdc\xc0\x4b\x8e\x2c\x46\x01\x90\x43\xb6\x97\xff\x62\xea\x39\xa6\xfc\x88\x8e\xe6\xa2\xc5\xa5\x96\xc9\x52\xd8\x79\x59\x18\xff\x7b\xc3\x32\x17\x3f\xfd\xc7\x2b\x67\x7b\x67\xdc\x7a\x17\x50\x0e\x0d\xac\xa6\x8f\xa2\x85\xe8\x7b\xb6\xd4\x3a\x34\xd4\xc5\xeb\x56\xea\xa4\xd4\x1c\x6d\x83\x86\x80\x5d\xb0\xe4\x48\x72\x82\x0d\x1a\x96\x02\xf6\x34\x50\x3c\x8c\xdc\xa4\x0d\xa5\x06\xde\xce\x13\xef\x25\x1c\x0d\xb5\xd2\xfb\xa6\xf8\xc7\xaf\x92\xcb\x12\x86\x7c\x09\x1e\x17\x9f\xe6\xbf\x5f\x25\x60\x4a\x7b\x1f\xf5\x5c\x13\xff\x4c\x29\x34\xf0\xd7\x7b\x4b\x28\xb7\xb8\xd5\x78\xe7\x73\x68\x3b\x4a\xc7\x1b\x72\x69\x63\xea\x04\x7e\xc3\x3f\x1f\x01\xb5\x63\x49\xb0\xdf\x91\x4c\x15\xb1\x18\x70\xd3\x74\x02\xdf\x83\xe6\xbe\xa7\x48\x92\xcf\x11\x4c\xe9\x27\x45\x2d\x60\x6a\x7d\x54\xdb\x5c\x52\x5f\x19\xd7\x64\xa9\xc2\x38\x7f\x70\x57\x6f\x17\x74\xed\x1e\xf7\x8f\xf3\x6e\xcb\x1a\x5e\x85\xae\xb6\x77\x85\x4f\x9d\xd4\x57\x00\x00\x00\xff\xff\xf3\x0d\x49\x60\x1b\x03\x00\x00")

func type_manager_graphql() ([]byte, error) {
	return bindata_read(
		_type_manager_graphql,
		"type/manager.graphql",
	)
}

var _type_module_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x93\xcb\x6a\xeb\x30\x10\x86\xf7\x7a\x8a\xf1\x6b\x78\x77\x4e\x2f\x60\x68\x21\xad\xe3\x76\x51\xb2\x50\xac\xa9\x11\x95\x47\x46\x97\x80\x29\x79\xf7\x22\x29\xb1\x65\x93\x96\x74\xd5\x95\x25\xcd\xc5\xf3\x7f\xbf\xe4\xc6\x01\xe1\x51\x0b\xaf\x10\x64\x3f\x28\xec\x91\x9c\x85\x7a\x54\x8a\xef\xbd\xad\x1c\xf6\xf0\xc9\x00\xbc\x97\xa2\x84\xa6\xa9\x6e\x0b\x06\x40\xbc\xc7\x12\x6a\x67\x24\x75\x61\xbf\xe7\x44\x68\xaa\x9e\x77\xd8\x3c\x3f\x9c\x23\x0c\x40\xa0\x6d\x8d\x1c\x9c\xd4\x94\xe7\x3b\xc3\x29\x05\xf2\xd3\x83\x96\x2d\xea\x03\x9a\x65\x8f\x83\x14\xa8\x4b\x78\x09\x1f\x06\x60\x4f\xa3\x95\xf0\x96\x4f\x59\xec\x18\x40\xab\x83\x04\x87\x25\xfc\xd7\x5a\x21\x27\x76\x64\x0c\xc9\xf7\xa9\x7a\x1b\xc4\x06\x35\xaf\x55\xbd\xad\xfe\x85\x60\xd4\x1f\x83\x31\x10\xb6\xe5\x9c\x1c\xa6\xf2\x46\xcd\x43\x1e\x19\x93\x34\x78\x97\x52\xaa\xb8\xbc\xb2\x2e\x8e\x91\x48\xdf\x25\xcc\xa9\x12\xad\x63\x00\x0a\xad\xd5\x34\xf7\x4f\x89\x13\xfe\xd4\x7f\x51\x5d\xac\x5c\x99\x4a\x6f\x0c\x72\x87\xa7\x06\xd3\x84\x6b\xcb\x1c\xef\x02\xc2\x58\xbb\xfb\xad\x53\x99\xdf\xb5\x6f\x5b\xb4\x76\xab\x3f\x90\x72\xd3\xce\x5e\x7e\x17\xcf\x4c\x8d\x43\x2e\x9d\x9d\xe5\x17\xbb\xc9\xa6\x5c\xd8\x86\x8f\x4a\x73\x11\xa5\xf5\xf1\xe4\x8c\x67\x06\xd1\x0c\xe2\x02\x88\xe5\x4d\x5e\x63\xc8\x31\x5d\xa6\x72\x11\xca\x9f\x31\xc9\x35\xfe\xcc\x24\x7b\xe9\x1b\xde\x2d\x5e\xfb\x86\x77\x92\xb8\x43\xf1\xe4\xd1\x8c\xb1\x1e\x45\x87\xf3\x4f\x03\x99\x81\x77\x58\xd1\xbb\x2e\x43\x7a\x5c\xad\x6f\xeb\xbd\x54\x0e\xcd\x0a\xf2\x75\x4c\x8f\xec\x2b\x00\x00\xff\xff\xe9\xa1\x81\xac\x89\x04\x00\x00")

func type_module_graphql() ([]byte, error) {
	return bindata_read(
		_type_module_graphql,
		"type/module.graphql",
	)
}

var _type_question_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x93\xdd\x6e\xa3\x40\x0c\x85\xef\xe7\x29\x8c\xf6\x2d\xb8\x4b\x58\x36\x8b\x94\xdd\x26\x0d\x48\x95\x2a\x14\x59\xc1\x41\xa3\xc2\x0c\x65\x06\xb5\x28\xca\xbb\x57\x0c\x61\xc2\x5f\xaa\x26\x77\xd8\xb2\x7d\x8e\x3f\x0f\xba\x2e\x08\xb6\x15\x29\xcd\xa5\x80\x13\x03\xa8\x2a\x9e\xb8\x10\x45\xc1\x6f\x87\x01\x68\xfa\xd4\x2e\xec\x74\xc9\x45\xda\xc4\x25\x8a\x44\xe6\x5c\xd1\x42\xa8\x0f\x2a\x95\x0b\x4b\x29\x33\x42\xc1\x00\xde\x2f\x63\xc2\xba\x20\xd7\x0e\x6d\xa2\xa6\x13\xbb\x86\xd7\xb6\xd5\x89\xd9\x99\xb1\x81\xfe\x06\x53\x02\x9e\x17\x19\xe5\x24\xb4\x82\x0d\xa6\x5c\xa0\xa6\x64\x5b\x51\x59\x1b\x77\x94\xa4\xd4\xcc\xe8\x5a\x62\x06\x50\x60\x4a\x81\x38\x4a\xb7\x69\x30\x5f\x76\x72\x2b\x35\xb3\x17\x57\x9e\x2c\x4b\x3a\xe8\xfe\x02\xfd\x65\x9b\x9a\x1c\x53\x8a\x9e\xd7\x36\x75\x66\x8c\x44\x95\x0f\x56\x33\xb3\x77\xc1\xff\xd5\xda\xdf\x7b\x7f\x9f\x02\xcf\xb7\x65\xad\xb8\x2d\x0a\xfd\x97\x90\x01\x04\xff\x16\x2b\xff\x12\xee\xdb\xe0\xcc\x18\x17\x45\xa5\xc1\x2b\x09\x35\x75\xe3\x03\x93\x3b\xdd\x73\x05\xe7\x8e\x33\xb4\x62\x4b\x54\xfc\xd0\x8e\x31\x7a\x4e\x6c\xce\x8e\x69\x53\x62\x68\xc5\xce\xd8\xe0\xb8\xc7\x78\x9c\x12\x75\xe0\x17\x24\x74\xc4\x2a\xd3\x0a\xb4\x84\x23\x66\x8a\x6e\x60\x0e\xe5\x1b\x89\x5e\x12\x2d\x3b\xb7\xc7\xd1\xb1\x87\x1d\x92\xda\x60\x9d\x49\x4c\x8c\x8f\x6e\xfd\xeb\xea\x57\xfb\x51\x91\xcc\xf2\xbd\xfd\xe6\x1f\x7e\xf2\x03\xd4\xad\xee\x14\xf5\x98\xf4\xd8\xe9\x2c\xe8\xab\xd9\x6f\x38\xcd\xdd\xe3\xe1\x73\x74\xd0\x87\xf8\x7e\x0a\xbd\xcb\xfc\xe1\x99\x9e\xfc\x8b\x53\xfd\x70\x04\xe4\x2b\x00\x00\xff\xff\x60\x64\xc9\x14\xa2\x04\x00\x00")

func type_question_graphql() ([]byte, error) {
	return bindata_read(
		_type_question_graphql,
		"type/question.graphql",
	)
}

var _type_test_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x54\xc1\x8e\xd3\x30\x10\xbd\xe7\x2b\x26\xea\x5f\xe4\xb6\x80\x56\xea\x89\xae\xda\x1e\xd0\xaa\x07\x37\x7e\x9b\xb5\x70\xec\xe0\x19\xb3\xaa\x10\xff\x8e\xec\xa4\x71\x5a\x08\x02\xc1\xa9\x63\x77\xde\xcb\x9b\x37\x2f\x91\xcb\x00\x3a\x80\x85\x4c\x3f\x58\xf4\x70\xc2\xb4\xbf\x58\xab\xce\x91\xb7\x82\x9e\xbe\x55\x44\x4e\xf5\x68\x68\x2f\xc1\xb8\xae\xae\x88\x62\x34\xba\xa1\xe3\x71\xfb\x21\x9d\x5a\x9f\xa0\x82\x86\xde\x79\x6f\xa1\x5c\x45\x24\xaa\xe3\x86\x9e\x0f\xaa\xab\x4f\x15\x91\x12\x41\x3f\x08\x3f\x58\xeb\xdf\xa0\x1b\xda\x3a\xa9\x88\x06\xc5\xbc\x43\x68\xe1\x44\x75\x68\xe8\xd1\x7a\x95\xee\xbf\x44\xb0\x18\xef\xf8\xe0\x1f\x1c\xbf\x21\x5c\x01\x41\x39\xed\x7b\xc3\x18\xaf\x79\xf9\xc8\x19\xd4\xd0\xf3\xd3\x54\xd7\xa7\xea\x7b\x55\xcd\x43\xee\x54\x87\xe5\xa0\x3b\xd5\x19\xa7\x04\xfa\x29\x22\x5c\xf2\xa8\xd0\x1d\xb2\x72\xb0\x9c\xb2\xc4\x0e\x5b\xf7\xe2\x9b\xd4\x9c\xab\xc4\x68\xdc\x10\x25\x53\x3e\x1a\x2b\x08\x19\x5a\x5c\xb9\xb3\x6c\xd6\xf0\x3e\x40\x09\x46\x25\x17\xeb\x95\xce\x38\x01\x4b\x93\xc9\x0a\x75\xe9\xdc\xe6\xf3\xaf\xb6\x30\x79\x9c\xd7\xb0\x66\x72\xbd\xe6\x72\xbd\x6a\x73\xfd\x3b\x9f\x6b\xda\xd0\xc7\xaf\x08\xc1\x68\x30\x0d\x08\x33\xc9\x8c\x51\xe9\x74\xb7\x8f\x51\x63\x06\x07\x8d\x00\x4d\xd6\xb0\x90\x7f\x21\x79\x45\xe9\x24\xe3\x48\x5e\x0d\x67\x4b\x8a\x19\xd7\x6d\x8e\x62\xb2\x17\x57\x48\x22\x9e\x92\x48\x9b\xfc\x7b\x4f\x4a\x67\x18\xd7\x91\xca\x58\xe8\xe4\x53\x2e\xd7\x91\x0c\x8b\x56\xa0\xa7\xc6\xa2\x63\x1f\xcf\xbd\x91\xdb\xa5\xb4\x3e\x06\x46\xa2\x4a\xd6\xd1\x86\x0a\xcf\xf8\x57\x2e\x23\x23\x50\x9a\x4b\x7d\x4e\x62\xd2\x95\xe4\x97\xce\x4d\xfb\x5f\x57\x93\xfb\x2e\x3e\x92\x0a\x98\x14\xa5\x48\x5d\xc7\x58\xa6\x7d\xf4\x67\xf4\xf9\x93\x8f\xe1\xda\x42\xe2\x67\xaa\x39\x8b\x65\x98\x65\x16\x39\xb6\x2d\x78\xb1\xef\x32\xfd\x71\xd0\x3f\x45\xf2\xf6\x43\x70\x93\xf9\x3f\xcb\xe7\x7f\xfd\x08\xfc\x4b\x36\xff\x3a\x9a\xd9\xc4\xe2\xc9\xea\x0b\xfd\x23\x00\x00\xff\xff\xac\x4d\xf0\xb4\x62\x05\x00\x00")

func type_test_graphql() ([]byte, error) {
	return bindata_read(
		_type_test_graphql,
		"type/test.graphql",
	)
}

var _type_users_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x53\xcd\x6a\xdc\x30\x10\xbe\xeb\x29\xbe\xc5\x97\x16\x4a\x1e\xc0\xb7\x25\xa5\xb0\x50\x4a\x4b\xb2\xa7\x92\xc3\xac\x35\xf6\x4e\x23\x4b\xae\x34\x4a\x31\x25\xef\x5e\x24\xaf\x37\x4e\x53\xe8\x4d\x33\xd6\xf7\x37\x23\xb3\xcf\x23\x8e\x89\xe3\xfd\x3c\x31\x7e\x1b\x60\x24\x4f\x03\x47\x03\x88\xb7\xf2\x24\x36\x93\x33\x80\x65\xc7\x03\x29\x9b\x67\x63\x9a\x8a\x80\x24\x10\xf4\x2c\x1e\x5a\xc0\x7a\x26\x45\x17\x9c\x23\xe5\x04\xf1\x7d\x88\x23\xa9\x04\x0f\x3a\x85\xac\xd0\x33\xaf\xe4\x1f\x5e\xe8\x1a\x90\xb7\x1b\x29\xe4\x42\x5d\x08\xd3\x0d\xee\xc2\xc8\xe8\x85\x9d\x4d\xa0\xc8\xf0\x41\x31\x04\xf1\x03\x34\xe0\xc4\xa0\x27\x12\x47\x27\xc7\xb0\x3c\xb1\xb7\xe2\x07\xd3\x20\xf8\xaa\x55\x4d\x85\x7e\x21\x9c\x43\xae\x0c\x91\x7f\x66\x4e\x5a\x28\x2c\x29\xa1\x0f\xf1\xc6\xd4\x9b\x35\x52\x19\x40\xa9\xda\xeb\x4c\x76\x06\xe0\x91\xc4\xb5\xb8\xd3\x58\x04\x80\x5e\x62\xd2\x2f\x34\xf2\xda\x2b\x97\x1c\xbd\xed\x29\x3b\x9e\xce\xc1\xf3\x06\xfc\x23\x9c\xee\x45\xdd\xb6\x55\xa0\x9f\xc3\x20\x7e\x8b\xed\xc2\x38\x91\x9f\x5b\xdc\x2e\x07\x03\x4c\x31\xf4\xe2\xf8\x30\xd2\xc0\xc7\xb8\x75\x44\x9d\xca\x93\xe8\xfc\x6e\xa2\x81\x5b\x7c\xa5\x81\xdf\xb7\xd8\x5f\xba\xa5\x5c\x2f\xf1\x6d\xc8\x31\x71\x6a\xf1\x7d\xbf\xa9\x77\x0f\x06\x68\xd0\x71\x54\xe9\xa5\x2b\x2b\xac\x0d\xb2\x36\x72\x4a\x2d\xf6\xcb\xa1\xac\xbf\xbe\x99\x95\xfb\xfa\x6e\x3c\xff\x5a\xa8\x56\x25\x52\xb6\x97\x1c\x8e\x95\xed\xf5\x6b\x4f\xe2\xae\xe5\xb3\x59\xc6\xbf\xf5\x0a\x29\x90\x91\xbd\xa6\x12\x45\x7c\xa1\xfa\x96\x39\xce\x55\x89\xed\xf0\xe2\x5f\x74\x2e\xd6\x4b\xee\x83\xef\xc3\x92\xbd\x9c\xde\x30\x57\x6c\xce\x62\x5b\x1c\x8f\x87\x8f\xbb\xeb\xaa\xb7\x51\xea\xe4\x23\x17\xc1\xbd\xbe\x5e\x47\xb1\x5b\xb6\xb1\xda\x6e\xf0\x42\x7f\x99\xe2\x7f\xcd\x37\xf8\xcb\xfe\x05\xf8\x50\xbf\xfc\x23\x44\x83\xaa\xd4\x60\x7f\x71\x80\x2e\xc7\xc8\x5e\xdd\x8c\x13\xd7\x3f\x81\x1e\xd9\xe3\x34\x83\xea\x4b\x37\x6f\x4c\xd5\xdc\xaf\xed\xd7\x40\x0b\xcf\x5e\x95\xc7\x49\x5b\x1c\xbc\x96\xf6\x28\x3e\x2b\xa7\xfb\x48\xdd\x23\xdb\x16\x9f\x5c\x20\xdd\x99\x67\xf3\x27\x00\x00\xff\xff\x27\xaa\xe4\x2d\x2a\x04\x00\x00")

func type_users_graphql() ([]byte, error) {
	return bindata_read(
		_type_users_graphql,
		"type/users.graphql",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"mutation.graphql": mutation_graphql,
	"query.graphql": query_graphql,
	"schema.graphql": schema_graphql,
	"type/admin.graphql": type_admin_graphql,
	"type/auth.graphql": type_auth_graphql,
	"type/company.graphql": type_company_graphql,
	"type/course.graphql": type_course_graphql,
	"type/delegate.graphql": type_delegate_graphql,
	"type/individual.graphql": type_individual_graphql,
	"type/lesson.graphql": type_lesson_graphql,
	"type/manager.graphql": type_manager_graphql,
	"type/module.graphql": type_module_graphql,
	"type/question.graphql": type_question_graphql,
	"type/test.graphql": type_test_graphql,
	"type/users.graphql": type_users_graphql,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"mutation.graphql": &_bintree_t{mutation_graphql, map[string]*_bintree_t{
	}},
	"query.graphql": &_bintree_t{query_graphql, map[string]*_bintree_t{
	}},
	"schema.graphql": &_bintree_t{schema_graphql, map[string]*_bintree_t{
	}},
	"type": &_bintree_t{nil, map[string]*_bintree_t{
		"admin.graphql": &_bintree_t{type_admin_graphql, map[string]*_bintree_t{
		}},
		"auth.graphql": &_bintree_t{type_auth_graphql, map[string]*_bintree_t{
		}},
		"company.graphql": &_bintree_t{type_company_graphql, map[string]*_bintree_t{
		}},
		"course.graphql": &_bintree_t{type_course_graphql, map[string]*_bintree_t{
		}},
		"delegate.graphql": &_bintree_t{type_delegate_graphql, map[string]*_bintree_t{
		}},
		"individual.graphql": &_bintree_t{type_individual_graphql, map[string]*_bintree_t{
		}},
		"lesson.graphql": &_bintree_t{type_lesson_graphql, map[string]*_bintree_t{
		}},
		"manager.graphql": &_bintree_t{type_manager_graphql, map[string]*_bintree_t{
		}},
		"module.graphql": &_bintree_t{type_module_graphql, map[string]*_bintree_t{
		}},
		"question.graphql": &_bintree_t{type_question_graphql, map[string]*_bintree_t{
		}},
		"test.graphql": &_bintree_t{type_test_graphql, map[string]*_bintree_t{
		}},
		"users.graphql": &_bintree_t{type_users_graphql, map[string]*_bintree_t{
		}},
	}},
}}
