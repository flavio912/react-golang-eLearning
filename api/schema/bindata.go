package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _mutation_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x95\xcd\x6e\xeb\x38\x0c\x85\xf7\x7e\x0a\x06\xd9\xb4\x8b\xe9\xec\xb3\xeb\x24\x28\x10\xa0\x45\x3b\x8d\xf3\x00\xac\xc5\x38\x42\x65\xc9\x63\x49\xed\x04\x83\xbe\xfb\x40\xb2\xac\xbf\xe4\xde\xa5\x3f\xf3\x1c\x52\xa4\x29\xaf\x61\xb0\x06\x0d\x57\x52\x43\x87\x12\x06\xc5\xf8\xe9\x02\xe6\x4c\xc0\x3e\x1e\x80\xfe\xa5\xce\x1a\x62\xa0\xe9\x1f\x4b\xd2\x70\x14\xe2\xf2\xd0\x34\x5c\x8e\xd6\xc0\x71\x14\x0a\xd9\x13\x17\xf4\x42\x06\xe1\xbf\x06\xe0\xc4\x05\xb5\x97\x91\x36\x70\x30\x13\x97\xfd\xaa\x01\xe8\x94\x34\x24\xcd\x33\xc9\xde\x9c\x37\xb0\x97\x66\xd5\xfc\x34\x8d\xb9\x8c\x94\x59\xbc\x93\x1e\xbd\x85\x9d\x44\xae\xd6\xb6\xeb\x48\xeb\x56\x7d\x92\x4c\xfc\xe7\xba\x86\xc3\x1c\xe8\x3d\x7e\x29\xf2\x49\x5f\xc2\x91\x7d\x28\xb2\x81\xcb\x67\xd5\x73\x79\xe7\x1d\x37\xf0\x18\xc9\xea\x7e\x03\x8f\xd6\x9c\xbd\x4f\x03\x30\xa0\xc4\x9e\xa6\x22\xfa\x25\x63\x75\x3c\x23\x41\x3d\x1a\x2a\x04\xbb\x1c\x96\x0a\xd7\xac\x89\xd0\x50\x30\x5d\x24\xdb\x1c\xee\x1d\x73\xba\xf0\xec\x5a\x36\xb2\x6b\xd1\x31\x87\x37\x44\xe3\xa4\xdc\xb4\xf6\x03\xf6\x34\x77\xf1\xdd\x0d\x59\x9b\x64\x90\x8f\xd7\x89\xcb\x69\xd5\x89\xdf\x32\xc3\x6b\x8f\x30\x9e\xb2\x06\xd7\xa0\xab\xc2\x77\x39\x8c\x85\xff\xa5\x94\x20\x94\xab\xd4\x24\x3f\xa7\xb2\x45\x1e\x45\x89\x7f\x8a\x55\x16\xe1\xc7\x84\xae\xc2\xe7\xa2\x8a\xf0\x5d\x42\xbf\x29\x68\x99\x6c\x59\xd3\x42\xa3\xb0\xc4\xae\x93\x4a\x6a\x6a\x00\xd6\xa1\xd2\xe5\x55\x72\xde\xaa\x61\x44\x79\x29\x8d\x03\x4c\xbe\xf3\x73\x3c\x70\x25\x3a\xe6\xf0\x86\x68\x1d\x0e\x9e\x48\x91\x7b\xf9\x38\x1a\x00\xb7\xd2\x9e\xdd\xac\xc4\x07\x84\x4d\xb9\xf9\xe9\xfa\x80\x89\x3a\x1c\x4d\x77\xc6\x7c\xd7\xf3\xae\x02\xe0\x38\x4e\xea\x2b\x1e\xc3\x5a\xce\x36\x70\x3c\xee\x77\x79\xdd\x6e\xd9\xf1\x8b\x5e\xa5\xe0\x92\xb6\xca\x4e\x3a\xb6\xff\x50\xf1\xec\xcc\xee\x11\xd6\xd0\xbe\xee\x5e\x01\x85\x50\xdf\x20\xb8\xfc\x0c\x5e\x5b\x81\x5a\x4f\x4a\x0d\xd7\x76\xd5\xab\x1b\x8e\x8a\x29\x40\xc6\xc0\x58\xa3\x26\x30\x0a\x3a\xff\xca\xed\x9b\x9d\xba\x33\xea\x50\x8c\x5e\x6c\xdf\x4a\x1c\x2d\x2b\x1e\x3f\x93\x38\x97\x16\xfb\xf2\x7b\x68\xb1\x8f\xea\x16\xfb\x34\x40\x34\xd4\xab\xa9\xfe\x7a\x02\x4d\x67\x08\x20\x65\x78\x26\xad\x55\xb5\x61\x33\x8b\xa2\xf9\x31\x2a\xf6\x92\xf1\x2f\xce\x2c\x8a\x52\x95\x78\xb5\x05\xe9\x45\xb6\x07\xda\x7e\x0c\xdc\xb4\xd9\x55\x74\x88\x24\xea\x13\x7a\xc3\x8b\xbb\x64\x60\x1d\x98\x06\x8c\x37\xef\x9f\x3c\x26\xd0\x80\x52\x7f\xd3\xa4\xdd\x54\x10\x0c\x69\x93\x7a\x99\xe5\xda\x46\x52\xd5\x9a\xe5\x8a\x3b\xd6\x16\xf7\x25\xab\x85\x09\x2d\xc2\x98\xf2\x6f\xb7\x4d\xbc\x6e\xef\x42\xab\xd4\x0b\xae\xd3\xd7\x26\xc7\x82\x56\x65\x5c\x9b\x2c\x2b\xbf\xbc\xc9\x7e\x40\x8a\x59\x51\x5d\x64\x33\xab\x2a\x9b\x61\x6e\x19\xfe\x09\x9e\x37\x9e\x84\x1e\xbb\x8d\xc8\x22\xe6\x67\x0f\x34\x99\xe5\xce\xcb\x36\x6c\x18\x05\xf9\xdf\xf4\x1f\x2e\x40\x03\x3f\x65\x83\x85\x11\xb5\x26\x06\x6a\x82\x13\x72\x41\x0c\x10\xba\x45\x1b\x96\x0e\xee\x9e\xd4\x04\x3e\x8f\xbe\x6f\x7e\x9a\xff\x03\x00\x00\xff\xff\x0a\x9c\x06\xf2\xed\x08\x00\x00")

func mutation_graphql() ([]byte, error) {
	return bindata_read(
		_mutation_graphql,
		"mutation.graphql",
	)
}

var _query_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x55\xcb\x6e\xe3\x46\x10\xbc\xf3\x2b\xca\xf0\xc5\x06\x8c\xf8\xce\x9b\x1f\x70\x60\x20\x4e\x6c\x58\x3e\x05\x41\xd0\x22\x9b\xe4\xc4\xc3\x19\x66\x1e\x6b\x73\x17\xfe\xf7\xc5\xcc\xf0\x25\x81\x14\xb0\x37\x49\x55\xdd\x55\xdd\xaa\x26\xcf\xf1\xbf\x67\x23\xd8\xc2\x36\xda\xcb\x12\x4a\x3b\xb4\xba\x14\x55\x0f\xd7\x30\xca\xfd\x6f\xe0\x4f\x2e\xbc\xe3\x12\x42\xa1\x23\x63\x48\x4a\x96\x99\xeb\x3b\xc6\x33\xd5\xfc\xa8\x2a\x8d\x1f\x19\xe0\xb4\x23\x99\xe3\x51\xb9\x33\x9c\xe3\x4f\xdf\xee\xd9\x40\x57\xe8\xa8\x66\x0b\xaa\x1c\x1b\xb8\x46\x58\x68\xc5\x19\xa0\xab\xca\xb2\x9b\xf8\xbb\x86\x87\x9f\x42\x4d\xe4\x85\x42\x54\x46\xb7\xd1\x8a\x75\x64\x5c\x06\x48\xd1\x8a\xc3\xb2\x96\x3e\x83\xfd\x0f\x85\x8e\x4d\xac\xca\x80\x5a\x7c\x63\xb5\xe2\x46\x38\x6e\x6d\x42\xb3\xaf\x2c\x13\xaa\xf3\x2e\xce\x11\x67\x58\x98\x3a\x90\x9a\xa9\x4f\xa4\xa8\x66\xf3\x20\x64\x98\x27\xd4\x28\x6a\x39\xc7\xab\x33\x42\xd5\x19\xc0\x2d\x09\xb9\xf8\xfe\x9f\xde\xef\x84\x93\x4b\x8a\xf7\xa2\xcc\xf1\xf6\xf6\x78\x1f\xd6\xc6\x92\xbb\x46\xab\x99\x30\x69\xdd\xb3\xe4\x9a\x1c\x2f\xc4\x0e\x4b\x5d\xf1\x6f\xf8\x3a\x35\xfe\x75\x2b\x27\xd4\xef\xb4\x37\x96\xed\xf6\xa4\x54\x14\x6c\xed\xae\xef\x38\xc7\xcd\xf4\x39\x03\xf6\x54\xbc\xd7\x46\x7b\x55\xde\x35\x5c\xbc\xe7\xb8\xd5\x5a\x32\xa9\x0c\xe8\x8c\x28\x38\xc7\x83\xd4\x14\x36\x4c\x52\xea\x0f\x2e\x77\xfa\xd6\xf7\x13\x0d\xe7\x78\x6d\xf4\x07\xb4\x92\x3d\x8a\xe4\x02\xae\x21\x87\x5e\x7b\x90\x61\x90\x77\x8d\x36\xe2\x3b\x97\x70\x1a\x7b\xad\xdf\x97\xb6\xdb\x8e\x54\xbf\xb5\xb3\x83\x19\xa6\xa2\x3f\xd8\x5a\xad\x36\xf7\x7c\xbc\x34\xaa\x6d\x8e\xbf\x03\xfa\x4f\xea\xe1\xd8\x54\x54\xc4\x83\x10\x8a\x1c\x97\x2f\x9e\x4d\x1f\x3b\x75\xc3\x8d\xe4\xd3\xb5\xcc\xb2\x7f\x99\x92\xcd\x6d\xe2\x91\x2d\x58\x95\x42\xd5\xcb\x75\x55\x82\xe5\xf4\x07\x9f\x85\xc2\x78\x77\x73\x77\x11\x3b\x8f\x38\x40\x65\x2b\xd4\xc5\xec\xfe\xec\x32\xc7\x4d\xf8\x6d\xc4\xec\x45\x30\x94\xcc\x8c\x58\xf8\x1c\x8a\xdb\x94\xed\x45\xf9\x65\x3e\x06\x7e\x86\x97\x1d\xae\x50\xc5\x9d\xe5\x87\x77\x71\x05\x9d\x26\xcb\xc7\x11\xe7\x46\xcf\xe9\x3e\xcb\x21\xdb\x47\x5e\xc7\xc8\x2f\x18\xeb\x7a\x87\xb7\xb1\x2a\x38\x52\x06\xc5\x22\x05\xe3\x48\x70\x88\xcb\x84\x8b\x0d\xbd\x83\x58\xad\xca\x0d\x8c\x41\x4d\xc6\x44\x1d\x89\xa5\x98\x4d\xe8\xba\xd2\x32\x8b\xab\x42\x89\x30\x4d\x15\xef\x63\xc3\xf3\xe2\x82\x37\x3c\x07\xc6\xd0\xca\xdb\x50\xf4\x66\xd9\x64\x19\x10\x5f\x0d\xd6\x89\x2d\x9b\x2f\x03\x7a\xa2\xfb\x48\x19\xfa\xcf\x1d\x8f\xd6\x32\xf2\x22\xc7\xb1\x75\xeb\x8a\x3b\xb6\xee\x84\x5a\x80\x27\xa5\xd0\xe5\x48\x25\xe0\x11\x6b\x75\xe9\xe5\xc6\xca\x9e\x22\x76\x2a\xc5\x91\x30\xe9\xa4\x5e\x47\x4a\x89\x93\x96\x68\x99\x4c\xd1\xbc\xf6\x52\xd2\xde\xaf\x6b\x8e\x60\x52\xbd\xc4\xf5\x35\x6e\xc2\x73\xd1\x0e\xc5\x42\xd5\xa3\xe7\xab\x31\x39\x20\x55\xa6\x55\x45\x95\x82\x1c\xd7\x3a\xbc\xc8\x2f\x62\xfd\xef\xec\xc2\xb3\x35\xbd\x4a\x79\x08\xc9\x82\x95\x7d\x65\x3f\x03\x00\x00\xff\xff\x88\xef\x16\xe2\xfb\x07\x00\x00")

func query_graphql() ([]byte, error) {
	return bindata_read(
		_query_graphql,
		"query.graphql",
	)
}

var _schema_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x4e\x4e\xcc\x49\x2c\x52\x08\x0d\xf5\x74\xe1\x82\xb2\x43\x32\x73\x53\xb9\xb8\x8a\x93\x33\x52\x73\x13\x15\xaa\xb9\x14\x14\x0a\x4b\x53\x8b\x2a\xad\x14\x02\x41\x14\x97\x82\x42\x6e\x69\x49\x62\x49\x66\x7e\x9e\x95\x82\x2f\x94\xc5\x55\xcb\x05\x08\x00\x00\xff\xff\xc2\x82\x45\xdf\x48\x00\x00\x00")

func schema_graphql() ([]byte, error) {
	return bindata_read(
		_schema_graphql,
		"schema.graphql",
	)
}

var _type_admin_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x90\xcd\x8a\x83\x30\x14\x85\xf7\x79\x8a\x3b\xaf\x91\xdd\x30\x6e\x84\x61\x70\x28\xae\x4a\x17\x17\x72\x0d\x17\x92\x18\xf2\x43\x11\xf1\xdd\x8b\xb1\x60\xd5\x52\xda\x5d\x38\x9c\x7c\xdf\x49\xd2\xe0\x09\xbe\x95\x65\x07\xa3\x00\xc8\x99\x95\x84\xb6\xad\xab\x2f\x01\x40\x16\xd9\x48\x38\xa5\xc0\x4e\xcf\x41\xc7\x21\xa6\x3f\xb4\xf4\x18\x1a\xdc\x67\x93\x10\x2b\xb7\x41\x4d\xc0\xd6\x1b\xb2\xe4\x52\x84\x06\x35\x3b\x4c\xa4\xfe\x33\x85\xa1\x58\x49\x69\x8a\x12\xce\xa5\x7f\x11\x00\x1e\x35\xd5\xae\xeb\xe5\xdc\x2e\xa7\x99\xc9\xce\xe7\xb4\x40\x7f\x7b\x7d\x5f\x7c\xd8\xe8\x31\xc6\x6b\x1f\xd4\x66\xce\x72\xf5\x27\x10\x26\x2a\x80\xba\x04\xe3\xfb\x6f\xfa\xcc\xd4\x7a\x75\x34\x6d\x3f\xf7\xe0\x7d\xa2\xdd\x5b\x57\x41\x45\x86\x5e\x0a\x26\x71\x0b\x00\x00\xff\xff\x68\xfa\x3e\xad\xdb\x01\x00\x00")

func type_admin_graphql() ([]byte, error) {
	return bindata_read(
		_type_admin_graphql,
		"type/admin.graphql",
	)
}

var _type_auth_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\xa9\x2c\x48\x55\x70\x2c\x2d\xc9\x08\xc9\xcf\x4e\xcd\x53\xa8\xe6\x52\x50\x28\x01\xb1\xac\x14\x82\x4b\x8a\x32\xf3\xd2\x15\xb9\x6a\xb9\x00\x01\x00\x00\xff\xff\xa3\x33\x16\xdc\x24\x00\x00\x00")

func type_auth_graphql() ([]byte, error) {
	return bindata_read(
		_type_auth_graphql,
		"type/auth.graphql",
	)
}

var _type_company_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x92\x4f\x6b\x33\x21\x18\xc4\xef\x7e\x8a\xc9\xed\x7d\x21\x97\xf6\xe8\x2d\x49\x29\x04\xfa\x97\xb2\xa7\xd2\x83\xc4\x27\x22\xec\x3e\x8a\xba\x85\x25\xe4\xbb\x17\x75\x53\x96\xec\xe6\xda\xdb\x38\x8e\xfa\x73\x78\xd2\xe0\x09\x3b\xd7\x79\xc5\x03\x4e\x02\x50\xde\x07\xf7\x4d\x5a\x62\xeb\x5c\x4b\x8a\x05\xd0\xf7\x56\x4b\x34\xcd\xfe\x61\x25\x80\x43\x20\x95\x48\x6f\x92\xc4\x47\x0a\x96\x8d\x00\x58\x75\x74\x59\xe6\x4c\xa7\x58\x19\x0a\xf1\x9f\x57\x86\x24\xde\x94\xa1\x35\x8e\xb6\x4d\x14\x24\x9e\xeb\xe6\x63\x59\xae\xe1\x82\xa6\xb0\x1d\x24\x5e\xab\xf8\xff\x9b\xc8\xc7\xf2\x6d\x4a\xeb\x40\x31\x4a\x6c\xaa\x58\x89\xb3\x10\x85\x7c\x34\x2a\x79\xd5\x4f\x96\xe9\x6e\xca\x32\xf1\xef\xa7\xfe\xc1\xf5\x9c\x86\xa9\xe3\x5d\x4c\x3b\xa7\x69\x96\x0a\x93\xd8\xe5\xe9\xb1\xb4\xcc\x08\xdb\xf9\x96\x3a\xe2\x14\xf3\x57\x2d\xe7\x7e\xde\x7b\x0a\xb5\x52\xd2\x86\xa2\xc4\xe7\x78\xe2\x2b\xbf\xa4\x0c\xed\xf9\xe8\x6a\x35\x59\xe5\x7b\x2d\xfb\x3e\x61\x57\xfa\x1d\xc3\xfb\x62\x9d\x0a\x48\x31\x5e\xae\x9a\xfe\xbb\x5f\x57\xba\xc6\xeb\x25\xba\xab\x11\x99\xb3\xde\x18\xad\x25\xfc\x1b\xf4\x33\xf8\x05\xf6\x39\xba\x38\x8b\x9f\x00\x00\x00\xff\xff\xc7\xdd\x28\x06\xe4\x02\x00\x00")

func type_company_graphql() ([]byte, error) {
	return bindata_read(
		_type_company_graphql,
		"type/company.graphql",
	)
}

var _type_course_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x56\x4d\x6f\x1b\x37\x13\xbe\xeb\x57\x8c\xad\x83\xdf\x17\x88\x0f\x8d\xe3\xa0\xdd\x9b\xa3\xa8\xa8\x00\x17\x71\xac\x15\xda\xc2\xf0\x61\xcc\x1d\xad\x88\x70\xc9\x0d\x67\x18\x47\x08\xf2\xdf\x0b\x92\x2b\x89\x52\xac\x20\x69\x73\x28\x04\x68\x77\x49\x3e\xf3\xf9\xcc\x0c\xc9\x86\x0e\xae\x94\x22\xe6\x7a\xdd\x13\x7c\x1a\x01\x78\x62\xf1\x5a\x09\x35\x23\x00\xd7\x93\x1d\x7d\x1e\x8d\xd2\xc1\xb9\xf8\xa0\x24\x78\x9a\x1a\xea\xc8\x4a\x3a\xde\xb9\x26\x18\x1a\x01\x08\xb1\x8c\x00\x0c\x31\xbb\x1d\x66\xe2\x82\x67\xda\x0a\x77\xd6\x68\x1b\x4f\x2b\x83\xcc\xde\xb9\x2e\x9e\xd4\x56\xc8\x2f\x51\x11\xcc\xd7\xc6\xe0\x43\xe0\x99\x50\x97\x00\xa2\xc5\x50\x15\x55\x6b\xdb\x9e\x8c\x00\x42\xd0\x4d\x05\x8b\xc5\xec\x75\xfc\x52\xae\xeb\x0d\x09\x55\xf0\xca\x39\x43\x98\x14\x4b\xd4\x76\x9d\xec\x00\x1d\xf7\xa3\xb1\xfc\x03\x64\x03\x74\xfd\xc5\xe2\xf6\x7a\x83\x49\x5e\x7f\x94\x52\x84\x60\xcb\x15\xdc\xd5\xd8\x9e\xdc\x6f\x6d\xa9\x89\xe5\x47\x5b\xb2\xa7\x08\x00\x45\xa8\xeb\x85\xaf\x8c\x71\x8f\xd4\x54\x30\xb3\x31\x1b\x3d\x32\xdf\x90\x57\x64\x05\x5b\xaa\xe0\x57\xe3\x30\xae\xbf\x0f\xc4\xa2\x9d\xe5\xda\x5d\x59\x7e\x24\xbf\x01\x78\xb4\x8d\xeb\x34\x53\x5e\xe6\x52\xe5\x16\x54\xc1\xdd\xdb\xe1\xbd\xf0\x32\xa7\x3a\xf9\xa3\xb3\x01\x29\x20\xeb\x9e\xaa\x82\x06\x71\xcd\x62\xb7\xe7\xed\x03\xaa\x77\xad\x77\xc1\x36\x93\x15\xa9\x77\xa5\xce\xde\x6b\xb5\xb1\x3b\x87\xc2\x38\x5f\xc4\x9f\x3e\x2a\xf2\xbd\x14\x2b\xda\x8a\x77\x4d\x50\xd1\xba\x62\x79\xe5\x1e\x6b\x37\xd9\x06\xb2\x58\x0f\x9e\xcb\x9d\x4d\x88\x1e\x57\x28\x7f\xb9\x70\x4d\xe8\x6d\x05\x77\x83\xb5\xf7\xa9\x42\xde\x07\xed\x73\x2e\xf7\x77\xb8\x27\xa5\x97\x5a\xd5\xe4\x3b\x2e\x94\x28\x14\x6a\x9d\x5f\x57\x30\x19\xde\x62\xca\x72\xaa\x6a\xf7\x2a\xac\x4b\x97\x79\x60\x47\x14\x5d\x10\xe5\x8b\x48\xdf\x60\x4b\x25\xab\x6e\xb0\xd5\x16\x85\x9a\xb7\x81\xfc\x3a\xe5\x81\x9a\x96\xa2\x9c\x0c\xb8\x4f\x84\x68\x69\x66\x97\xae\x8a\xc7\xd3\x5b\x2e\xc0\x3e\x08\xcc\xf1\x03\x4d\x36\x75\x99\x21\xb3\xb4\x51\xa4\xf4\x20\x7b\x85\x6f\x91\xac\x99\xb2\xdf\x93\x96\xaf\xa4\x1e\xb7\x7d\xa9\x2a\x7a\xd4\x01\x27\x9e\xa0\xc4\x50\x19\xa9\x78\xbe\x96\x94\x07\xb4\x96\xfc\xac\xc3\x96\xe6\x21\xc9\x2f\x85\x04\x71\x7e\xe7\x12\x8c\xf3\xc3\x2d\x41\x56\x04\x75\xdc\x85\xff\x6d\x9b\x18\xa8\xcc\x7d\x67\xcd\xfa\xff\xb1\x4d\xe0\xc7\x1b\xf4\xa2\x95\xee\x31\x91\x24\x47\x8e\x05\xbd\xbc\xc6\xc8\xb2\x5a\x77\xd1\x15\xb2\xcd\xde\xb7\x71\x0a\xf7\x22\xb4\x97\x9c\x37\xa9\x7b\xfe\xbb\xcc\x8c\x81\x49\x39\xdb\xa0\x5f\x4f\xbe\x21\x73\x30\x86\xf9\xca\x79\x81\x86\x58\x79\xdd\x47\xe3\x62\x14\xb2\xc3\x47\xf2\x0a\x63\x38\xbb\x7a\x70\x41\x40\x56\x9a\x87\xb3\x67\x51\x71\x3c\x75\xac\x18\x23\xea\x37\xf7\x08\xe2\xb6\x0d\xef\x38\xfe\xa9\xa2\x85\x31\x4c\x59\x74\x17\x6b\x20\x1f\x39\x26\xeb\x78\x79\x47\x23\xfe\x58\xa1\xc0\xda\x85\x33\x63\xc0\xc4\xfd\x33\x78\x08\xc6\x90\x40\xef\xb4\x15\x3e\xde\x02\x22\xfa\xb6\xd8\xfa\x12\xf8\x5f\xe5\x3b\x6f\x66\xfb\xb6\x5b\xec\x7a\x4e\x26\xe0\x6e\x35\x8f\xac\x64\xe7\xe1\x95\xe0\x70\x76\xed\xd0\x9e\x50\xa8\xc6\x76\xc7\xdb\xc3\x29\xb0\xe7\xd7\xc9\x6e\x78\x62\x9b\x8e\xef\xc4\x7e\x3b\x76\xc3\xf0\x7f\x22\xa0\xb4\x7b\x23\xe7\x7b\x8c\xcf\xf8\x9b\xe0\xd5\x0a\x79\x28\x5a\xde\x09\xc8\x44\x8c\x89\x8b\x83\xf2\x3e\x05\x8e\xd3\xc0\x1d\x32\x79\x02\x63\xb8\xd6\x2c\xb1\xda\x1a\x32\xd4\xa2\x10\x27\xf3\x39\x95\xa9\x78\x9c\xd9\x0f\x4e\x2b\x9a\x76\xa8\x4d\x91\xcb\x48\xa4\x5e\xa8\x19\x08\x30\x30\xec\x89\x41\x3b\x71\x76\xa9\x7d\xf7\xe5\xe5\xe9\xc0\xea\x5b\xe2\xde\xd9\x61\xb6\x8b\x47\xcb\x98\x2a\x71\x72\x78\x2f\x89\x36\x8b\x0f\x04\x3a\xf7\xc9\x58\x7b\x68\xd7\xa0\x19\x9c\x05\x04\xe5\xac\x78\x54\x02\x68\x1b\x90\x55\x60\x68\x1c\xb1\x3d\x13\xb0\x44\x4d\xac\xd6\x1e\xd7\x10\xfa\xa5\x77\x43\xc3\xf4\xba\xa7\x89\xd1\x64\x65\x4e\xca\x53\xd9\x97\x66\xcb\xa7\x6c\x89\xba\x96\x68\x98\x9e\xe5\x82\xd7\x0c\xad\xfe\x40\x16\xd8\xa5\x00\x83\x42\x1b\xb5\x44\x5f\xc7\x70\x07\xd3\x3f\xaf\x7e\xbf\xb9\x9e\xc2\xe4\xcd\xe2\x76\x3e\x85\x79\x7d\xbb\x98\xd4\x8b\xdb\xe9\x68\x0c\x00\x9f\x32\xcb\x4f\xf3\x25\xf7\xf4\xd9\xc0\xa1\xd3\x8b\x17\x17\x2f\x2e\xce\xcb\xff\x17\xe9\x71\xfa\xf9\xd9\x1e\x2e\x5f\x86\x77\xb8\x9f\x9e\xa7\xdf\x79\x7e\x3c\x3f\x2f\xbe\x0e\xa1\xf1\x3a\xbd\x03\xfe\xfc\x4b\xfe\x9d\x5f\xbe\x4c\xbf\xf3\xcb\x97\xdb\x97\xcb\x97\x97\x19\x7c\x3f\xfa\x3b\x00\x00\xff\xff\xe6\x29\xbc\xe2\xd0\x0b\x00\x00")

func type_course_graphql() ([]byte, error) {
	return bindata_read(
		_type_course_graphql,
		"type/course.graphql",
	)
}

var _type_delegate_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x92\xc1\x4e\xf3\x30\x10\x84\xef\x79\x8a\xed\xed\xff\x5f\xc1\xb7\xd2\x5e\x22\x21\x54\x20\x3d\x21\x84\x96\x7a\x6a\x0c\x8e\x6d\xd9\x0e\x28\xaa\xfa\xee\xc8\x49\xd3\xa4\x69\x2f\xdc\x92\xd1\xac\x77\xe7\xdb\x4d\xad\x07\xad\x61\xa0\x38\x81\x0e\x05\x51\xd3\x68\x29\x68\xbb\x2d\xd7\x8b\x82\x68\x17\xc0\x09\x72\x99\x04\x3d\xa7\xa0\xad\x2a\x88\xaa\x6a\xf5\x56\xae\x07\x21\xbb\x50\xb3\x36\x13\xc7\x5e\x87\x98\x1e\xb8\xc6\xd4\x64\xf8\x5a\x4b\x30\xf0\x1f\xce\x62\x52\x9c\x7d\xf7\x4e\x69\x3b\x35\x7e\xba\xf7\x4a\x27\x73\x51\xbc\x73\xb5\x67\xdb\x0a\x5a\xf5\x1f\x59\xf3\xc1\xed\xb5\x41\x59\xb3\xc2\x36\x4c\x67\xe2\x5d\xd2\xdf\x3a\xb5\xff\x3c\x2b\x08\xda\xb0\xc2\x7f\x41\xcb\x93\x9a\x7f\x8b\x63\x51\x68\xeb\x9b\x44\xab\x2e\xf5\x80\xa5\xec\xb4\xc3\xd8\x31\xc3\xe9\x11\xfd\x25\xeb\x1c\xd2\xad\x48\xb7\x78\x28\x58\x04\x4e\xd8\x70\x8c\x3f\x2e\x48\x41\x77\xce\x19\xb0\x9d\xc7\xf5\xc6\xb1\xac\xdc\x17\xce\xe4\x72\xa2\x6e\xc3\x97\x81\x9e\x10\xbd\xb3\xb1\xdf\xb7\x3c\x89\xe2\x7c\x06\x8b\x49\x53\x39\x76\x9d\x3d\x39\xb8\x33\x39\xd2\xb5\x37\xa8\x61\x53\xcc\x60\xb5\xcd\x95\x8f\x0d\x42\xdb\xb5\x80\x54\x88\x82\x5e\x86\x92\xd7\x3c\x39\x2b\x94\x76\xef\xfa\x4d\xe4\xaf\x11\xff\xe0\xeb\xae\xa0\x7b\xe1\xfa\xe4\xfc\x6c\xae\xac\x59\x97\x93\x8d\x7c\x8e\xc5\x6f\x00\x00\x00\xff\xff\x41\x95\x11\x83\xdf\x02\x00\x00")

func type_delegate_graphql() ([]byte, error) {
	return bindata_read(
		_type_delegate_graphql,
		"type/delegate.graphql",
	)
}

var _type_individual_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xce\x3d\xca\xc2\x40\x10\x87\xf1\x7e\x4e\x31\xef\x35\xd2\xbe\x55\x1a\x0b\x3f\x0e\x30\xb2\x7f\x75\x64\xb3\xbb\xcc\xcc\x2a\x22\xb9\xbb\x90\x42\x03\x69\x7f\xf0\xc0\xa3\xa5\xf5\xe0\x7f\x83\x04\xc6\x92\xf4\xa1\xa9\x4b\x1e\x17\x7d\x13\xf3\x45\xcd\x63\x27\x13\x06\x3e\x84\x69\xb9\xfe\x11\x73\x96\xad\xdd\xeb\xf9\xa8\x91\xbf\x46\xcc\x81\x8c\x76\xab\x65\x6d\x98\x44\xf3\xba\x6b\xe2\xfe\xac\x96\x7e\x36\x13\xc5\xab\x61\x33\xb5\x87\xb7\x5a\x1c\xcb\x57\x77\xd8\xc0\x27\x87\xd1\x4c\x9f\x00\x00\x00\xff\xff\xb1\x3b\x04\x79\xc5\x00\x00\x00")

func type_individual_graphql() ([]byte, error) {
	return bindata_read(
		_type_individual_graphql,
		"type/individual.graphql",
	)
}

var _type_lesson_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x8c\x31\x0a\xc3\x30\x0c\x45\x77\x9d\x42\xb9\x86\xd7\x76\x31\x74\x48\x29\x99\x4a\x07\x41\x7e\x85\x21\x51\x8c\xad\x40\x43\xc9\xdd\x8b\x93\xa1\x9b\x78\x7a\xff\xf9\x96\xc1\x37\xd4\xba\x58\x2f\x0a\x4e\x73\x9e\x30\xc3\xbc\x72\x2f\x9a\x4c\x1c\xe3\x7d\x45\xd9\xf8\x4b\xcc\x18\x15\x35\xf0\xf3\x1c\xbc\x88\x39\x8b\x22\xda\x7b\x09\x4d\x3f\x2e\xda\x89\x92\xe5\xd5\xf9\x52\x20\x8e\xd3\x8d\x07\x69\x0d\x4f\x3e\x21\xf0\xc3\x4b\x32\xed\x1a\x10\x6d\xcd\x61\x88\xd7\xae\x25\x1d\x1f\xff\xff\x77\xfa\x05\x00\x00\xff\xff\xd4\x85\xeb\xa7\xa3\x00\x00\x00")

func type_lesson_graphql() ([]byte, error) {
	return bindata_read(
		_type_lesson_graphql,
		"type/lesson.graphql",
	)
}

var _type_manager_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x92\xcd\x6e\xe3\x30\x0c\x84\xef\x7a\x0a\x2e\xf6\x2d\x7c\xdb\x4d\xb0\x80\x81\x6d\x91\xfe\xf8\x54\xf4\xc0\x46\xb4\xc2\x42\xa2\x04\x49\x46\x10\x04\x79\xf7\x42\x76\x7e\x9c\x5a\x97\xde\xec\xc1\x70\xc0\x8f\xa3\x7c\x08\x04\x0f\x28\x68\x28\x02\x1c\x15\xc0\x30\xb0\x6e\xa0\xeb\xda\xf5\x2f\x05\xb0\x8d\x84\x99\xf4\x9f\xdc\xc0\x4b\x8e\x2c\x46\x01\x90\x43\xb6\x97\xff\x62\xea\x39\xa6\xfc\x88\x8e\xe6\xa2\xc5\xa5\x96\xc9\x52\xd8\x79\x59\x18\xff\x7b\xc3\x32\x17\x3f\xfd\xc7\x2b\x67\x7b\x67\xdc\x7a\x17\x50\x0e\x0d\xac\xa6\x8f\xa2\x85\xe8\x7b\xb6\xd4\x3a\x34\xd4\xc5\xeb\x56\xea\xa4\xd4\x1c\x6d\x83\x86\x80\x5d\xb0\xe4\x48\x72\x82\x0d\x1a\x96\x02\xf6\x34\x50\x3c\x8c\xdc\xa4\x0d\xa5\x06\xde\xce\x13\xef\x25\x1c\x0d\xb5\xd2\xfb\xa6\xf8\xc7\xaf\x92\xcb\x12\x86\x7c\x09\x1e\x17\x9f\xe6\xbf\x5f\x25\x60\x4a\x7b\x1f\xf5\x5c\x13\xff\x4c\x29\x34\xf0\xd7\x7b\x4b\x28\xb7\xb8\xd5\x78\xe7\x73\x68\x3b\x4a\xc7\x1b\x72\x69\x63\xea\x04\x7e\xc3\x3f\x1f\x01\xb5\x63\x49\xb0\xdf\x91\x4c\x15\xb1\x18\x70\xd3\x74\x02\xdf\x83\xe6\xbe\xa7\x48\x92\xcf\x11\x4c\xe9\x27\x45\x2d\x60\x6a\x7d\x54\xdb\x5c\x52\x5f\x19\xd7\x64\xa9\xc2\x38\x7f\x70\x57\x6f\x17\x74\xed\x1e\xf7\x8f\xf3\x6e\xcb\x1a\x5e\x85\xae\xb6\x77\x85\x4f\x9d\xd4\x57\x00\x00\x00\xff\xff\xf3\x0d\x49\x60\x1b\x03\x00\x00")

func type_manager_graphql() ([]byte, error) {
	return bindata_read(
		_type_manager_graphql,
		"type/manager.graphql",
	)
}

var _type_module_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x51\x4d\x6a\xf3\x30\x10\xdd\xcf\x29\xc6\xd7\xf0\xee\xfb\xda\x2e\x0c\x2d\x94\x3a\x69\x17\x25\x0b\xc5\x1e\x82\xa8\x34\x32\xd2\x28\x10\x4a\xee\x5e\x24\xc5\xb6\x5c\x28\xb4\x2b\x5b\xf3\xe6\x0d\xef\x47\x2e\x13\xe1\x93\x1b\xa3\x21\xd4\x76\x32\x64\x89\x25\x60\x7f\x31\x46\x1d\x63\xe8\x84\x2c\x7e\x02\x62\x8c\x7a\x6c\x71\xbf\xef\xee\x1b\x40\x14\x2d\x86\x5a\xec\xc5\x6b\x3e\xa5\xc1\x51\x31\x93\xef\xac\x3a\xd1\xfe\xe5\x71\x46\x00\x71\xa4\x30\x78\x3d\x89\x76\x5c\xef\x8b\x57\x5c\x80\x7a\x7a\x76\x7a\x20\x77\x26\xbf\xbd\x71\xd6\x23\xb9\x16\x5f\xd3\x07\x10\xc3\x4d\x5b\x8b\xef\xb5\xcc\xe6\x00\x88\x83\x4b\x1e\x84\x5a\xfc\xef\x9c\x21\xc5\x70\x05\x20\x8e\xb6\xb0\x77\xc9\x6d\xb2\xf3\xd6\xf5\xbb\xee\x5f\x02\x73\x00\x19\xcc\x40\x7a\xb6\xeb\x72\x52\x15\xbd\x59\x45\x5e\x01\x34\x4f\x51\xca\x4a\x97\x7f\x7f\xc9\xcb\x32\x4a\xd4\x0f\x25\xe7\xc2\xa4\x20\x80\x68\x28\x04\xc7\xeb\xfd\xb2\xb8\xe4\x5f\xee\x6f\xd8\xcd\xb7\x5a\x16\xea\x9d\x27\x25\x74\x3b\xb0\x28\x64\x65\x37\x95\x89\x3a\xa5\x08\x33\xf7\xf0\xd7\xa6\xaa\xbe\xfb\x38\x0c\x14\xc2\xce\x7d\x10\xd7\xa5\xcd\x5d\xfe\x84\x57\xa5\x66\x91\xdb\x66\x57\xfb\xcd\x61\xa9\xa9\x36\xf6\xac\x2e\xc6\xa9\x31\x5b\xb3\x79\x32\xc7\x03\x57\xf8\x0a\x00\x00\xff\xff\x9f\xff\x52\xd0\xd6\x02\x00\x00")

func type_module_graphql() ([]byte, error) {
	return bindata_read(
		_type_module_graphql,
		"type/module.graphql",
	)
}

var _type_question_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x92\xdb\x6a\xc3\x30\x0c\x86\xef\xfd\x14\x32\x7b\x8b\xdc\xad\x59\xd9\x02\x65\xa7\x36\x57\x23\x0c\xd1\xa8\xc1\x2c\xb1\x33\x1f\xd8\x42\xe9\xbb\x0f\x3b\x4b\x73\x68\xca\xe8\x7a\x69\x21\xe9\xff\xff\xcf\xb2\x4d\x4d\xf0\xe2\xc8\x58\xa1\x24\xec\x19\x80\x73\x22\x8f\x20\x4d\x93\x3b\xce\x00\x2c\x7d\xdb\x08\xd6\x56\x0b\x59\xf8\xb7\x46\x99\xab\x4a\x18\xba\x95\xe6\x8b\xb4\x89\x60\xa1\x54\x49\x28\x19\xc0\xe7\xef\x9a\x4d\x53\x53\x74\x5c\xea\x5f\x7e\x12\xbb\x81\xb7\x76\x94\x67\xec\xc0\x58\xd0\x6f\x0b\x33\xea\xc2\xc4\x4a\x6b\xda\xda\xa1\xcc\xd0\x92\xef\xa9\xb0\xa0\xf4\x75\x75\x2c\x1d\x18\x23\xe9\xaa\x91\x81\xb0\x7b\x9d\x3c\xde\xaf\x96\xef\xf1\xc3\x53\x12\x2f\x7d\x9b\x90\xb5\xb3\x10\x6b\x42\x4b\x5d\x77\x12\x6a\xfb\x4b\xa2\xf3\x0b\xb2\xb7\x62\x0b\x34\x62\xdb\xae\x09\x7a\x3c\x0b\xac\xb1\xf0\x2d\x21\x7c\xc6\xa7\x06\xa7\x33\xc1\xe3\x29\x20\x0e\x37\x90\xd3\x0e\x5d\x69\x0d\x58\x05\x3b\x2c\x0d\x9d\xa1\xb6\x51\x1f\x24\x87\xdc\xc2\x6f\x8c\x79\x3c\x63\x53\x2a\xcc\x83\x5a\x17\xb2\x0f\xd8\x9b\x4c\xeb\x7c\x96\xe2\xf9\x73\xfa\xf7\x35\x8d\x80\xb6\xba\xa7\x40\xa7\x3c\xa7\x4e\x67\x71\xf6\x66\x67\xd9\x5e\x8d\x76\x0c\xe9\x4f\xb4\x3f\x01\x00\x00\xff\xff\x7b\x07\x4a\xd5\x9d\x03\x00\x00")

func type_question_graphql() ([]byte, error) {
	return bindata_read(
		_type_question_graphql,
		"type/question.graphql",
	)
}

var _type_test_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x53\x4d\x8b\xdb\x30\x14\xbc\xfb\x57\xbc\x90\x7f\xe1\x5b\xda\x52\xc8\xa9\x29\x49\x0e\xa5\xf4\xa0\x58\x53\x47\xd4\x96\x5c\xbd\xa7\x86\x50\xf6\xbf\x2f\x4f\x76\x6c\x27\x8b\x97\x5d\xf6\x64\x7d\xcc\x0c\xf3\x46\x63\xb9\x76\xa0\xcf\x11\x46\x70\x00\xcb\xce\x5c\x9b\x60\x2c\xfd\x2f\x88\x04\x2c\x25\xe9\x69\xf1\x54\x14\xce\x77\x49\x66\xc8\x6d\xde\x2b\xce\x9b\x16\x25\xed\x25\x3a\x5f\xaf\x94\x67\x6a\x2e\xe9\xe7\xf1\xb8\xfd\xb2\xfa\x55\x10\x19\x11\xb4\x9d\xf0\xa6\x69\xc2\x05\xb6\xa4\xad\x17\xc5\x75\x86\x79\x87\x58\xc1\x8b\xa9\x51\xd2\xd7\x26\x98\x7c\xf1\x37\x81\xc5\x05\xcf\x87\xb0\xf1\x7c\x41\x1c\x29\xd1\x78\x1b\x5a\xc7\xe8\xcf\xb9\xa4\x4f\x21\x34\x30\x7e\x45\x6b\xfa\xf6\x0f\x31\x3a\x0b\xa6\x0e\x71\x14\x19\x39\x46\x77\x73\xf5\xd1\x63\x26\x47\x8b\x08\x4b\x8d\x63\xa1\xf0\x9b\xe4\x8c\x09\x49\xce\x93\x9c\x1d\xe7\x48\xa6\x30\xbe\x0f\xf7\xbd\x99\x9c\xc5\x8d\xa2\xc2\x25\x65\x79\x5a\xe7\xef\xa3\x28\x9d\xe0\x7c\x4d\x26\x73\x61\x35\xa7\xbc\x5c\x66\x32\x1a\x54\x02\x3b\x00\x27\x1f\xfb\x74\x6a\x9d\xdc\x3f\x4a\x15\x52\x64\xa8\x94\x46\x47\x6b\x9a\x74\xfa\xab\xbc\x4c\x8c\x48\x3a\x97\xf9\xa3\x66\xf4\x48\x47\x24\xe7\x87\xf7\x5f\x76\x93\x71\xd7\x90\xc8\x44\x0c\x8e\x9c\xaf\xc7\x31\x34\xdd\xfb\x7c\xfa\x9c\x7f\x84\x14\x6f\x10\x92\x30\x4a\xe9\x34\xb9\x8b\xd3\x30\xf3\x2e\x72\xaa\x2a\xf0\xec\xbd\xa7\xe9\x8f\x9d\x7d\x51\xc9\x94\x9c\x1d\x6c\x3f\x14\xf4\x8d\xfd\x5c\xaa\xe7\x62\x3b\x5f\x2b\xe7\x47\xba\xf9\xee\x6a\xe6\x10\xa7\x4c\x16\x7f\xe8\xe7\x00\x00\x00\xff\xff\x47\xd9\x40\xfb\xf9\x03\x00\x00")

func type_test_graphql() ([]byte, error) {
	return bindata_read(
		_type_test_graphql,
		"type/test.graphql",
	)
}

var _type_users_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x53\x4d\x6b\xdc\x3c\x10\xbe\xeb\x57\x3c\xc1\x97\xf7\x85\x92\x1f\xe0\xdb\x92\x52\x58\x28\xa5\x25\xd9\x53\xc9\x61\xd6\x1a\x7b\xa7\x91\x25\x57\x1a\xa5\x98\x92\xff\x5e\x24\xef\x3a\x4e\xb3\xf4\x66\xcd\xcc\xf3\x31\x1f\x66\x9f\x47\x1c\x12\xc7\x87\x79\x62\xfc\x36\xc0\x48\x9e\x06\x8e\x06\x10\x6f\xe5\x59\x6c\x26\x67\x00\xcb\x8e\x07\x52\x36\x2f\xc6\x34\x15\x01\x49\x20\xe8\x49\x3c\xb4\x80\xf5\x44\x8a\x2e\x38\x47\xca\x09\xe2\xfb\x10\x47\x52\x09\x1e\x74\x0c\x59\xa1\x27\xbe\x90\x7f\x78\xa5\x6b\x40\xde\x6e\xa4\x90\x0b\x75\x21\x4c\xb7\xb8\x0f\x23\xa3\x17\x76\x36\x81\x22\xc3\x07\xc5\x10\xc4\x0f\xd0\x80\x23\x83\x9e\x49\x1c\x1d\x1d\xc3\xf2\xc4\xde\x8a\x1f\x4c\x83\xe0\xab\x56\x35\x15\xfa\x85\x70\x0e\xb9\x32\x44\xfe\x99\x39\x69\xa1\xb0\xa4\x84\x3e\xc4\x5b\x53\x2b\x6b\x4b\x65\x00\xe5\xd5\xae\x33\xb9\x31\x00\x8f\x24\xae\xc5\xbd\xc6\x22\x00\xf4\x12\x93\x7e\xa1\x91\x2f\xb1\x52\xe4\xe8\x7d\x4c\xd9\xf1\x74\x0a\x9e\x37\xe0\x1f\xe1\xf8\x20\xea\xb6\xa1\x02\xfd\x1c\x06\xf1\x5b\x6c\x17\xc6\x89\xfc\xdc\xe2\x6e\xf9\x30\xc0\x14\x43\x2f\x8e\xf7\x23\x0d\x7c\x88\x5b\x47\xd4\xa9\x3c\x8b\xce\xff\x4d\x34\x70\x8b\xaf\x34\xf0\xff\x2d\x76\xe7\x68\x79\x1a\xa0\x59\xca\xf8\x2e\xe4\x98\x38\x5d\xa9\x3d\xa7\xd6\xfa\x8e\xa3\x4a\x2f\x5d\xd9\xe8\x42\x60\x6d\xe4\x94\x5a\xec\x96\x8f\x72\x0d\xf5\x84\x2e\x52\xeb\x19\x79\xfe\xb5\x90\x5d\xdc\x91\xb2\x3d\xb7\xe5\x58\xd9\xae\xd9\x9e\xc4\xad\xcf\x17\xb3\x6c\x63\x6b\x1d\x52\x20\x23\x7b\x4d\xc5\xad\xf8\x42\xf5\x2d\x73\x9c\xab\x12\xdb\x81\x53\x8b\xef\x17\xc8\x63\x99\x14\x0d\xbc\xf7\x7d\x58\xda\x2b\x5f\xef\x98\x2b\x36\x67\xb1\x2d\x0e\x87\xfd\xc7\x9b\x75\xf3\xdb\x56\xea\x22\x22\x17\xc1\x9d\xbe\xdd\x4e\xb1\x5b\x96\x73\xb1\xdd\xe0\x95\x7e\x33\xc7\x7f\x9a\x6f\xf0\x97\xfd\x33\xf0\xb1\x66\xae\x34\xd1\xa0\x2a\x35\xd8\x9d\x1d\xa0\xcb\x31\xb2\x57\x37\xe3\xc8\xf5\xc7\xa0\x27\xf6\x38\xce\xa0\x7a\xf8\xd7\x6c\x9d\x85\xdf\xb6\x70\xb3\xc4\x16\xb6\x9d\x2a\x8f\x93\xb6\xd8\x7b\x5d\x12\xa3\xf8\xac\x9c\x1e\x22\x75\x4f\x6c\x5b\x7c\x72\x81\x6a\xea\xc5\xfc\x09\x00\x00\xff\xff\xec\xf6\x6e\x9e\x43\x04\x00\x00")

func type_users_graphql() ([]byte, error) {
	return bindata_read(
		_type_users_graphql,
		"type/users.graphql",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"mutation.graphql": mutation_graphql,
	"query.graphql": query_graphql,
	"schema.graphql": schema_graphql,
	"type/admin.graphql": type_admin_graphql,
	"type/auth.graphql": type_auth_graphql,
	"type/company.graphql": type_company_graphql,
	"type/course.graphql": type_course_graphql,
	"type/delegate.graphql": type_delegate_graphql,
	"type/individual.graphql": type_individual_graphql,
	"type/lesson.graphql": type_lesson_graphql,
	"type/manager.graphql": type_manager_graphql,
	"type/module.graphql": type_module_graphql,
	"type/question.graphql": type_question_graphql,
	"type/test.graphql": type_test_graphql,
	"type/users.graphql": type_users_graphql,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"mutation.graphql": &_bintree_t{mutation_graphql, map[string]*_bintree_t{
	}},
	"query.graphql": &_bintree_t{query_graphql, map[string]*_bintree_t{
	}},
	"schema.graphql": &_bintree_t{schema_graphql, map[string]*_bintree_t{
	}},
	"type": &_bintree_t{nil, map[string]*_bintree_t{
		"admin.graphql": &_bintree_t{type_admin_graphql, map[string]*_bintree_t{
		}},
		"auth.graphql": &_bintree_t{type_auth_graphql, map[string]*_bintree_t{
		}},
		"company.graphql": &_bintree_t{type_company_graphql, map[string]*_bintree_t{
		}},
		"course.graphql": &_bintree_t{type_course_graphql, map[string]*_bintree_t{
		}},
		"delegate.graphql": &_bintree_t{type_delegate_graphql, map[string]*_bintree_t{
		}},
		"individual.graphql": &_bintree_t{type_individual_graphql, map[string]*_bintree_t{
		}},
		"lesson.graphql": &_bintree_t{type_lesson_graphql, map[string]*_bintree_t{
		}},
		"manager.graphql": &_bintree_t{type_manager_graphql, map[string]*_bintree_t{
		}},
		"module.graphql": &_bintree_t{type_module_graphql, map[string]*_bintree_t{
		}},
		"question.graphql": &_bintree_t{type_question_graphql, map[string]*_bintree_t{
		}},
		"test.graphql": &_bintree_t{type_test_graphql, map[string]*_bintree_t{
		}},
		"users.graphql": &_bintree_t{type_users_graphql, map[string]*_bintree_t{
		}},
	}},
}}
