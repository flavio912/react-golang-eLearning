package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _mutation_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x94\x4d\x6e\xdb\x30\x10\x85\xf7\x3c\xc5\x18\xdd\x24\x9b\x1c\x40\xbb\x54\x46\x00\x03\x31\x5a\xd8\xd2\x01\xa6\xd2\x84\x26\x4a\x91\x2c\x7f\x82\x0a\x45\xee\x5e\x88\x96\x29\x52\xb2\x97\xfc\x3c\xef\xcd\xf0\x8d\xa9\x6f\x30\x04\x8f\x5e\x68\xe5\xa0\x43\x05\x83\xee\xc5\xc7\x08\xfe\x42\xd0\xff\x7a\x01\xfa\x4b\x5d\xf0\xd4\x83\xa3\x3f\x81\x94\x17\x28\xe5\xf8\xc2\x98\x50\x26\x78\x68\x8d\xd4\xd8\xbf\x09\x49\x47\xf2\x08\xff\x18\xc0\x87\x90\xd4\x8c\x86\x2a\x38\x7b\x2b\x14\xdf\x31\x80\x4e\x2b\x4f\xca\xbf\x93\xe2\xfe\x52\xc1\x41\xf9\x1d\xfb\x62\xcc\x8f\x86\x32\x8b\x13\x39\x13\x2d\x82\x95\xb9\xda\x85\xae\x23\xe7\x1a\xfd\x9b\xd4\xc2\xbf\xb6\x33\x9c\xaf\x85\xd1\xe3\xa1\x28\x36\x3d\xce\x57\x8e\xa5\xd8\x0f\x42\xbd\x6b\x2e\xd4\x53\x74\xac\xe0\x35\x91\xdd\x73\x05\xaf\xc1\x5f\xa2\x0f\x03\x18\x50\x21\x27\x5b\x54\x1f\x33\xb6\xae\xef\x49\x12\x47\x4f\x85\x60\x9f\xc3\xb5\xa2\xb3\x84\x9e\x66\xcf\x9b\xa2\xce\xe1\x61\x62\x93\x6c\x3e\x4f\x89\x99\x7e\x2b\x6a\x73\x78\x47\x64\xac\x9e\x96\x75\x18\x90\xd3\x35\xc4\xd3\xb4\x63\xe7\x17\x83\x7c\xbb\x93\xb8\x5c\xd6\xba\xf1\xcf\xcc\x70\xeb\x31\x6f\xa7\x9c\x61\xca\x67\x33\xf8\x3e\x87\x69\xf0\xef\x5a\x4b\x42\xb5\x4b\x19\xc5\x2d\x95\x09\x45\x94\x14\xf1\x94\x86\x2c\xca\xdb\x05\x6d\xca\xaf\x33\x15\xe5\xfb\x05\x3d\x9e\xe7\xb6\xd6\x72\xa4\x1b\x4d\xba\x12\x4f\x39\x6a\xe5\x28\xb9\xd4\x7a\x30\xa8\xc6\xd2\x64\x86\x8b\xc7\xf5\x9c\xee\xb6\x12\xb5\x39\xbc\x23\x2a\x3a\xdd\x96\xce\x00\xa6\x97\x1a\xd9\xdd\xbe\xb1\x60\x7e\x00\x77\xff\x92\xb1\xc0\x52\x87\xc6\x77\x17\xcc\x9f\x70\x19\x17\x1a\x63\xf5\x67\x1a\x3a\x04\xd1\x57\xd0\xb6\x87\x7d\x39\xa5\xc3\x4f\xfa\xa1\xa4\x50\x54\xeb\x60\x5d\xca\xf5\xbc\xe2\xe9\x82\x39\x9c\xf5\xb5\x44\xe7\xac\xd6\xc3\xd6\x62\xf5\xd3\x12\x53\xc9\x53\x5c\x0d\xf2\x72\x29\x0d\xf2\x24\x6a\x90\x2f\xb9\xa2\x27\xae\xed\x7a\x85\x33\x5d\xfa\xcc\x80\x01\xd4\xe7\xd3\x5b\x7c\xff\x4f\xcf\xf9\xb7\xea\x7f\x00\x00\x00\xff\xff\x17\xea\xaf\xc5\x9b\x05\x00\x00")

func mutation_graphql() ([]byte, error) {
	return bindata_read(
		_mutation_graphql,
		"mutation.graphql",
	)
}

var _query_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x53\x4b\x6e\xdc\x3a\x10\xdc\xf3\x14\x65\x78\x63\x03\xc6\x3b\x00\x77\xfe\xc0\x80\x17\x2f\x71\x10\x7b\x1d\xf4\x48\x2d\x89\x31\x3f\x0a\x49\x25\x1e\x04\xbe\x7b\x40\xea\x47\x8d\xc7\x03\x24\x3b\x51\x5d\xd5\x55\x4d\x56\x9f\xe3\xc7\xc0\x5e\x71\x40\xe8\xdc\xa0\x6b\x58\x17\x61\x5c\xad\x9a\x3d\x62\xc7\xa8\x77\xff\x81\x5f\xb9\x1a\x22\xd7\x50\x16\x3d\x79\x4f\x5a\xb3\x16\x71\xdf\x33\x1e\xa9\xe5\x07\xdb\x38\xfc\x16\x40\x74\x91\xb4\xc4\x83\x8d\x67\x38\xc7\xa7\xc1\xec\xd8\xc3\x35\xe8\xa9\xe5\x00\x6a\x22\x7b\xc4\x4e\x05\x38\xcb\x02\x70\x4d\x13\x38\x2e\xf8\xa7\x8e\xa7\x5f\x89\x93\x71\x89\x88\xc6\x3b\x93\xad\x84\x48\x3e\x0a\x40\x2b\xa3\xb6\x34\x43\xaf\xc9\xfe\x2f\x8b\x9e\x7d\x66\x09\xa0\x55\x3f\xd9\x1e\x71\xa3\x22\x9b\x30\x56\xc5\x9b\x10\xca\xf6\x43\xcc\x73\xe4\x19\x0a\x53\x1b\xa9\x15\xfa\x3f\x59\x6a\xd9\xdf\x2b\x9d\xe6\x49\x1c\x4b\x86\x25\xbe\x46\xaf\x6c\x2b\x00\x36\xa4\x74\x71\xfe\xee\x76\x4f\x2a\xea\x12\x32\x0c\xaa\x96\x78\x7e\x7e\xb8\x4b\xd7\xc6\x9a\xfb\xce\xd9\x15\xb0\x68\xdd\xb1\xe6\x96\x22\x17\x62\x5b\x6a\xac\xbe\xa5\xe3\xd2\xf8\xef\xad\x9c\x50\xbf\x75\x83\x0f\xf9\x79\x3f\x1e\x96\xaa\x8a\x43\x78\xda\xf7\x2c\x71\xbd\x7c\x0b\x60\x47\xd5\x4b\xeb\xdd\x60\xeb\xdb\x8e\xab\x17\x89\x1b\xe7\x34\x93\x15\x40\xef\x55\xc5\x12\xf7\xda\x51\x71\xaf\x9f\xad\x56\x96\x47\xcd\x42\xaf\x5a\x4c\xc8\x77\x86\x0a\xab\x9a\x42\xf0\xce\x99\x7f\xe5\x3b\xd3\x93\xdd\x7f\x74\xcf\x9b\xa1\x33\x29\xb2\x6f\xa8\xca\x0b\xa0\x2c\x45\xae\xbf\x0c\xec\xf7\x99\xd9\x4f\x3b\x21\x97\xed\x28\x86\xf4\x35\xfb\x9b\x11\x47\xa1\x62\x5b\x2b\xdb\x96\x77\xd3\x28\xd6\xcb\x83\x9e\x25\x62\xde\xb3\xb5\xbb\xca\x9d\xe7\x3a\x40\xb5\x51\xf6\x62\x75\x7b\x76\x29\x71\x9d\xfe\xcd\xb5\x70\x91\x0c\x8d\x66\xe6\x5a\xfa\x4e\x64\x33\x66\xb9\xa0\x5f\xca\x39\xe0\x6b\xb9\xec\x70\x85\x26\xdf\x91\xdc\xee\xc1\x15\xdc\x38\x99\x9c\x47\x5c\x1b\x3d\x8e\xfb\x58\x4f\x59\x3e\xf0\x3a\x47\xbc\x40\x1c\xd7\xdb\xee\xc2\x51\xc1\x19\x32\x29\x56\xe3\xa3\x1e\x08\x4e\x4f\xbd\xd4\xd5\x07\x7a\x9b\x48\x1c\x95\x9b\x10\x93\x9a\x2b\xf2\x1b\x2e\x04\x30\x26\x61\x6c\x9b\x8f\x73\xe7\xf7\x49\xcf\xe5\x43\x05\x01\x5c\x6e\xc1\xf3\x5c\xdb\xb0\x9f\x16\x3b\xba\x19\x27\xf4\x0e\xf0\xb9\xdf\x9b\xf8\x13\x00\x00\xff\xff\x1a\x8c\x7b\xb0\x27\x06\x00\x00")

func query_graphql() ([]byte, error) {
	return bindata_read(
		_query_graphql,
		"query.graphql",
	)
}

var _schema_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x4e\x4e\xcc\x49\x2c\x52\x08\x0d\xf5\x74\xe1\x82\xb2\x43\x32\x73\x53\xb9\xb8\x8a\x93\x33\x52\x73\x13\x15\xaa\xb9\x14\x14\x0a\x4b\x53\x8b\x2a\xad\x14\x02\x41\x14\x97\x82\x42\x6e\x69\x49\x62\x49\x66\x7e\x9e\x95\x82\x2f\x94\xc5\x55\xcb\x05\x08\x00\x00\xff\xff\xc2\x82\x45\xdf\x48\x00\x00\x00")

func schema_graphql() ([]byte, error) {
	return bindata_read(
		_schema_graphql,
		"schema.graphql",
	)
}

var _type_admin_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x90\xcd\x8a\x83\x30\x14\x85\xf7\x79\x8a\x3b\xaf\x91\xdd\x30\x6e\x84\x61\x70\x28\xae\x4a\x17\x17\x72\x0d\x17\x92\x18\xf2\x43\x11\xf1\xdd\x8b\xb1\x60\xd5\x52\xda\x5d\x38\x9c\x7c\xdf\x49\xd2\xe0\x09\xbe\x95\x65\x07\xa3\x00\xc8\x99\x95\x84\xb6\xad\xab\x2f\x01\x40\x16\xd9\x48\x38\xa5\xc0\x4e\xcf\x41\xc7\x21\xa6\x3f\xb4\xf4\x18\x1a\xdc\x67\x93\x10\x2b\xb7\x41\x4d\xc0\xd6\x1b\xb2\xe4\x52\x84\x06\x35\x3b\x4c\xa4\xfe\x33\x85\xa1\x58\x49\x69\x8a\x12\xce\xa5\x7f\x11\x00\x1e\x35\xd5\xae\xeb\xe5\xdc\x2e\xa7\x99\xc9\xce\xe7\xb4\x40\x7f\x7b\x7d\x5f\x7c\xd8\xe8\x31\xc6\x6b\x1f\xd4\x66\xce\x72\xf5\x27\x10\x26\x2a\x80\xba\x04\xe3\xfb\x6f\xfa\xcc\xd4\x7a\x75\x34\x6d\x3f\xf7\xe0\x7d\xa2\xdd\x5b\x57\x41\x45\x86\x5e\x0a\x26\x71\x0b\x00\x00\xff\xff\x68\xfa\x3e\xad\xdb\x01\x00\x00")

func type_admin_graphql() ([]byte, error) {
	return bindata_read(
		_type_admin_graphql,
		"type/admin.graphql",
	)
}

var _type_auth_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\xa9\x2c\x48\x55\x70\x2c\x2d\xc9\x08\xc9\xcf\x4e\xcd\x53\xa8\xe6\x52\x50\x28\x01\xb1\xac\x14\x82\x4b\x8a\x32\xf3\xd2\x15\xb9\x6a\xb9\x00\x01\x00\x00\xff\xff\xa3\x33\x16\xdc\x24\x00\x00\x00")

func type_auth_graphql() ([]byte, error) {
	return bindata_read(
		_type_auth_graphql,
		"type/auth.graphql",
	)
}

var _type_company_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x92\x4f\x6b\x33\x21\x18\xc4\xef\x7e\x8a\xc9\xed\x7d\x21\x97\xf6\xe8\x2d\x49\x29\x04\xfa\x97\xb2\xa7\xd2\x83\xc4\x27\x22\xec\x3e\x8a\xba\x85\x25\xe4\xbb\x17\x75\x53\x96\xec\xe6\xda\xdb\x38\x8e\xfa\x73\x78\xd2\xe0\x09\x3b\xd7\x79\xc5\x03\x4e\x02\x50\xde\x07\xf7\x4d\x5a\x62\xeb\x5c\x4b\x8a\x05\xd0\xf7\x56\x4b\x34\xcd\xfe\x61\x25\x80\x43\x20\x95\x48\x6f\x92\xc4\x47\x0a\x96\x8d\x00\x58\x75\x74\x59\xe6\x4c\xa7\x58\x19\x0a\xf1\x9f\x57\x86\x24\xde\x94\xa1\x35\x8e\xb6\x4d\x14\x24\x9e\xeb\xe6\x63\x59\xae\xe1\x82\xa6\xb0\x1d\x24\x5e\xab\xf8\xff\x9b\xc8\xc7\xf2\x6d\x4a\xeb\x40\x31\x4a\x6c\xaa\x58\x89\xb3\x10\x85\x7c\x34\x2a\x79\xd5\x4f\x96\xe9\x6e\xca\x32\xf1\xef\xa7\xfe\xc1\xf5\x9c\x86\xa9\xe3\x5d\x4c\x3b\xa7\x69\x96\x0a\x93\xd8\xe5\xe9\xb1\xb4\xcc\x08\xdb\xf9\x96\x3a\xe2\x14\xf3\x57\x2d\xe7\x7e\xde\x7b\x0a\xb5\x52\xd2\x86\xa2\xc4\xe7\x78\xe2\x2b\xbf\xa4\x0c\xed\xf9\xe8\x6a\x35\x59\xe5\x7b\x2d\xfb\x3e\x61\x57\xfa\x1d\xc3\xfb\x62\x9d\x0a\x48\x31\x5e\xae\x9a\xfe\xbb\x5f\x57\xba\xc6\xeb\x25\xba\xab\x11\x99\xb3\xde\x18\xad\x25\xfc\x1b\xf4\x33\xf8\x05\xf6\x39\xba\x38\x8b\x9f\x00\x00\x00\xff\xff\xc7\xdd\x28\x06\xe4\x02\x00\x00")

func type_company_graphql() ([]byte, error) {
	return bindata_read(
		_type_company_graphql,
		"type/company.graphql",
	)
}

var _type_course_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x55\x4d\x6b\x1b\x3d\x10\xbe\xef\xaf\x18\xdb\x97\xf7\x85\xf8\x90\xd8\x0e\xed\xde\x52\xc7\x05\x43\x43\xdc\x78\x0d\x85\xe0\x83\xa2\x1d\x6f\x44\x76\xa5\x45\x9a\x2d\x31\x21\xff\xbd\x48\xf2\x5a\xf2\xa6\x71\x9b\xd0\x4b\x29\x32\x1e\xad\x34\xcf\xe8\x99\x0f\x8d\x50\x36\x15\x5c\x70\x8e\xc6\x64\xdb\x1a\xe1\x29\x01\xd0\x68\x48\x0b\x4e\x98\x27\x00\xaa\x46\x99\x3c\x27\x89\x53\x5c\x92\x6e\x38\x35\x1a\x67\x25\x56\x28\xc9\xa9\x57\x2a\x6f\x4a\x4c\x00\x08\x0d\x25\x00\x25\x1a\xa3\x02\xe6\xca\x6d\xc7\x80\x17\x7a\x64\x4f\x9e\xaa\x46\x1b\x9c\xcb\x8d\x72\x4a\x92\x55\x98\xda\x03\x85\x2c\x12\x80\x3b\xc6\x1f\x0a\xad\x1a\x99\x4f\xef\x91\x3f\xa4\xf0\x49\xa9\x12\x99\x4c\x00\x6a\x2d\x38\xa6\xf0\xb9\x54\xcc\x9a\xe5\xaa\x54\x3a\x42\xe2\x23\x47\x5d\x53\xb4\x22\x24\x69\x95\x37\x9c\x84\x92\xd1\xb2\xa9\x91\x8b\x8d\xe0\x19\xea\xca\x44\xeb\x9c\x11\x16\x4a\x6f\x53\x98\xee\x66\x7b\xce\xd7\xb2\x14\x12\x3d\x73\xc7\xba\x69\x44\x9e\xc2\x6a\x35\xbf\xec\xb9\x83\x36\x2a\x8d\x1c\xeb\xfd\x14\xb8\x60\x05\x82\xa8\x6a\x1f\x21\x03\x0b\x56\x08\xc9\x08\xf3\xaf\x0d\xea\xad\x33\x8b\x79\x81\x26\x85\xdb\x18\xb6\xb6\xae\xb3\xc2\x19\x4e\x2d\xc8\xcd\x42\x38\x4b\x66\x8c\x56\xaa\x7a\x07\xbb\x0e\xf6\x0d\x04\x3b\xc8\xd7\x39\x0a\x59\x37\x04\x4b\xf6\x1d\x3b\x90\xb9\xdb\x38\x64\xfb\xb2\x1c\xda\x9c\xd8\xdd\xbd\xce\x6f\x67\xfa\x48\x31\xb1\xfd\x55\x48\xa3\x6b\xf1\xeb\x2a\x23\x56\x58\xff\x5d\x6c\xd7\x47\x8a\xe9\x8e\x49\x89\x7a\x5e\xb1\x02\x97\x8d\xb3\x1f\x1b\x69\x48\xe9\xe0\x12\x0c\xbc\x50\x1b\xa0\x7b\x84\xcc\xee\xc2\x7f\xbc\x8d\x17\x70\x9f\x59\x25\xcb\xed\xff\xf6\x1e\xb2\xc7\x05\xd3\x24\xb8\xa8\x99\x24\x93\xc2\x5c\x5a\xa6\x86\x98\xa6\x4b\x46\x98\x42\x26\x2a\xeb\x0a\xca\xfc\xe0\xbb\x54\x9c\x1d\x44\xe8\x20\x3f\x71\xcd\xfd\xcb\xc9\x31\x6d\xef\xb3\x65\xee\xa3\x41\x58\xf5\xd6\x30\xb0\xb7\x79\x0b\x1b\xa5\x6d\x2a\x84\xc4\x5d\x62\x4c\x88\x63\xd0\xf7\x0d\xd0\x79\xd0\x6d\xa6\xbd\x97\x37\x94\xd0\xf2\xbb\xf5\x2d\xd4\x1f\xd7\x0b\x56\xc3\x72\x64\xf5\xa0\xdd\x76\x4d\x06\x42\x1a\x19\x61\xc6\x8a\x90\xd1\x38\x89\xbd\x6e\x10\x43\x6f\xc8\x58\x71\xbc\x00\x8e\x60\xdb\xfe\xf9\x1e\x03\x31\xef\xd6\xce\x5b\xc8\x0f\xe0\x16\x66\xdf\x2e\xae\x16\x5f\x66\x30\xbd\x5e\xdd\x2c\x67\xb0\xcc\x6e\x56\xd3\x6c\x75\x33\x4b\x06\x00\xf0\xe4\xe3\xd7\xf7\xcf\x59\xff\x64\x47\xb0\x3f\x1a\x8f\xc6\xa3\x61\xfc\x3f\x76\xa2\xff\x7c\xe2\x71\xd0\x01\xba\xd5\xd6\xbf\xfe\xe9\xd9\xc8\xfe\x86\x3b\x79\xb6\x9b\x38\x31\xda\x2b\xb7\x99\xde\x7d\x06\x36\xfe\x91\x0c\x6c\x4e\xcf\xdc\x18\x7a\x61\xad\xed\xbf\x5a\x42\x31\xdc\x3e\xb5\x01\xfc\xe1\xa3\x1f\xc3\xc9\xb9\x1b\xc3\xc9\xf9\x7e\x32\x39\x9f\x04\x03\x6b\x27\xff\x88\x83\x30\x00\xb1\x01\x61\x80\xb0\xaa\x4b\x46\x08\x15\x7b\x40\x60\xc0\x55\xbd\xfd\x1b\xbc\x7f\x85\xca\xc8\x15\xc1\xd8\x97\x84\x9d\x4c\x26\x63\x37\x86\xee\xbf\xdf\x81\xbf\x83\xca\x3a\xf9\x11\x00\x00\xff\xff\xb4\x63\xd0\x24\x9d\x09\x00\x00")

func type_course_graphql() ([]byte, error) {
	return bindata_read(
		_type_course_graphql,
		"type/course.graphql",
	)
}

var _type_delegate_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x92\x41\x4f\xc3\x30\x0c\x85\xef\xfd\x15\xde\x9d\x5f\xd0\x1b\x6c\x97\x4a\x08\x0d\xe8\x4e\x08\x21\xb3\xbc\x85\x40\x1a\x47\x49\x2a\x34\x4d\xfb\xef\x28\x19\xa5\x5d\xb7\x0b\xb7\xe8\xe9\x3d\xdb\x9f\x9d\xb4\xf7\xa0\x15\x2c\x34\x27\x10\x1d\x2a\xa2\xbe\x37\xaa\xa6\xcd\xa6\x59\x2d\x2a\xa2\x6d\x00\x27\xa8\xdb\x54\xd3\x73\x0a\xc6\xe9\x8a\xa8\x6d\x97\x6f\xcd\x6a\x10\xb2\x0b\x1d\x1b\x3b\x71\xec\x4c\x88\xe9\x81\x3b\x4c\x4d\x96\x2f\xb5\x04\x0b\xff\x21\x0e\x93\x70\xf6\xdd\x8b\x36\x6e\x6a\xfc\x94\xf7\xd6\x24\x7b\x16\xde\x4a\xe7\xd9\xed\x6b\x5a\x9e\x1e\x59\xf3\x41\x76\xc6\xa2\xe9\x58\x63\x13\xc6\x99\x8e\x55\x65\x9c\xef\x13\x2d\x0b\xd0\x80\xdc\x14\xed\x30\x16\xcb\xdc\x27\xfa\xff\x60\xcc\xf9\xaf\x4d\x7b\x0d\x55\xc3\x21\x70\xc2\x9a\x63\xfc\x96\xa0\x6a\xba\x13\xb1\x60\x37\x27\xf1\x56\x58\xb5\xf2\x05\x37\x25\x2a\xd7\x3b\x07\x7a\x42\xf4\xe2\x22\x0a\x93\xfa\x15\xeb\xbf\x13\x2f\x6e\x26\x5d\xd5\xd8\x76\x56\x73\xb0\xaf\x59\x83\x4c\xe7\x2d\x3a\xb8\x14\x69\xcd\xda\xb8\x9c\x7c\xec\x11\xf6\xa5\x07\x94\x46\xac\xe9\x65\x88\xbc\xe6\xd1\x59\xa3\x71\x3b\xa9\x73\xa0\xbc\xc6\xfd\x0f\xbe\x72\xe1\x52\xe1\xf2\x3b\xf9\xd9\x5c\x59\x73\x92\xd1\xc6\x05\x1d\xab\x9f\x00\x00\x00\xff\xff\x18\xe4\xd4\x61\xbc\x02\x00\x00")

func type_delegate_graphql() ([]byte, error) {
	return bindata_read(
		_type_delegate_graphql,
		"type/delegate.graphql",
	)
}

var _type_manager_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x92\xcd\x6e\xe3\x30\x0c\x84\xef\x7a\x0a\x2e\xf6\x2d\x7c\xdb\x4d\xb0\x80\x81\x6d\x91\xfe\xf8\x54\xf4\xc0\x46\xb4\xc2\x42\xa2\x04\x49\x46\x10\x04\x79\xf7\x42\x76\x7e\x9c\x5a\x97\xde\xec\xc1\x70\xc0\x8f\xa3\x7c\x08\x04\x0f\x28\x68\x28\x02\x1c\x15\xc0\x30\xb0\x6e\xa0\xeb\xda\xf5\x2f\x05\xb0\x8d\x84\x99\xf4\x9f\xdc\xc0\x4b\x8e\x2c\x46\x01\x90\x43\xb6\x97\xff\x62\xea\x39\xa6\xfc\x88\x8e\xe6\xa2\xc5\xa5\x96\xc9\x52\xd8\x79\x59\x18\xff\x7b\xc3\x32\x17\x3f\xfd\xc7\x2b\x67\x7b\x67\xdc\x7a\x17\x50\x0e\x0d\xac\xa6\x8f\xa2\x85\xe8\x7b\xb6\xd4\x3a\x34\xd4\xc5\xeb\x56\xea\xa4\xd4\x1c\x6d\x83\x86\x80\x5d\xb0\xe4\x48\x72\x82\x0d\x1a\x96\x02\xf6\x34\x50\x3c\x8c\xdc\xa4\x0d\xa5\x06\xde\xce\x13\xef\x25\x1c\x0d\xb5\xd2\xfb\xa6\xf8\xc7\xaf\x92\xcb\x12\x86\x7c\x09\x1e\x17\x9f\xe6\xbf\x5f\x25\x60\x4a\x7b\x1f\xf5\x5c\x13\xff\x4c\x29\x34\xf0\xd7\x7b\x4b\x28\xb7\xb8\xd5\x78\xe7\x73\x68\x3b\x4a\xc7\x1b\x72\x69\x63\xea\x04\x7e\xc3\x3f\x1f\x01\xb5\x63\x49\xb0\xdf\x91\x4c\x15\xb1\x18\x70\xd3\x74\x02\xdf\x83\xe6\xbe\xa7\x48\x92\xcf\x11\x4c\xe9\x27\x45\x2d\x60\x6a\x7d\x54\xdb\x5c\x52\x5f\x19\xd7\x64\xa9\xc2\x38\x7f\x70\x57\x6f\x17\x74\xed\x1e\xf7\x8f\xf3\x6e\xcb\x1a\x5e\x85\xae\xb6\x77\x85\x4f\x9d\xd4\x57\x00\x00\x00\xff\xff\xf3\x0d\x49\x60\x1b\x03\x00\x00")

func type_manager_graphql() ([]byte, error) {
	return bindata_read(
		_type_manager_graphql,
		"type/manager.graphql",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"mutation.graphql": mutation_graphql,
	"query.graphql": query_graphql,
	"schema.graphql": schema_graphql,
	"type/admin.graphql": type_admin_graphql,
	"type/auth.graphql": type_auth_graphql,
	"type/company.graphql": type_company_graphql,
	"type/course.graphql": type_course_graphql,
	"type/delegate.graphql": type_delegate_graphql,
	"type/manager.graphql": type_manager_graphql,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"mutation.graphql": &_bintree_t{mutation_graphql, map[string]*_bintree_t{
	}},
	"query.graphql": &_bintree_t{query_graphql, map[string]*_bintree_t{
	}},
	"schema.graphql": &_bintree_t{schema_graphql, map[string]*_bintree_t{
	}},
	"type": &_bintree_t{nil, map[string]*_bintree_t{
		"admin.graphql": &_bintree_t{type_admin_graphql, map[string]*_bintree_t{
		}},
		"auth.graphql": &_bintree_t{type_auth_graphql, map[string]*_bintree_t{
		}},
		"company.graphql": &_bintree_t{type_company_graphql, map[string]*_bintree_t{
		}},
		"course.graphql": &_bintree_t{type_course_graphql, map[string]*_bintree_t{
		}},
		"delegate.graphql": &_bintree_t{type_delegate_graphql, map[string]*_bintree_t{
		}},
		"manager.graphql": &_bintree_t{type_manager_graphql, map[string]*_bintree_t{
		}},
	}},
}}
