package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _mutation_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\xcb\x31\x0e\xc2\x30\x0c\x05\xd0\x3d\xa7\xf8\x88\x05\x96\x1e\xa0\x5b\x77\xd8\xb8\x40\x68\x0c\xb5\x68\xec\xa2\x7c\x4b\x44\x88\xbb\xb3\x20\xd6\x27\xbd\x3d\x6a\x30\x53\xdd\x1a\xe6\x6c\xa8\x5e\xf4\xd6\xc1\x45\x50\xae\x03\xe4\x25\x73\x50\x0a\x9a\x3c\x43\x8c\x9a\xd7\xb5\x0f\x89\x7d\x13\x9c\x7f\x11\xef\x04\xe4\x52\xd5\x4e\x7e\x57\x3b\xa8\x6d\xc1\x11\xd3\x5f\x76\xc7\x11\x53\x70\xb9\xf8\x43\x2c\x7d\xd2\x37\x00\x00\xff\xff\x63\x30\x56\xdd\x74\x00\x00\x00")

func mutation_graphql() ([]byte, error) {
	return bindata_read(
		_mutation_graphql,
		"mutation.graphql",
	)
}

var _query_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x90\xc1\x4e\xc3\x30\x10\x44\xef\xfe\x8a\x89\x7a\x29\x12\xea\x07\xe4\xd6\x63\x2f\x08\x04\x3f\xe0\xd6\xeb\x64\xa5\x78\x1d\xec\x35\x34\x42\xfd\x77\x64\x43\xd3\xf6\x3a\xf3\x46\xbb\x33\x1b\x7c\x16\x4a\x4c\x19\x79\x8c\x65\x72\x90\xa8\x08\xd1\xb1\x5f\xa0\x23\xc1\x1d\x77\xa0\x33\x9d\x8a\x92\x43\xe6\x50\x26\xb5\x42\xb1\xe4\x69\xd9\x19\x5d\x66\xc2\xab\x1d\xe8\x20\x3e\xe2\xc7\x00\xb3\x1d\x28\xef\xbd\x52\xea\x71\x10\xed\xb0\xc1\x4b\x09\x47\x4a\x88\xfe\xcf\x84\xad\x2e\x74\xe4\x8c\x28\x64\x80\xe8\x7d\x26\x5d\xf9\x8f\x91\xfe\xa5\x9a\x69\x5c\x0d\xc2\xa7\x18\xda\x4b\x59\x6d\x52\x03\x4c\x1c\xf8\x31\x16\xec\xb9\xd6\xf8\x16\xcc\x94\x5a\xca\x00\x03\x7f\x91\x3c\x60\xb2\x7e\xc4\x4a\x21\x23\x91\x96\x24\xe4\xc0\xd2\x0e\xd4\x45\x16\x73\x31\x86\x45\x29\x79\x7b\x6a\x25\x59\xac\x92\x7b\xab\xde\x5a\xb5\xf6\xee\xd7\x05\x6a\xa4\x4d\x72\x83\xb8\x01\xef\x9a\x58\x86\xce\x00\xd6\x05\x96\x6d\x29\xec\xae\xea\x53\x8f\x7d\x15\x57\x37\x6f\xef\x06\x79\xbe\x6b\x79\x25\xeb\xb9\xce\x5c\xcc\x6f\x00\x00\x00\xff\xff\xec\xd8\x3f\xce\xbb\x01\x00\x00")

func query_graphql() ([]byte, error) {
	return bindata_read(
		_query_graphql,
		"query.graphql",
	)
}

var _schema_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x4e\xce\x48\xcd\x4d\x54\xa8\xe6\x52\x50\x28\x2c\x4d\x2d\xaa\xb4\x52\x08\x04\x51\x5c\x0a\x0a\xb9\xa5\x25\x89\x25\x99\xf9\x79\x56\x0a\xbe\x50\x16\x57\x2d\x17\x20\x00\x00\xff\xff\x1f\x5d\x4a\xc1\x2f\x00\x00\x00")

func schema_graphql() ([]byte, error) {
	return bindata_read(
		_schema_graphql,
		"schema.graphql",
	)
}

var _type_admin_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8f\x4d\x0a\xc2\x30\x10\x85\xf7\x39\xc5\xf3\x1a\xdd\xb9\x92\x82\x48\xc5\xa5\xb8\x18\xc8\x34\x0c\x34\x3f\x24\x13\xa4\x88\x77\x97\x06\xd1\x6a\x77\xc9\xc7\x37\x6f\xe6\xe9\x9c\x18\x7b\xeb\x25\xe0\x61\x80\x5a\xc5\x76\xb8\x68\x96\xe0\x76\x06\x60\x4f\x32\xad\xc1\x28\xb9\xe8\x89\x3c\xaf\xe1\x44\xff\xec\x69\xcc\x37\x79\x20\xc7\x10\x9f\x26\xf6\x1c\xb4\x60\x20\x27\x81\x94\xed\xb9\x72\x9e\xdb\x5e\xb6\x8e\x4b\x87\x6b\xf3\x6f\x06\x48\xe4\xb8\x0f\x63\xec\x16\xbb\xbd\x96\x4c\x09\xa9\x2a\x0e\xac\xcd\xeb\xdb\x6f\x7b\xf6\x47\x6c\xd6\x31\xba\x77\xb9\x4d\x99\x44\xa5\xdc\x63\xfe\x19\x7d\x05\x00\x00\xff\xff\x16\x90\x7b\x4e\x11\x01\x00\x00")

func type_admin_graphql() ([]byte, error) {
	return bindata_read(
		_type_admin_graphql,
		"type/admin.graphql",
	)
}

var _type_auth_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\xa9\x2c\x48\x55\x70\x2c\x2d\xc9\x08\xc9\xcf\x4e\xcd\x53\xa8\xe6\x52\x50\x28\x01\xb1\xac\x14\x82\x4b\x8a\x32\xf3\xd2\x15\xb9\x6a\xb9\x00\x01\x00\x00\xff\xff\xa3\x33\x16\xdc\x24\x00\x00\x00")

func type_auth_graphql() ([]byte, error) {
	return bindata_read(
		_type_auth_graphql,
		"type/auth.graphql",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"mutation.graphql": mutation_graphql,
	"query.graphql": query_graphql,
	"schema.graphql": schema_graphql,
	"type/admin.graphql": type_admin_graphql,
	"type/auth.graphql": type_auth_graphql,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"mutation.graphql": &_bintree_t{mutation_graphql, map[string]*_bintree_t{
	}},
	"query.graphql": &_bintree_t{query_graphql, map[string]*_bintree_t{
	}},
	"schema.graphql": &_bintree_t{schema_graphql, map[string]*_bintree_t{
	}},
	"type": &_bintree_t{nil, map[string]*_bintree_t{
		"admin.graphql": &_bintree_t{type_admin_graphql, map[string]*_bintree_t{
		}},
		"auth.graphql": &_bintree_t{type_auth_graphql, map[string]*_bintree_t{
		}},
	}},
}}
