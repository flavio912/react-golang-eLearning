package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _mutation_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x94\xcd\x8e\x9b\x30\x10\x80\xef\x3c\xc5\x44\x7b\x69\x2f\xfb\x00\xb9\xa5\x89\x2a\x45\x4a\xd4\x68\x03\x0f\x30\x0b\xb3\xc4\x2a\xd8\xd4\x3f\x69\x51\x95\x77\x5f\xd9\x18\x63\x9b\xec\xd1\x1f\xf3\x8d\xc7\x33\x36\x2f\xd0\x1b\x8d\x9a\x09\xae\xa0\x46\x0e\xbd\x68\xd8\xc7\x08\xfa\x46\xd0\xbc\xbf\x02\xfd\xa3\xda\x68\x6a\x40\xd1\x1f\x43\x5c\x33\xec\xba\xf1\xb5\x28\x18\x1f\x8c\x86\x6a\xe8\x04\x36\x3f\x59\x47\x67\xd2\x08\xff\x0b\x80\x0f\xd6\x51\x39\x0e\xb4\x85\xab\x96\x8c\xb7\x9b\x02\xa0\x16\x5c\x13\xd7\x27\xe2\xad\xbe\x6d\xe1\xc8\xf5\xa6\x78\x14\x85\x1e\x07\x8a\x52\xbc\x91\x1a\x5c\x0a\x23\xbb\xd8\x56\xa6\xae\x49\xa9\x52\xfc\x26\xbe\xf0\xc7\xba\x86\xeb\x14\xe8\x72\x7c\x29\xb9\x4d\xcf\xfe\xc8\x2e\x14\x9b\x9e\xf1\x93\x68\x19\xff\xe6\x32\x6e\x61\x17\xc8\xe6\xfb\x16\x76\x46\xdf\x5c\x9e\x02\xa0\x47\x8e\x2d\xc9\x24\xfa\x1c\xb1\x3c\xbe\xa1\x8e\x5a\xd4\x94\x08\x87\x18\xe6\x46\x2d\x09\x35\xf9\x9c\xb3\xb1\x8f\xe1\xd1\x32\xab\xf9\xb5\xed\xd8\xd0\xac\xa5\x2a\x86\x4f\xa4\x41\x0a\x3b\xac\x63\x8f\x2d\x4d\x4d\x7c\xb3\x33\x56\x7a\x49\x10\x4f\xd7\xca\xe9\xb0\xf2\x8d\x2f\x51\xc2\x75\x0e\x3f\x9d\xb4\x06\xdb\x9f\x55\xe1\x87\x18\x86\xc2\x7f\x08\xd1\x11\xf2\x4d\xe8\x91\x9b\x52\xda\x21\x87\x82\xe1\x56\xa1\xc8\x24\xbc\x5a\xd0\x2a\x7c\xaa\x29\x09\x3f\x2c\xe8\xeb\x7a\xe6\xb1\xa6\x25\xcd\x34\x78\x29\xb6\x7d\x14\x5c\x51\xc8\xb2\x17\xfd\x80\x7c\x4c\x93\x78\xb8\xe4\x98\xd6\xe1\x6c\x99\x54\xc5\xf0\x89\x94\xec\x34\x0f\xbd\x00\xb0\x2f\xd5\xb1\xa7\xfb\xba\x00\xff\x00\x9e\x5e\x49\x17\x20\xa9\xc6\x41\xd7\x37\x8c\x9f\x70\xda\x2e\x1c\x06\x29\xee\xa1\x68\x63\x58\xb3\x85\xaa\x3a\x1e\xd2\x2a\x15\xde\xe9\x17\xef\x18\xa7\xbd\x30\x52\x85\xbe\x5e\x33\x1e\x1d\xd0\x2e\xbd\xb9\xef\x50\x29\x29\x44\xbf\x96\xb3\x4f\x6b\x7f\xea\x4f\x89\x6d\x3a\x85\x12\xdb\x10\x5b\x62\xbb\x34\x12\x35\xb5\x42\xe6\x33\xf3\x74\x49\xef\x41\xf0\x4e\xa4\x94\xc8\x6e\xf0\xc4\x82\x33\x2d\xed\x63\x35\xb2\xbe\xa1\xf2\x47\x56\xb3\x74\x49\x71\xf0\x32\xbe\xba\x65\x47\xde\xb0\x3b\x6b\x0c\x76\xe9\xf6\x0b\xcf\xee\xeb\xf2\x21\xca\xf5\x02\xca\xbc\xf7\x4c\x97\xd1\x4f\x63\xc7\xd5\x5f\x92\x96\x58\xf9\x1a\xbe\x5f\x70\xb4\x7f\x02\x67\xf9\xfe\x46\xd6\x3e\x90\x6c\xdf\x5c\x9d\xee\x7b\x99\xfc\xa5\x9a\x5c\x5d\xd0\xac\x3e\x8a\xcf\x00\x00\x00\xff\xff\xe6\x5f\x74\x96\xe8\x06\x00\x00")

func mutation_graphql() ([]byte, error) {
	return bindata_read(
		_mutation_graphql,
		"mutation.graphql",
	)
}

var _query_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x53\xcd\x6a\xdc\x4c\x10\xbc\xeb\x29\xca\xf8\x62\x83\xf9\x1e\x40\x37\xff\x60\x30\x7c\x49\x1c\xbc\x3e\x85\x10\x7a\x35\x2d\x69\xe2\xd1\xb4\x32\x3f\xb1\x95\xe0\x77\x0f\xa3\x7f\x2d\xbb\x81\xdc\x24\x75\x55\x57\x75\xab\xfa\x1c\x3f\x22\x3b\xcd\x1e\xbe\x96\x68\x14\xac\x04\x34\xa2\x74\xd9\x21\xd4\x0c\xb5\xff\x0f\xfc\xc6\x45\x0c\xac\xa0\x2d\x5a\x72\x8e\x8c\x61\x93\x85\xae\x65\x3c\x52\xc5\x0f\xb6\x14\xfc\xce\x80\x20\x81\x4c\x8e\x07\x1b\xce\x70\x8e\x8f\xb1\xd9\xb3\x83\x94\x68\xa9\x62\x0f\x2a\x03\x3b\x84\x5a\x7b\x88\xe5\x0c\x90\xb2\xf4\x1c\x66\xfc\xae\xe6\xf1\x53\xe2\xf4\xb8\x44\x44\xe9\xa4\xe9\xad\xf8\x40\x2e\x64\x80\xd1\x8d\xde\xd2\x1a\x7a\x4b\xf6\x5f\x2d\x5a\x76\x3d\x2b\x03\x2a\xfd\x93\xed\x11\x37\x3a\x70\xe3\x87\x6a\xf6\x9e\x65\xda\xb6\x31\xf4\x73\xf4\x33\xac\x4c\x6d\xa4\x16\xe8\x07\xb2\x54\xb1\xbb\xd7\x26\xcd\x93\x38\x96\x1a\xce\xf1\x14\x9c\xb6\x55\x06\x70\x43\xda\xac\xde\xbf\xcb\x7e\xa7\x83\x59\x43\x62\xd4\x2a\xc7\xf3\xf3\xc3\x5d\x5a\x1b\x1b\x6e\x6b\xb1\x0b\x60\xd6\xba\x63\xc3\x15\x05\x5e\x89\x6d\xa9\xa1\xf8\x96\x5e\xe7\xc6\xff\x6e\xe5\x2f\xea\xb7\x12\x9d\x67\x7f\x7a\x52\x2a\x0a\xf6\x7e\xd7\xb5\x9c\xe3\x7a\x7e\xce\x80\x3d\x15\x2f\x95\x93\x68\xd5\x6d\xcd\xc5\x4b\x8e\x1b\x11\xc3\x64\x33\xa0\x75\xba\xe0\x1c\xf7\x46\x28\x6d\x98\x8c\x91\x57\x56\x3b\xb9\x89\xdd\x0c\xc3\x39\x9e\x6a\x79\x85\x58\xd3\xa1\x18\x5c\x20\xd4\x14\xd0\x49\x04\x39\x06\xc5\x50\x8b\xd3\xbf\x58\x21\x08\xf6\x22\x2f\x6b\xdb\x4d\x4b\xb6\x3b\xb5\xb3\xcd\x0c\x33\xe9\x7f\xf6\x5e\xec\xc9\x3d\x1f\x2e\x8d\x2a\x9f\xe3\x4b\xaa\x7e\x1d\x7a\x04\x76\x25\x15\xfd\x41\x68\x4b\x81\xd5\xe7\xc8\xae\xeb\x3b\xb5\xe3\x8d\xe4\xf3\xb5\x2c\xb2\x9f\x9c\x62\x77\x33\xe0\xc8\x17\x6c\x95\xb6\xd5\x7a\x5d\xa5\x66\x33\xff\xe0\xb3\x44\xec\xef\x6e\xe9\xae\xfb\xce\x53\x1d\x20\xd5\x68\x7b\xb1\xb8\x3f\xbb\xcc\x71\x9d\xbe\x4d\x35\x7f\x91\x0c\x0d\x66\xa6\x5a\x7a\x4e\xe4\x66\xc8\xf6\x8a\x7e\x99\x4f\x81\x5f\xca\xeb\x0e\x57\x28\xfb\x9d\xe5\xdb\xbb\xb8\x82\x0c\x93\xe5\xd3\x88\x4b\xa3\xc7\xe1\x3e\xd5\x98\xed\x03\xaf\x53\xe4\x57\x88\xe3\x7a\xdb\xdb\x38\x2a\x38\x41\x46\xc5\x62\x08\xc6\x81\xe0\x18\x97\xb9\xae\x4f\xe8\x6d\x62\x75\x54\x6e\x44\x8c\x6a\xa6\x4f\xd4\x81\xd8\x10\xb3\xb9\x7a\x5c\x69\x9d\xc5\xa3\x42\x03\x60\x9e\xaa\xbf\x8f\x13\x9e\x57\x17\x7c\xc2\x73\x42\x8c\xad\xa2\x4f\xa4\x67\xcf\x0e\xd9\x7b\xf6\x27\x00\x00\xff\xff\x53\x0a\x15\xbb\x1b\x06\x00\x00")

func query_graphql() ([]byte, error) {
	return bindata_read(
		_query_graphql,
		"query.graphql",
	)
}

var _schema_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x4e\x4e\xcc\x49\x2c\x52\x08\x0d\xf5\x74\xe1\x82\xb2\x43\x32\x73\x53\xb9\xb8\x8a\x93\x33\x52\x73\x13\x15\xaa\xb9\x14\x14\x0a\x4b\x53\x8b\x2a\xad\x14\x02\x41\x14\x97\x82\x42\x6e\x69\x49\x62\x49\x66\x7e\x9e\x95\x82\x2f\x94\xc5\x55\xcb\x05\x08\x00\x00\xff\xff\xc2\x82\x45\xdf\x48\x00\x00\x00")

func schema_graphql() ([]byte, error) {
	return bindata_read(
		_schema_graphql,
		"schema.graphql",
	)
}

var _type_admin_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x90\xcd\x8a\x83\x30\x14\x85\xf7\x79\x8a\x3b\xaf\x91\xdd\x30\x6e\x84\x61\x70\x28\xae\x4a\x17\x17\x72\x0d\x17\x92\x18\xf2\x43\x11\xf1\xdd\x8b\xb1\x60\xd5\x52\xda\x5d\x38\x9c\x7c\xdf\x49\xd2\xe0\x09\xbe\x95\x65\x07\xa3\x00\xc8\x99\x95\x84\xb6\xad\xab\x2f\x01\x40\x16\xd9\x48\x38\xa5\xc0\x4e\xcf\x41\xc7\x21\xa6\x3f\xb4\xf4\x18\x1a\xdc\x67\x93\x10\x2b\xb7\x41\x4d\xc0\xd6\x1b\xb2\xe4\x52\x84\x06\x35\x3b\x4c\xa4\xfe\x33\x85\xa1\x58\x49\x69\x8a\x12\xce\xa5\x7f\x11\x00\x1e\x35\xd5\xae\xeb\xe5\xdc\x2e\xa7\x99\xc9\xce\xe7\xb4\x40\x7f\x7b\x7d\x5f\x7c\xd8\xe8\x31\xc6\x6b\x1f\xd4\x66\xce\x72\xf5\x27\x10\x26\x2a\x80\xba\x04\xe3\xfb\x6f\xfa\xcc\xd4\x7a\x75\x34\x6d\x3f\xf7\xe0\x7d\xa2\xdd\x5b\x57\x41\x45\x86\x5e\x0a\x26\x71\x0b\x00\x00\xff\xff\x68\xfa\x3e\xad\xdb\x01\x00\x00")

func type_admin_graphql() ([]byte, error) {
	return bindata_read(
		_type_admin_graphql,
		"type/admin.graphql",
	)
}

var _type_auth_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\xa9\x2c\x48\x55\x70\x2c\x2d\xc9\x08\xc9\xcf\x4e\xcd\x53\xa8\xe6\x52\x50\x28\x01\xb1\xac\x14\x82\x4b\x8a\x32\xf3\xd2\x15\xb9\x6a\xb9\x00\x01\x00\x00\xff\xff\xa3\x33\x16\xdc\x24\x00\x00\x00")

func type_auth_graphql() ([]byte, error) {
	return bindata_read(
		_type_auth_graphql,
		"type/auth.graphql",
	)
}

var _type_company_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x92\x4f\x6b\x33\x21\x18\xc4\xef\x7e\x8a\xc9\xed\x7d\x21\x97\xf6\xe8\x2d\x49\x29\x04\xfa\x97\xb2\xa7\xd2\x83\xc4\x27\x22\xec\x3e\x8a\xba\x85\x25\xe4\xbb\x17\x75\x53\x96\xec\xe6\xda\xdb\x38\x8e\xfa\x73\x78\xd2\xe0\x09\x3b\xd7\x79\xc5\x03\x4e\x02\x50\xde\x07\xf7\x4d\x5a\x62\xeb\x5c\x4b\x8a\x05\xd0\xf7\x56\x4b\x34\xcd\xfe\x61\x25\x80\x43\x20\x95\x48\x6f\x92\xc4\x47\x0a\x96\x8d\x00\x58\x75\x74\x59\xe6\x4c\xa7\x58\x19\x0a\xf1\x9f\x57\x86\x24\xde\x94\xa1\x35\x8e\xb6\x4d\x14\x24\x9e\xeb\xe6\x63\x59\xae\xe1\x82\xa6\xb0\x1d\x24\x5e\xab\xf8\xff\x9b\xc8\xc7\xf2\x6d\x4a\xeb\x40\x31\x4a\x6c\xaa\x58\x89\xb3\x10\x85\x7c\x34\x2a\x79\xd5\x4f\x96\xe9\x6e\xca\x32\xf1\xef\xa7\xfe\xc1\xf5\x9c\x86\xa9\xe3\x5d\x4c\x3b\xa7\x69\x96\x0a\x93\xd8\xe5\xe9\xb1\xb4\xcc\x08\xdb\xf9\x96\x3a\xe2\x14\xf3\x57\x2d\xe7\x7e\xde\x7b\x0a\xb5\x52\xd2\x86\xa2\xc4\xe7\x78\xe2\x2b\xbf\xa4\x0c\xed\xf9\xe8\x6a\x35\x59\xe5\x7b\x2d\xfb\x3e\x61\x57\xfa\x1d\xc3\xfb\x62\x9d\x0a\x48\x31\x5e\xae\x9a\xfe\xbb\x5f\x57\xba\xc6\xeb\x25\xba\xab\x11\x99\xb3\xde\x18\xad\x25\xfc\x1b\xf4\x33\xf8\x05\xf6\x39\xba\x38\x8b\x9f\x00\x00\x00\xff\xff\xc7\xdd\x28\x06\xe4\x02\x00\x00")

func type_company_graphql() ([]byte, error) {
	return bindata_read(
		_type_company_graphql,
		"type/company.graphql",
	)
}

var _type_course_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x57\x4d\x6f\x1b\x37\x10\xbd\xef\xaf\x18\x5b\x07\xb7\x80\x7d\x68\xfc\x81\x56\x37\x47\x51\x51\x01\x0e\xa2\x48\x2b\xb4\x85\xe1\xc3\x98\x3b\x5a\x11\xe1\x92\x1b\x72\x68\x5b\x08\xf2\xdf\x0b\x92\x2b\x2d\xa5\x58\x69\xd2\xfa\x10\x08\xf0\xee\x92\x7c\xc3\x37\x33\x6f\x86\x34\x69\xdf\xc0\xb5\x10\xe4\x5c\xb9\x6e\x09\x3e\x15\x00\x96\x1c\x5b\x29\x98\xaa\x02\xc0\xb4\xa4\x8b\xcf\x45\x11\x17\xce\xd9\x7a\xc1\xde\xd2\x58\x51\x43\x9a\xe3\xf2\xc6\x54\x5e\x51\x01\xc0\xe4\xb8\x00\x50\xe4\x9c\xe9\x31\x6f\xe3\x74\x0e\x78\x7e\xdd\xc8\x78\xeb\x68\x4b\xc2\x68\x25\x75\xb0\x2a\x14\x3a\x67\x8d\x69\xc2\x4a\xa9\x99\xec\x12\x05\xc1\x7c\xad\x14\xde\x7b\x37\x61\x6a\x92\x55\xc9\x8a\x86\x81\xa2\xd4\xf5\x51\x01\xe0\xbd\xac\x86\xb0\x58\x4c\xde\x84\x2f\x61\x9a\x56\x11\xd3\x10\x5e\x1b\xa3\x08\xe3\xc6\x1c\x76\x4b\x04\x41\x86\xf9\xc0\xd1\xbd\x80\x6d\x80\x7b\xd4\x9a\xec\xa4\xc1\x9a\x16\xb3\x9b\x0d\xb6\x00\xa8\xc8\x09\x2b\x5b\x96\x46\xe7\x16\xd9\xa2\x4e\x13\xf9\xa8\xeb\x98\x0c\xe1\x36\x27\x75\x74\xb7\x65\x7f\x13\xa3\xf8\xd2\xec\x9b\xf6\x7c\x97\x35\xd3\xd3\x0e\x31\xc6\x3a\x90\x2a\xb1\xce\xb8\x94\xe4\xf8\xa5\x99\xec\x6c\x04\x80\xcc\xd4\xb4\xec\xae\x95\x32\x8f\x54\x0d\x61\xa2\x83\x96\x5a\x74\x6e\x4a\x56\x90\x66\xac\x69\x08\xbf\x2b\x83\x61\xfc\xa3\x27\x17\x22\xed\x4a\x73\xad\xdd\x23\xd9\x0d\xc0\xa2\xae\x4c\x23\x1d\xa5\x61\x97\x6f\xb9\x05\x0d\xe1\xf6\x7d\xf7\x9e\x79\x99\x84\x1a\xfd\x91\x89\x40\x0c\xc8\xba\xa5\x61\x26\xe2\x30\xa6\xb1\xd9\xf1\xf6\x1e\xc5\x87\xda\x1a\xaf\xab\xd1\x8a\xc4\x87\x7c\xcf\xd6\x4a\xb1\xe1\x9d\x42\xa1\x8c\xcd\xe2\x4f\x4f\x82\x6c\xaf\x8d\xb0\xb7\x66\x6b\x2a\x2f\x72\x21\x15\x00\x2b\xf3\x58\x9a\xd1\x36\x90\xd9\xb8\xb7\x2e\x9f\xd9\x84\xe8\x71\x85\xfc\xb7\xf1\x37\x84\x56\x07\x99\x25\xb6\x77\xb1\x0f\x7c\xf4\xd2\xa6\x5c\xee\xce\xb8\x96\x84\x5c\x4a\x51\x92\x6d\x5c\xb6\x89\x40\xa6\xda\xd8\xf5\x10\x46\xdd\x5b\x48\x59\x4a\x55\x69\x5e\xfb\x75\xee\xf2\xbf\x6b\x3b\x45\x73\x8a\xf5\x4e\x75\x4e\xb1\x96\x1a\x99\xaa\xf7\x9e\xec\x3a\xe6\x81\xaa\x9a\x82\x9d\x04\xb8\x8b\x82\xa8\x69\xa2\x97\x66\x18\x96\xc7\xb7\xd4\x3e\x5a\xcf\x30\xc7\x07\x1a\x6d\xba\x4a\x82\x4c\xe2\x44\x96\xd2\xbd\xec\x65\xbe\x05\xb1\x26\xc9\x7e\x4f\x5a\xbe\x92\x7a\xdc\x76\xdf\x61\xd6\x89\xf7\x34\xf1\x8c\x24\xba\xca\x88\xc5\xf3\xb5\xa4\x64\x9d\x68\xee\xa3\xfd\xdc\x88\x67\x63\x7b\x97\x60\x90\x1e\x66\x09\xbc\x22\x28\xc3\x2c\xfc\xb4\x6d\xc1\x20\x92\xf6\x8d\x56\xeb\x9f\x43\x9b\xc0\xa7\x29\x5a\x96\x42\xb6\x18\x45\x92\x22\xe7\x18\x2d\xbf\xc1\xa0\xb2\x52\x36\xc1\x15\xd2\xd5\xce\xb7\x32\x02\x77\x22\xb4\x93\x9c\x77\xb1\xf7\xff\xbf\xcc\x0c\xc0\x91\x30\xba\x42\xbb\x1e\x7d\x43\xe6\x60\x00\xf3\x95\xb1\x9c\xb7\xe7\x10\x85\xe4\xf0\x81\xbc\xc2\x00\x4e\xae\xef\x8d\x67\xe0\x95\x74\xdd\xda\x93\xb0\x71\x58\x75\xa8\x18\x03\xea\x0f\xf3\x08\x6c\xb6\x0d\xef\x30\xfe\xb9\xa2\x85\x01\x8c\x1d\xcb\x26\xd4\x40\x5a\x72\xc8\xd6\xe1\xf2\x0e\x24\xfe\x5c\x21\xc3\xda\xf8\x13\xa5\x40\x85\xf9\x13\xb8\xf7\x4a\x11\x43\x6b\xa4\x66\x77\xb8\x05\x04\xf4\x2c\x9b\xfa\x12\xf8\xa3\xea\xdd\x6d\x6e\x30\xdb\x6e\xd1\xf7\x9c\x24\xc0\x7e\x34\x1d\x59\x91\xe7\xfe\xc5\x67\xff\xec\xea\xd1\x96\x90\xa9\xc4\xba\xd7\xed\xfe\x29\xb0\xe3\xd7\x51\x7f\x78\x62\x1d\x97\xf7\x66\xbf\x1d\xbb\x51\xf8\x7f\x31\x90\xf3\xde\xd8\xf9\x1e\xf2\x09\x3f\xf5\x56\xac\xd0\x75\x45\xeb\x7a\x03\x49\x88\x21\x71\xe1\xa0\xbc\x8b\x81\x73\xf1\xc0\xed\x32\x79\x04\x03\xb8\x91\x8e\x43\xb5\x55\xa4\xa8\x46\x26\x17\xe9\xbb\x58\xa6\x6c\x71\xa2\x1f\x8c\x14\x34\x6e\x50\xaa\x2c\x97\x41\x48\x2d\x53\xd5\x09\xa0\x53\xd8\x33\x07\xed\xc8\xe8\xa5\xb4\xcd\x97\x57\xbf\x3d\xd6\x33\x72\xad\xd1\xdd\xd9\x1e\x2f\x64\x18\x2b\x71\xb4\x7f\x2f\x09\x9c\xd9\x7a\x02\x99\xfa\x64\xa8\x3d\xd4\x6b\x90\x0e\x8c\x06\x04\x61\x34\x5b\x14\x0c\xa8\x2b\xe0\x95\x77\x50\x19\x72\xfa\x84\x41\x13\x55\xa1\x5a\x5b\x5c\x83\x6f\x97\xd6\x74\x0d\xd3\xca\x96\x46\x4a\x92\xe6\x39\x09\x4b\x79\x5f\x9a\x2c\x9f\xe3\x12\xf6\x5a\xa2\x72\x74\x9a\x0a\x5e\x3a\xa8\xe5\x03\x69\x70\x26\x06\x18\x04\xea\xb0\x4b\xf0\x75\x00\xb7\x30\xfe\xeb\xfa\xed\xf4\x66\x0c\xa3\x77\x8b\xd9\x7c\x0c\xf3\x72\xb6\x18\x95\x8b\xd9\xb8\x18\x00\xc0\xa7\xa4\xf2\xe3\x74\x95\x3f\x3e\xed\x34\x74\x7c\x7e\x71\x7e\x71\x7e\x96\xff\xbd\x88\x8f\xe3\xcf\xa7\x3b\xb8\x74\x95\xef\x71\xbf\xbc\x8a\xbf\xb3\xf4\x78\x75\x96\x7d\xed\x43\xc3\x3f\x03\x3d\xf0\xd7\xdf\xd2\xef\xec\xf2\x2a\xfe\xce\x2e\xaf\xb6\x2f\x97\x57\x97\x09\x7c\x57\xfc\x13\x00\x00\xff\xff\x42\xfb\x00\xb4\xb6\x0c\x00\x00")

func type_course_graphql() ([]byte, error) {
	return bindata_read(
		_type_course_graphql,
		"type/course.graphql",
	)
}

var _type_delegate_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x92\xc1\x4e\xf3\x30\x10\x84\xef\x79\x8a\xed\xed\xff\x5f\xc1\xb7\xd2\x5e\x22\x21\x54\x20\x3d\x21\x84\x96\x7a\x6a\x0c\x8e\x6d\xd9\x0e\x28\xaa\xfa\xee\xc8\x49\xd3\xa4\x69\x2f\xdc\x92\xd1\xac\x77\xe7\xdb\x4d\xad\x07\xad\x61\xa0\x38\x81\x0e\x05\x51\xd3\x68\x29\x68\xbb\x2d\xd7\x8b\x82\x68\x17\xc0\x09\x72\x99\x04\x3d\xa7\xa0\xad\x2a\x88\xaa\x6a\xf5\x56\xae\x07\x21\xbb\x50\xb3\x36\x13\xc7\x5e\x87\x98\x1e\xb8\xc6\xd4\x64\xf8\x5a\x4b\x30\xf0\x1f\xce\x62\x52\x9c\x7d\xf7\x4e\x69\x3b\x35\x7e\xba\xf7\x4a\x27\x73\x51\xbc\x73\xb5\x67\xdb\x0a\x5a\xf5\x1f\x59\xf3\xc1\xed\xb5\x41\x59\xb3\xc2\x36\x4c\x67\xe2\x5d\xd2\xdf\x3a\xb5\xff\x3c\x2b\x08\xda\xb0\xc2\x7f\x41\xcb\x93\x9a\x7f\x8b\x63\x51\x68\xeb\x9b\x44\xab\x2e\xf5\x80\xa5\xec\xb4\xc3\xd8\x31\xc3\xe9\x11\xfd\x25\xeb\x1c\xd2\xad\x48\xb7\x78\x28\x58\x04\x4e\xd8\x70\x8c\x3f\x2e\x48\x41\x77\xce\x19\xb0\x9d\xc7\xf5\xc6\xb1\xac\xdc\x17\xce\xe4\x72\xa2\x6e\xc3\x97\x81\x9e\x10\xbd\xb3\xb1\xdf\xb7\x3c\x89\xe2\x7c\x06\x8b\x49\x53\x39\x76\x9d\x3d\x39\xb8\x33\x39\xd2\xb5\x37\xa8\x61\x53\xcc\x60\xb5\xcd\x95\x8f\x0d\x42\xdb\xb5\x80\x54\x88\x82\x5e\x86\x92\xd7\x3c\x39\x2b\x94\x76\xef\xfa\x4d\xe4\xaf\x11\xff\xe0\xeb\xae\xa0\x7b\xe1\xfa\xe4\xfc\x6c\xae\xac\x59\x97\x93\x8d\x7c\x8e\xc5\x6f\x00\x00\x00\xff\xff\x41\x95\x11\x83\xdf\x02\x00\x00")

func type_delegate_graphql() ([]byte, error) {
	return bindata_read(
		_type_delegate_graphql,
		"type/delegate.graphql",
	)
}

var _type_individual_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xce\x3d\xca\xc2\x40\x10\x87\xf1\x7e\x4e\x31\xef\x35\xd2\xbe\x55\x1a\x0b\x3f\x0e\x30\xb2\x7f\x75\x64\xb3\xbb\xcc\xcc\x2a\x22\xb9\xbb\x90\x42\x03\x69\x7f\xf0\xc0\xa3\xa5\xf5\xe0\x7f\x83\x04\xc6\x92\xf4\xa1\xa9\x4b\x1e\x17\x7d\x13\xf3\x45\xcd\x63\x27\x13\x06\x3e\x84\x69\xb9\xfe\x11\x73\x96\xad\xdd\xeb\xf9\xa8\x91\xbf\x46\xcc\x81\x8c\x76\xab\x65\x6d\x98\x44\xf3\xba\x6b\xe2\xfe\xac\x96\x7e\x36\x13\xc5\xab\x61\x33\xb5\x87\xb7\x5a\x1c\xcb\x57\x77\xd8\xc0\x27\x87\xd1\x4c\x9f\x00\x00\x00\xff\xff\xb1\x3b\x04\x79\xc5\x00\x00\x00")

func type_individual_graphql() ([]byte, error) {
	return bindata_read(
		_type_individual_graphql,
		"type/individual.graphql",
	)
}

var _type_lesson_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x8c\x31\x0a\xc3\x30\x0c\x45\x77\x9d\x42\xb9\x86\xd7\x76\x31\x74\x48\x29\x99\x4a\x07\x41\x7e\x85\x21\x51\x8c\xad\x40\x43\xc9\xdd\x8b\x93\xa1\x9b\x78\x7a\xff\xf9\x96\xc1\x37\xd4\xba\x58\x2f\x0a\x4e\x73\x9e\x30\xc3\xbc\x72\x2f\x9a\x4c\x1c\xe3\x7d\x45\xd9\xf8\x4b\xcc\x18\x15\x35\xf0\xf3\x1c\xbc\x88\x39\x8b\x22\xda\x7b\x09\x4d\x3f\x2e\xda\x89\x92\xe5\xd5\xf9\x52\x20\x8e\xd3\x8d\x07\x69\x0d\x4f\x3e\x21\xf0\xc3\x4b\x32\xed\x1a\x10\x6d\xcd\x61\x88\xd7\xae\x25\x1d\x1f\xff\xff\x77\xfa\x05\x00\x00\xff\xff\xd4\x85\xeb\xa7\xa3\x00\x00\x00")

func type_lesson_graphql() ([]byte, error) {
	return bindata_read(
		_type_lesson_graphql,
		"type/lesson.graphql",
	)
}

var _type_manager_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x92\xcd\x6e\xe3\x30\x0c\x84\xef\x7a\x0a\x2e\xf6\x2d\x7c\xdb\x4d\xb0\x80\x81\x6d\x91\xfe\xf8\x54\xf4\xc0\x46\xb4\xc2\x42\xa2\x04\x49\x46\x10\x04\x79\xf7\x42\x76\x7e\x9c\x5a\x97\xde\xec\xc1\x70\xc0\x8f\xa3\x7c\x08\x04\x0f\x28\x68\x28\x02\x1c\x15\xc0\x30\xb0\x6e\xa0\xeb\xda\xf5\x2f\x05\xb0\x8d\x84\x99\xf4\x9f\xdc\xc0\x4b\x8e\x2c\x46\x01\x90\x43\xb6\x97\xff\x62\xea\x39\xa6\xfc\x88\x8e\xe6\xa2\xc5\xa5\x96\xc9\x52\xd8\x79\x59\x18\xff\x7b\xc3\x32\x17\x3f\xfd\xc7\x2b\x67\x7b\x67\xdc\x7a\x17\x50\x0e\x0d\xac\xa6\x8f\xa2\x85\xe8\x7b\xb6\xd4\x3a\x34\xd4\xc5\xeb\x56\xea\xa4\xd4\x1c\x6d\x83\x86\x80\x5d\xb0\xe4\x48\x72\x82\x0d\x1a\x96\x02\xf6\x34\x50\x3c\x8c\xdc\xa4\x0d\xa5\x06\xde\xce\x13\xef\x25\x1c\x0d\xb5\xd2\xfb\xa6\xf8\xc7\xaf\x92\xcb\x12\x86\x7c\x09\x1e\x17\x9f\xe6\xbf\x5f\x25\x60\x4a\x7b\x1f\xf5\x5c\x13\xff\x4c\x29\x34\xf0\xd7\x7b\x4b\x28\xb7\xb8\xd5\x78\xe7\x73\x68\x3b\x4a\xc7\x1b\x72\x69\x63\xea\x04\x7e\xc3\x3f\x1f\x01\xb5\x63\x49\xb0\xdf\x91\x4c\x15\xb1\x18\x70\xd3\x74\x02\xdf\x83\xe6\xbe\xa7\x48\x92\xcf\x11\x4c\xe9\x27\x45\x2d\x60\x6a\x7d\x54\xdb\x5c\x52\x5f\x19\xd7\x64\xa9\xc2\x38\x7f\x70\x57\x6f\x17\x74\xed\x1e\xf7\x8f\xf3\x6e\xcb\x1a\x5e\x85\xae\xb6\x77\x85\x4f\x9d\xd4\x57\x00\x00\x00\xff\xff\xf3\x0d\x49\x60\x1b\x03\x00\x00")

func type_manager_graphql() ([]byte, error) {
	return bindata_read(
		_type_manager_graphql,
		"type/manager.graphql",
	)
}

var _type_question_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x90\x41\x4b\x03\x41\x0c\x85\xef\xf9\x15\x19\xfc\x17\x7b\xb3\x6b\xd1\x05\x51\xa4\xed\x49\x8a\x84\x36\x5d\x06\x77\x33\xeb\x24\x8b\x16\xe9\x7f\x97\x99\xb1\xa5\x16\x84\xee\x31\x8f\xf7\xde\x97\xc4\xf6\x03\xe3\xcb\xc8\x6a\x3e\x08\x7e\x03\xa2\xf1\x97\x55\xb8\xb0\xe8\xa5\x75\x80\x18\x49\xb6\xa1\xf7\xca\xb7\xa2\x9f\x1c\xb5\xc2\x59\x08\x1d\x93\x00\xe2\xc7\x6f\x70\xb9\x1f\xb8\x3a\xd5\xa4\x29\x25\xe9\x18\x78\x2d\x51\xb7\x86\x03\x40\x26\x16\x21\xf3\xbc\xd6\x21\x46\xde\xd8\x79\xf1\xf9\x12\xc9\xd3\x53\xcb\xcb\xf0\xce\x72\x12\x0f\x00\x2c\x63\xff\x07\x9a\xfb\x16\xcd\xd3\xfd\xe3\xfc\xad\x7e\x78\x6e\xea\x79\xb2\x79\x19\x46\xc3\x3a\x32\x19\x1f\xdd\x4d\xd6\x26\x9d\xeb\x26\xdc\x5b\x60\x33\x52\xbf\x29\x35\x99\xe7\xd6\xc9\x65\xd4\x26\xcb\x6a\xd5\xdc\x25\xe1\x62\xc1\xcb\xcc\x3f\x2f\x72\x78\x83\x5b\xde\xd1\xd8\x99\xa2\x05\xdc\x51\xa7\x7c\xe5\xdf\x7e\x02\x00\x00\xff\xff\xfe\x07\x43\x08\xf3\x01\x00\x00")

func type_question_graphql() ([]byte, error) {
	return bindata_read(
		_type_question_graphql,
		"type/question.graphql",
	)
}

var _type_test_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x52\xc1\x6e\xea\x30\x10\xbc\xfb\x2b\x16\xbd\xbf\xc8\x8d\xd7\xaa\x12\xa7\x52\x01\x87\xaa\xea\xc1\xc4\xd3\x60\x35\xb1\x53\xef\xba\x28\xaa\xf8\xf7\x6a\x9d\x10\x28\x12\xa7\xd8\xbb\x33\x93\xd9\xf1\xca\xd0\x83\x1e\x12\xac\x60\x0b\x96\xb5\x1d\xda\x68\x1d\xfd\x18\x22\x01\x4b\x45\x5a\x35\x27\x63\x7c\xe8\xb3\x5c\x21\x57\xe5\xae\xb8\x60\x3b\x54\xb4\x91\xe4\x43\xb3\x30\x44\xb5\x15\x34\x31\x0d\x15\xed\x76\xab\x47\x43\x64\x45\xd0\xf5\xc2\xcb\xb6\x8d\x47\xb8\x8a\x56\x41\x14\xd8\x5b\xe6\x35\x52\x8d\x20\xb6\x41\x45\x4f\x6d\xb4\xa5\xf1\x95\xc1\xe2\x63\xe0\x6d\x5c\x06\x3e\x22\xcd\x94\x64\x83\x8b\x9d\x67\x8c\x75\xae\xe8\x7f\x8c\x2d\x6c\x58\xd0\x3f\x7a\xfe\x46\x4a\xde\x81\xa9\x47\x9a\x45\x66\x8e\xd5\xdb\xb5\x7a\x45\x6f\xea\x70\xf1\x5e\xc8\xc9\x21\xc1\x51\xeb\x59\x28\x7e\x90\x1c\x70\x41\x92\x0f\x24\x07\xcf\x25\x93\x4b\x1a\x2f\x53\x7f\x34\x53\xc2\x38\x53\x54\x78\x0c\x40\xc5\xf5\x7b\x2b\x4a\x7b\xf8\xd0\x90\x2d\x5c\x38\xcd\xa9\x1c\xef\x33\x19\x2d\x6a\x81\x9b\x80\x17\x1f\xe3\xff\xf5\x55\x8a\x87\x3a\xe6\xc4\xb8\xaf\x33\xf6\xcb\x31\x33\x12\xe9\x5c\xf6\x53\xcd\x68\x49\x47\x24\x1f\xa6\x05\xb8\xaf\x52\x70\x43\xcc\x64\x13\x26\x47\x3e\x34\xf3\x18\x9a\xee\xdf\x7c\xc6\x9c\x5f\x63\x4e\x67\x08\x49\x9c\xa5\x74\x9a\xb2\x8c\x9b\xbc\xef\xbc\xdc\x2e\x23\xe7\xba\x06\x5f\xbd\xb7\x39\x99\xdf\x00\x00\x00\xff\xff\x4d\x0e\xfc\x92\xbc\x02\x00\x00")

func type_test_graphql() ([]byte, error) {
	return bindata_read(
		_type_test_graphql,
		"type/test.graphql",
	)
}

var _type_users_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x53\x4d\x6b\xdc\x3c\x10\xbe\xeb\x57\x3c\xc1\x97\xf7\x85\x92\x1f\xe0\xdb\x92\x52\x58\x28\xa5\x25\xd9\x53\xc9\x61\xd6\x1a\x7b\xa7\x91\x25\x57\x1a\xa5\x98\x92\xff\x5e\x24\xef\x3a\x4e\xb3\xf4\x66\xcd\xcc\xf3\x31\x1f\x66\x9f\x47\x1c\x12\xc7\x87\x79\x62\xfc\x36\xc0\x48\x9e\x06\x8e\x06\x10\x6f\xe5\x59\x6c\x26\x67\x00\xcb\x8e\x07\x52\x36\x2f\xc6\x34\x15\x01\x49\x20\xe8\x49\x3c\xb4\x80\xf5\x44\x8a\x2e\x38\x47\xca\x09\xe2\xfb\x10\x47\x52\x09\x1e\x74\x0c\x59\xa1\x27\xbe\x90\x7f\x78\xa5\x6b\x40\xde\x6e\xa4\x90\x0b\x75\x21\x4c\xb7\xb8\x0f\x23\xa3\x17\x76\x36\x81\x22\xc3\x07\xc5\x10\xc4\x0f\xd0\x80\x23\x83\x9e\x49\x1c\x1d\x1d\xc3\xf2\xc4\xde\x8a\x1f\x4c\x83\xe0\xab\x56\x35\x15\xfa\x85\x70\x0e\xb9\x32\x44\xfe\x99\x39\x69\xa1\xb0\xa4\x84\x3e\xc4\x5b\x53\x2b\x6b\x4b\x65\x00\xe5\xd5\xae\x33\xb9\x31\x00\x8f\x24\xae\xc5\xbd\xc6\x22\x00\xf4\x12\x93\x7e\xa1\x91\x2f\xb1\x52\xe4\xe8\x7d\x4c\xd9\xf1\x74\x0a\x9e\x37\xe0\x1f\xe1\xf8\x20\xea\xb6\xa1\x02\xfd\x1c\x06\xf1\x5b\x6c\x17\xc6\x89\xfc\xdc\xe2\x6e\xf9\x30\xc0\x14\x43\x2f\x8e\xf7\x23\x0d\x7c\x88\x5b\x47\xd4\xa9\x3c\x8b\xce\xff\x4d\x34\x70\x8b\xaf\x34\xf0\xff\x2d\x76\xe7\x68\x79\x1a\xa0\x59\xca\xf8\x2e\xe4\x98\x38\x5d\xa9\x3d\xa7\xd6\xfa\x8e\xa3\x4a\x2f\x5d\xd9\xe8\x42\x60\x6d\xe4\x94\x5a\xec\x96\x8f\x72\x0d\xf5\x84\x2e\x52\xeb\x19\x79\xfe\xb5\x90\x5d\xdc\x91\xb2\x3d\xb7\xe5\x58\xd9\xae\xd9\x9e\xc4\xad\xcf\x17\xb3\x6c\x63\x6b\x1d\x52\x20\x23\x7b\x4d\xc5\xad\xf8\x42\xf5\x2d\x73\x9c\xab\x12\xdb\x81\x53\x8b\xef\x17\xc8\x63\x99\x14\x0d\xbc\xf7\x7d\x58\xda\x2b\x5f\xef\x98\x2b\x36\x67\xb1\x2d\x0e\x87\xfd\xc7\x9b\x75\xf3\xdb\x56\xea\x22\x22\x17\xc1\x9d\xbe\xdd\x4e\xb1\x5b\x96\x73\xb1\xdd\xe0\x95\x7e\x33\xc7\x7f\x9a\x6f\xf0\x97\xfd\x33\xf0\xb1\x66\xae\x34\xd1\xa0\x2a\x35\xd8\x9d\x1d\xa0\xcb\x31\xb2\x57\x37\xe3\xc8\xf5\xc7\xa0\x27\xf6\x38\xce\xa0\x7a\xf8\xd7\x6c\x9d\x85\xdf\xb6\x70\xb3\xc4\x16\xb6\x9d\x2a\x8f\x93\xb6\xd8\x7b\x5d\x12\xa3\xf8\xac\x9c\x1e\x22\x75\x4f\x6c\x5b\x7c\x72\x81\x6a\xea\xc5\xfc\x09\x00\x00\xff\xff\xec\xf6\x6e\x9e\x43\x04\x00\x00")

func type_users_graphql() ([]byte, error) {
	return bindata_read(
		_type_users_graphql,
		"type/users.graphql",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"mutation.graphql": mutation_graphql,
	"query.graphql": query_graphql,
	"schema.graphql": schema_graphql,
	"type/admin.graphql": type_admin_graphql,
	"type/auth.graphql": type_auth_graphql,
	"type/company.graphql": type_company_graphql,
	"type/course.graphql": type_course_graphql,
	"type/delegate.graphql": type_delegate_graphql,
	"type/individual.graphql": type_individual_graphql,
	"type/lesson.graphql": type_lesson_graphql,
	"type/manager.graphql": type_manager_graphql,
	"type/question.graphql": type_question_graphql,
	"type/test.graphql": type_test_graphql,
	"type/users.graphql": type_users_graphql,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"mutation.graphql": &_bintree_t{mutation_graphql, map[string]*_bintree_t{
	}},
	"query.graphql": &_bintree_t{query_graphql, map[string]*_bintree_t{
	}},
	"schema.graphql": &_bintree_t{schema_graphql, map[string]*_bintree_t{
	}},
	"type": &_bintree_t{nil, map[string]*_bintree_t{
		"admin.graphql": &_bintree_t{type_admin_graphql, map[string]*_bintree_t{
		}},
		"auth.graphql": &_bintree_t{type_auth_graphql, map[string]*_bintree_t{
		}},
		"company.graphql": &_bintree_t{type_company_graphql, map[string]*_bintree_t{
		}},
		"course.graphql": &_bintree_t{type_course_graphql, map[string]*_bintree_t{
		}},
		"delegate.graphql": &_bintree_t{type_delegate_graphql, map[string]*_bintree_t{
		}},
		"individual.graphql": &_bintree_t{type_individual_graphql, map[string]*_bintree_t{
		}},
		"lesson.graphql": &_bintree_t{type_lesson_graphql, map[string]*_bintree_t{
		}},
		"manager.graphql": &_bintree_t{type_manager_graphql, map[string]*_bintree_t{
		}},
		"question.graphql": &_bintree_t{type_question_graphql, map[string]*_bintree_t{
		}},
		"test.graphql": &_bintree_t{type_test_graphql, map[string]*_bintree_t{
		}},
		"users.graphql": &_bintree_t{type_users_graphql, map[string]*_bintree_t{
		}},
	}},
}}
