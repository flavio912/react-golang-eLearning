package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _mutation_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x52\xcb\x6e\x1b\x31\x0c\xbc\xeb\x2b\x68\xf4\xd2\x5e\xf2\x01\xbe\xa5\x0e\x0a\x04\x88\xd1\x22\x4e\x3e\x80\x95\x18\x5b\xa8\x96\x52\x25\x2a\xe8\xa2\xf0\xbf\x07\xab\xd5\xbe\xe3\x23\x87\x33\xb3\xc3\x59\x7d\x81\x26\x0b\x8a\xf5\x9c\x40\x23\x43\xe3\x8d\x7d\x6b\x41\x2e\x04\xe6\xf7\x1d\xd0\x3f\xd2\x59\xc8\x40\xa2\xbf\x99\x58\x2c\x3a\xd7\xde\x29\x65\x39\x64\x81\xd7\xe0\x3c\x9a\x1f\xd6\xd1\x91\x04\xe1\xbf\x02\x78\xb3\x8e\x5e\xda\x40\x7b\x38\x49\xb4\x7c\xde\x29\x00\xed\x59\x88\xe5\x89\xf8\x2c\x97\x3d\x3c\xb2\xec\xd4\x55\x29\x69\x03\xcd\x2c\x9e\x29\x85\x62\x91\xa3\x9b\xab\x53\xd6\x9a\x52\x7a\xf1\x7f\x88\x27\xfc\xba\xcd\x70\xea\x89\xc5\xe3\xa6\xa8\x7c\xf4\x58\x4f\x2e\x54\x34\x8d\xe5\x27\x7f\xb6\xfc\xb5\x38\xee\xe1\x7e\x44\x76\xdf\xf6\x70\x9f\xe5\x52\x7c\x14\x40\x83\x8c\x67\x8a\x0b\xf6\x71\x86\xad\xf9\x68\x4c\x5d\x4f\xde\x03\xf2\xd8\x01\x9d\xa0\xce\x93\xfd\xaf\xe8\xbb\x1a\xfb\xcb\x9e\xbb\xe2\x93\x0c\xfa\x65\xe5\x9d\x7c\xd9\xe0\x0d\x97\xda\xcd\xd6\xa5\x2e\x96\x39\x0c\x39\x12\x5a\x25\x7f\x98\x83\x63\xf8\xef\xde\x3b\x42\xde\xf5\xc7\x96\xe6\x66\xa7\x96\x79\xe4\x96\xa9\xfb\xc1\xc1\xa0\xd0\x82\xfb\x3a\x41\x1b\x7a\x9f\x66\x41\x7f\x98\xa0\xcf\x92\xe8\x48\x28\x74\xf0\x4d\x40\x6e\x07\xcd\x61\x0e\x8e\xaa\x3a\xaf\x45\x43\xeb\x0a\xa0\x7b\xbf\x05\xfb\xd4\xa2\x10\x6a\xe3\xdb\xbf\x5b\xb6\x91\x34\x06\xd1\x17\x9c\xbf\xea\x55\x75\x21\x44\xff\x3e\x26\xce\xd9\x9a\x91\xbc\x08\x99\xf0\x9d\x7e\xb2\xb3\x4c\x07\x9f\x63\xa2\xe1\xb8\xd3\x0a\x1f\xef\xeb\x4d\xaa\xf2\xe0\x30\xa5\xe8\x7d\xb3\x15\xaf\x56\x6b\xfd\x55\x7d\x04\x00\x00\xff\xff\x1c\xa6\x01\x26\x29\x04\x00\x00")

func mutation_graphql() ([]byte, error) {
	return bindata_read(
		_mutation_graphql,
		"mutation.graphql",
	)
}

var _query_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x52\xcb\x6e\xdc\x30\x0c\xbc\xeb\x2b\x66\x91\x4b\x0a\x04\xfd\x00\xdf\x9a\x02\x05\x72\x68\x9b\xa2\xf9\x01\xed\x9a\xb2\x59\x48\x94\x2b\xd1\x6d\x16\x45\xfe\xbd\x90\xec\xf5\x23\xbb\x37\x49\x9c\xe1\x0c\x39\xba\xc3\xef\x91\x12\x53\x46\xee\xe3\xe8\x5b\x48\x54\x84\xd8\xb2\x3b\x43\x7b\x42\x7b\xfc\x08\x7a\xa5\xd3\xa8\xd4\x82\x05\x83\x4d\xc9\x7a\x4f\xde\xe8\x79\x20\x3c\xdb\x8e\x9e\xc4\x45\xfc\x33\x80\x46\xb5\xbe\xc1\x93\xe8\x01\x77\xf8\x36\x86\x23\x25\x44\x87\xc1\x76\x94\x61\x9d\x52\x82\xf6\x9c\x11\x85\x0c\x10\x9d\xcb\xa4\x0b\xfe\xa5\xa7\xf9\xa9\x70\x2a\xae\x10\xe1\x52\x0c\xd5\x4a\x56\x9b\xd4\x00\x9e\x03\xef\x69\xc1\xbe\x16\xfb\x7f\x05\x03\xa5\xca\x32\x40\xc7\x7f\x48\x6e\xb8\x61\xa5\x90\xa7\xaa\x79\x33\x86\x65\x18\xb5\xce\x51\x67\xd8\x98\xda\x49\xad\xd0\xaf\x56\x6c\x47\xe9\x0b\xfb\x32\x4f\xe1\x88\x0d\xd4\xe0\xa7\x26\x96\xce\x00\x14\x2c\xfb\xcd\xfd\x57\x3c\xbe\xb0\xfa\x2d\x64\x1c\xb9\xdd\x5c\x95\x3c\x0d\x7d\x94\x15\xb2\xa8\x7d\x8e\x61\xb0\x72\xde\xa8\xbd\xe3\xee\xc4\x2b\x4d\x29\x39\x7b\xaa\xd9\xb0\x58\xa5\xf6\xc7\x48\xe9\x5c\xb9\xc3\x1c\x57\xb3\x04\xb7\x2a\x7d\x4f\x2d\xa5\xc7\x09\x67\xf3\x89\xa4\x65\xe9\x1a\x3c\xc6\xe8\xc9\x8a\x01\x1c\x93\x5f\x94\x0f\x85\x58\xbf\xc0\xda\x9d\x6b\xe7\x4b\x1d\xb0\x6d\x60\xb9\xdf\xfa\x3d\x7c\x68\xf0\xa9\xbc\x5e\xaa\xf9\xbe\x58\x9a\xec\x5c\x6a\xe5\x5c\xe8\x61\x5a\xf4\x55\x83\x39\x80\x15\xb1\x6d\xf2\x00\x57\x57\xd5\xec\x73\x7a\x40\x9c\xc6\x6b\x2e\x73\xae\x8d\x9e\xa7\xff\x72\x9a\x36\x7d\x25\x37\x27\xb0\x20\x98\x6e\xeb\xed\x92\xba\xa9\x37\x23\xaa\xde\x9b\xf9\x1f\x00\x00\xff\xff\x43\x83\x89\xca\x7a\x03\x00\x00")

func query_graphql() ([]byte, error) {
	return bindata_read(
		_query_graphql,
		"query.graphql",
	)
}

var _schema_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x4e\xce\x48\xcd\x4d\x54\xa8\xe6\x52\x50\x28\x2c\x4d\x2d\xaa\xb4\x52\x08\x04\x51\x5c\x0a\x0a\xb9\xa5\x25\x89\x25\x99\xf9\x79\x56\x0a\xbe\x50\x16\x57\x2d\x17\x20\x00\x00\xff\xff\x1f\x5d\x4a\xc1\x2f\x00\x00\x00")

func schema_graphql() ([]byte, error) {
	return bindata_read(
		_schema_graphql,
		"schema.graphql",
	)
}

var _type_admin_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x8f\xcd\xaa\xc3\x20\x10\x85\xf7\x3e\xc5\xdc\xd7\xc8\xee\xc2\x85\x4b\xa0\x94\x94\xd2\x55\xe9\x62\xc0\x89\x0c\xa8\x11\x1d\x29\xa1\xe4\xdd\x4b\xa4\x34\x21\x09\xfd\xd9\xe9\xe1\xf3\x7c\x1e\xe9\x03\xc1\xaf\x76\xec\xe1\xa6\x00\x72\x66\x5d\xc1\x51\x22\x7b\xf3\xa3\x00\xc8\x21\xdb\x79\xd0\x72\x4c\xb2\x47\x47\xf3\xd0\xe2\x32\x1b\x94\x9a\x9a\x1b\x34\x04\xec\x82\x25\x47\x5e\x12\x34\x68\xd8\xa3\x90\x3e\x64\x8a\x7d\xf1\x92\x36\x94\x2a\x38\x17\xfe\xa2\x00\x02\x1a\xaa\x7d\xdb\x55\x23\x5d\x4e\x63\x27\xfb\x90\x05\xfe\x49\x0a\x57\x97\xdb\xfa\xdb\x4f\xb0\x50\xbb\xce\x3c\xc6\xad\xc6\x04\x4c\xe9\xda\xc5\xed\xa7\x7a\xe1\xf8\x70\xf9\x77\x9a\x53\xd0\x28\xf4\x72\xcd\x86\x79\x43\xbc\xf4\x4e\x8a\x3f\xb2\xf4\x46\x31\xa8\x7b\x00\x00\x00\xff\xff\xed\xbe\x06\x0d\x07\x02\x00\x00")

func type_admin_graphql() ([]byte, error) {
	return bindata_read(
		_type_admin_graphql,
		"type/admin.graphql",
	)
}

var _type_auth_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\xa9\x2c\x48\x55\x70\x2c\x2d\xc9\x08\xc9\xcf\x4e\xcd\x53\xa8\xe6\x52\x50\x28\x01\xb1\xac\x14\x82\x4b\x8a\x32\xf3\xd2\x15\xb9\x6a\xb9\x00\x01\x00\x00\xff\xff\xa3\x33\x16\xdc\x24\x00\x00\x00")

func type_auth_graphql() ([]byte, error) {
	return bindata_read(
		_type_auth_graphql,
		"type/auth.graphql",
	)
}

var _type_company_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x50\xbb\x6a\x03\x31\x10\xec\xf5\x15\xe3\x2e\x01\x37\x49\xa9\xce\x3e\x08\x18\xf2\x24\x65\x48\xb1\x44\x6b\x21\xb8\x5b\x09\x49\x17\x38\x4c\xfe\x3d\x48\x3a\x07\x25\xe9\xdd\x8d\x46\xb3\xbb\x33\x93\x97\xc0\x18\xfc\x14\x48\x16\x9c\x14\x40\x21\x44\xff\xc9\x46\x63\xef\xfd\xc8\x24\x0a\x98\x67\x67\x34\x5e\x73\x74\x62\x37\x0a\xf8\x88\x4c\x99\xcd\x2e\x9f\x49\x05\x08\x4d\xdc\x6b\x26\x12\xb2\x1c\xd3\x55\x20\xcb\x1a\xcf\x64\x79\x8b\xa3\x1b\x33\x47\x8d\x87\xf6\x79\x57\x9f\x5b\xf8\x68\x38\xee\x17\x8d\xa7\x06\xae\x7f\x14\x65\xac\x6c\x23\x63\x22\xa7\xa4\xb1\x6b\x60\xa3\xbe\x94\xaa\xde\x57\xa2\x79\x6f\xf8\xde\x09\xdf\xf4\x5e\x3a\xfe\xf6\x57\x0e\x3f\x4b\x5e\x7a\x26\xf8\x94\x07\x6f\xf8\x9f\x2a\x76\xb2\xf3\xe9\xb5\xb6\xe2\x11\x6e\x0a\x23\x4f\x2c\x39\x95\xa8\x4e\x4a\x3f\x2f\x33\xc7\x56\x2a\x1b\xcb\x49\xe3\x6d\x9d\x78\x2f\x97\xc8\xf2\x41\x8e\xbe\x55\x53\x50\xd9\xeb\x24\xcc\x19\x43\xed\x77\x15\x1f\x2a\x75\xaa\x46\x2a\xf1\xf8\xa7\xe9\x8b\xa5\xfe\x0e\x00\x00\xff\xff\x87\xf2\x57\xad\x2c\x02\x00\x00")

func type_company_graphql() ([]byte, error) {
	return bindata_read(
		_type_company_graphql,
		"type/company.graphql",
	)
}

var _type_course_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x55\x51\x6f\xe2\x38\x10\x7e\xf7\xaf\x18\xc8\xc3\xdd\x49\x45\xa7\x16\xa8\xee\x78\xeb\x71\x9c\x8e\x15\x2d\xdd\x02\x52\x25\xd4\x07\xaf\x19\xa8\x45\x62\x67\x6d\xa7\x5b\x54\xf5\xbf\xaf\x3c\x4e\x88\x49\x4b\x57\x5b\xed\xcb\xae\x82\x70\x12\x7f\xdf\x64\xe6\xf3\x67\x0f\xaa\x22\x83\x0b\x21\xd0\xda\xf9\x2e\x47\x78\x62\x00\x06\xad\x33\x52\x38\x5c\x31\x00\x9d\xa3\x62\xcf\x8c\x11\x70\xe6\x4c\x21\x5c\x61\x70\x94\x62\x86\xca\x11\x3c\xd3\xab\x22\x45\x06\xe0\xd0\x3a\x06\x90\xa2\xb5\xba\xe6\x5c\xd2\x74\x4c\x78\x81\x93\xca\xa1\x59\x73\x81\x30\xd4\x85\xb1\x21\x0b\xc5\x33\x1c\xf8\x2f\x4a\xb5\xf1\x20\xe7\xd3\x9b\xaa\x54\x2a\x2c\x51\x32\xcb\x43\x54\xfb\x4d\xde\x30\xe5\xd6\x1a\xad\xb3\xef\xa2\x26\xd0\xcc\x6c\xac\xf2\xc2\x17\x91\x00\x40\x51\xc8\x55\x85\x86\x04\xc6\x6b\x50\xda\xc1\x46\x3e\xa0\x02\x61\x90\x3b\x04\x0e\x0a\xbf\x80\x20\x2a\x71\xe2\x2f\x40\x02\x73\xe9\x52\xfc\xf3\x8a\x67\x08\x7a\x0d\xee\x1e\x63\xac\xe0\x0e\x37\xda\xec\x16\x8b\xf1\xbf\x11\xc7\x3f\xee\xd1\x25\x84\xf0\xf8\x28\xd0\xe4\x2e\x82\x7e\x5c\x8c\x27\x13\xf8\x30\x9b\x5e\xc1\x5a\x1b\x62\x94\x20\x22\x48\xe5\x8c\x5e\x15\xc2\x49\xad\xde\x66\xc5\x48\xa2\x7e\xe2\x62\xbb\x31\xba\x50\xab\xe1\x3d\x8a\xed\x00\xfe\xd1\x3a\x45\xae\x82\x0e\x3c\x9a\x07\xe1\x01\x20\x2d\x18\xfc\x5c\x48\x83\x2b\x0a\xc0\xf7\x96\x1b\xc4\xf6\x4b\x22\xf3\x81\x36\xc1\x7d\x1e\x9f\x1b\x29\x70\x00\xff\xa5\x9a\x3b\x48\x60\xa8\xad\x7b\x4d\x32\x9d\x6a\x13\x95\xf2\xff\xe8\x36\xbc\xa3\x59\xc7\x37\x76\x00\xcb\x30\x7b\x07\x09\x4c\x64\x19\x85\x6f\x68\x35\x7f\xb3\x84\xb3\x39\x0a\xb9\x96\x62\x8e\x26\xb3\xc7\x85\xa9\x60\xe0\x3c\xae\x94\x45\x29\x34\xe3\x8c\x6f\x70\x56\x50\x55\x11\x9d\x88\x8b\x3c\xd5\x7c\x05\xe5\x2c\xcc\xf5\x96\x0a\xa4\x4d\xe0\xad\x35\xe3\x0f\xd8\x30\x6b\xe5\xb9\x43\xc7\x35\xed\xfa\xba\x5f\xd8\x0b\x5b\xb0\xd7\xd7\x9d\x1d\x5f\x53\x76\x6c\xb5\xd8\xe1\xb2\xb0\x86\xfe\xac\xa9\x38\x3b\x22\x2d\x7b\x4b\x38\x1f\xa5\x70\xda\xbc\xb1\x0b\xe6\x7e\x1e\x7e\x17\x95\x6c\xa5\x23\x40\xab\x74\xf7\x87\x3f\xa0\xf8\xe3\x35\x37\x4e\x0a\x99\x73\xe5\xec\x00\xc6\xca\xb1\x03\xc5\xe3\x63\xe5\x57\x91\xbb\xf5\x6e\xbd\x6d\x75\xca\x0f\x60\x59\x6a\xe2\x30\x6b\xf9\x1d\x33\x55\xe9\x8e\xcc\xaf\x49\xb1\x52\x69\x5b\xab\x59\xe3\xc3\x51\x4f\x35\x34\xdb\x46\xab\x21\xae\x7f\x96\x0e\x7d\x86\xcb\xd0\x2e\xc2\x07\x5b\x75\xdc\xfa\x75\x14\xf7\xa0\xb5\xbc\x0c\x4a\x27\xf8\x12\x46\xb7\x17\x97\xd7\x93\x11\x0c\xa7\x8b\x9b\xd9\x08\x66\xf3\x9b\xc5\x70\xbe\xb8\x19\xd1\x8e\x7d\x0a\x91\xda\xa1\x89\xb5\x4f\xca\x10\xed\x6e\xaf\xdb\xeb\x76\xe2\xff\x1e\x0d\xed\xe7\x93\xc0\x83\x06\x91\xde\x56\x19\xb4\x4f\xcf\xba\xfe\xd7\x29\xc7\xb3\xf2\x86\x86\xee\x1e\x5c\xd5\x5c\x3e\xd6\xd9\x84\xd6\x58\x67\x73\x7a\x46\x57\x27\x0c\x3e\xda\xfe\xa9\x4a\x28\xa6\xfb\x06\x5b\x93\xff\xfa\x3b\x5c\x9d\xfe\x39\x5d\x9d\xfe\xf9\xfe\xa6\x7f\xde\xaf\x03\xdc\xd1\xf8\x43\x0a\x84\x04\xe4\xda\x1f\xfa\x0e\xb3\x3c\xf5\xad\x30\xe3\x5b\xdf\x0f\x85\xce\x77\x3f\x43\xf5\x47\x52\xe9\x92\x09\x7a\xc1\x12\xfe\xa6\xdf\xef\xd1\xd5\xa1\xff\x76\x83\xfe\x8e\x54\xee\xd8\xd7\x00\x00\x00\xff\xff\x1d\x79\x80\x65\x93\x09\x00\x00")

func type_course_graphql() ([]byte, error) {
	return bindata_read(
		_type_course_graphql,
		"type/course.graphql",
	)
}

var _type_users_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x92\x4f\x8f\xd3\x30\x10\xc5\xef\xf9\x14\xb3\xea\x65\x91\xf8\x04\xb9\xad\xb6\x5a\x29\x12\xa0\x45\xd0\x13\xe2\x60\x92\x67\xef\x20\xff\x89\xec\x89\x56\x15\xea\x77\x47\x76\x92\x12\xea\x16\xc4\x91\x9b\xf3\x32\x6f\x66\xde\xcf\x66\x2f\x88\x5a\xf5\xa0\x43\x42\xa4\x1f\x0d\xd1\x34\xf1\xd0\xd2\x27\x89\xec\xcd\x5d\x43\xd4\x47\x28\xc1\xf0\x20\xab\xd8\x10\xc1\x29\xb6\xdb\x22\xcd\x31\xc9\x07\xe5\xb0\x15\xad\xaa\x35\x81\xc5\xf8\x12\x7c\x55\xf8\x2e\x18\xf6\x5b\xf1\x7b\xf8\xf6\x99\xc5\x6e\x0a\x4f\x4d\xc3\x7e\x9c\x84\xde\x2b\xaf\x0c\x62\xb1\x94\x9d\xab\x7d\x46\x95\xd2\x6b\x88\xc3\x15\xf3\xc3\x30\x2c\xfe\xae\x7c\x67\x7f\x1f\xdc\xa8\xfc\xf1\x70\xe8\xf6\xab\x83\x76\xf4\x14\x22\xa9\xc1\xb1\x4f\xf4\xfa\x02\x3f\x93\xc8\xbf\xdc\xec\x4f\x14\x34\x0d\xac\x35\x22\xbc\x2c\x4d\x18\xe9\x5f\x78\x54\x9b\xd7\xb1\x6f\x40\xfb\x43\xc4\x3d\x2c\x04\x55\xca\xdf\x6f\xf6\xd4\x34\x72\x1c\xb1\xc2\x24\x76\xa3\x85\x83\x97\xf4\x3f\xbc\x85\xf3\x9d\xb5\xf4\x38\x1f\x0a\x93\x18\x34\x5b\x74\x4e\x19\x1c\xe2\x79\xab\xcb\xac\xcf\xca\x60\x9b\xf7\x59\x19\xf6\x39\xd8\xc7\x09\xf1\x38\xbf\xa8\xc1\x20\xb5\xf4\x65\x71\x7c\x2d\xc0\x0d\x3a\xaf\x43\x9b\xeb\xcb\x29\xf7\xdd\x51\xe9\x9c\x91\x1b\x25\xb8\x82\x71\x47\x2b\xc8\xfc\xbe\xee\xca\xf7\x05\xb4\x2c\x5d\xc1\x96\xe5\x1a\x5c\x56\xaf\xa0\x5b\x8b\x17\x78\x7b\x25\x28\x5a\xcd\x2e\xab\x7d\x98\x62\x42\xba\x0f\x5a\x27\x48\x4b\x9d\x97\xb7\x64\xd9\xf1\x7a\xd6\x6c\x05\xb1\x3d\x07\x7b\x2c\x86\xa7\xa2\xbe\xc9\xd0\x8b\x7f\xed\xe5\x65\x11\xee\xff\xe2\xeb\xbc\xcc\x1e\x44\x61\xcd\xbd\x92\xdb\x4b\xe4\x31\x9b\xb2\xcd\xac\xad\xb9\x1a\xf8\xeb\xe7\xc5\xd4\x53\xf3\x33\x00\x00\xff\xff\xdd\xd6\xb4\x69\xef\x04\x00\x00")

func type_users_graphql() ([]byte, error) {
	return bindata_read(
		_type_users_graphql,
		"type/users.graphql",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"mutation.graphql": mutation_graphql,
	"query.graphql": query_graphql,
	"schema.graphql": schema_graphql,
	"type/admin.graphql": type_admin_graphql,
	"type/auth.graphql": type_auth_graphql,
	"type/company.graphql": type_company_graphql,
	"type/course.graphql": type_course_graphql,
	"type/users.graphql": type_users_graphql,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"mutation.graphql": &_bintree_t{mutation_graphql, map[string]*_bintree_t{
	}},
	"query.graphql": &_bintree_t{query_graphql, map[string]*_bintree_t{
	}},
	"schema.graphql": &_bintree_t{schema_graphql, map[string]*_bintree_t{
	}},
	"type": &_bintree_t{nil, map[string]*_bintree_t{
		"admin.graphql": &_bintree_t{type_admin_graphql, map[string]*_bintree_t{
		}},
		"auth.graphql": &_bintree_t{type_auth_graphql, map[string]*_bintree_t{
		}},
		"company.graphql": &_bintree_t{type_company_graphql, map[string]*_bintree_t{
		}},
		"course.graphql": &_bintree_t{type_course_graphql, map[string]*_bintree_t{
		}},
		"users.graphql": &_bintree_t{type_users_graphql, map[string]*_bintree_t{
		}},
	}},
}}
