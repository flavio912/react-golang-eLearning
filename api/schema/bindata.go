package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _mutation_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x52\xcd\xce\x9b\x30\x10\xbc\xfb\x29\x16\xf5\xd2\x5e\xbe\x07\xe0\x96\x26\xaa\x14\x29\x91\xaa\xfc\x3c\x80\x6b\x6f\xc0\xaa\x59\xbb\xb0\xae\x8a\xaa\xbc\xfb\x27\xcc\x9f\x81\xe4\xb8\xb3\x33\xc3\xec\xe0\x2f\x50\x05\x96\x6c\x1c\x35\xa0\x24\x41\xe5\xb4\x79\xb4\xc0\x25\x82\xfe\xf5\x01\xf8\x0f\x55\x60\xd4\xd0\xe0\x9f\x80\xc4\x46\x5a\xdb\x7e\x08\x61\xc8\x07\x86\xbb\xb7\x4e\xea\x1f\xc6\xe2\x19\x59\xc2\x7f\x01\xf0\x30\x16\x6f\xad\xc7\x1c\xae\x5c\x1b\x2a\x32\x01\xa0\x1c\x31\x12\x9f\x90\x0a\x2e\x73\x38\x12\x67\xe2\x29\x04\xb7\x1e\x13\x8b\x0b\x36\x3e\x5a\x84\xda\xa6\xea\x26\x28\x85\x4d\x73\x73\xbf\x91\x66\xfc\xb9\xcd\x70\xed\x89\xd1\xe3\xad\x28\x7e\xf4\x3c\x9c\x1c\xa9\x52\x57\x86\x4e\xae\x30\xf4\x35\x3a\xe6\xb0\x9b\x90\xec\x5b\x0e\xbb\xc0\x65\xf4\x11\x00\x95\x24\x59\x60\xbd\x60\x9f\x13\x6c\xcd\x97\x5a\x0f\xeb\xd9\x7b\x44\x8e\x1d\xd0\x09\x86\x79\xb6\xff\x59\xbb\xae\xc6\xfe\xb2\x4b\x57\x7c\xc3\xa3\x7e\x59\x79\x27\x5f\x36\xf8\xc6\x65\xe8\x66\xeb\x32\x2c\x96\x39\x34\x5a\x64\x5c\x25\x3f\xa4\xe0\x14\xfe\xbb\x73\x16\x25\x65\xfd\xb1\xb1\xb9\xe4\xd4\x38\x4f\xdc\x38\x75\x3f\xd8\x6b\xc9\xb8\xe0\xde\x67\x68\x43\xef\xd3\x2c\xe8\x87\x19\x7a\x95\x44\xd5\x28\x19\xf7\xae\xf2\x92\xda\x51\xb3\x4f\xc1\x49\x35\xcc\x6b\xd1\xd8\xba\x00\xe8\xde\x6f\xc4\x5e\x5a\x44\xc2\xd0\xf8\xf6\xef\xc6\x6d\x8d\x4a\x7a\x56\xa5\x4c\x5f\xf5\xaa\x3a\xef\x6b\xf7\x77\x4a\x1c\x82\xd1\x13\x39\x09\xf9\x14\x9f\x01\x00\x00\xff\xff\x46\x53\x8e\x5f\xaf\x03\x00\x00")

func mutation_graphql() ([]byte, error) {
	return bindata_read(
		_mutation_graphql,
		"mutation.graphql",
	)
}

var _query_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x52\xcb\x6e\x14\x31\x10\xbc\xfb\x2b\x6a\x95\xcb\x22\x45\x7c\xc0\xdc\x08\x08\x69\x0f\x40\x10\xc9\x07\x78\x77\xda\xb3\x8d\xec\xf6\x60\xf7\x40\x56\x28\xff\x8e\xec\x99\x9d\x07\xd9\x9b\xed\xae\xea\xaa\xea\xf6\x1d\x7e\x0d\x94\x98\x32\xf2\x39\x0e\xbe\x85\x44\x45\x88\x2d\xbb\x0b\xf4\x4c\x68\x8f\xef\x41\x2f\x74\x1a\x94\x5a\xb0\xa0\xb7\x29\x59\xef\xc9\x1b\xbd\xf4\x84\x47\xdb\xd1\x41\x5c\xc4\x5f\x03\x68\x54\xeb\x1b\x1c\x44\x77\xb8\xc3\xd7\x21\x1c\x29\x21\x3a\xf4\xb6\xa3\x0c\xeb\x94\x12\xf4\xcc\x19\x51\xc8\x00\xd1\xb9\x4c\x3a\xe3\x9f\xce\x34\x3d\x15\x4e\xc5\x15\x22\x5c\x8a\xa1\x5a\xc9\x6a\x93\x1a\xc0\x73\xe0\x2d\x2d\xd8\x97\x62\xff\x8f\xa0\xa7\x54\x59\x06\xe8\xf8\x37\xc9\x0d\x37\xac\x14\xf2\x58\x35\xaf\xc6\xb0\xf4\x83\xd6\x1c\x35\xc3\xca\xd4\x46\x6a\x81\x7e\xb1\x62\x3b\x4a\x9f\xd9\x97\x3c\x85\x23\x36\x50\x83\x1f\x9a\x58\x3a\x03\x50\xb0\xec\x57\xf7\x9f\xf1\xf8\xc4\xea\xd7\x90\x61\xe0\x76\x75\x55\xf2\xd4\x9f\xa3\x2c\x90\x59\xed\x63\x0c\xbd\x95\xcb\x4a\xed\x3f\xee\x46\xbc\xd2\x94\x92\xb3\xa7\xba\x1b\x16\xab\xd4\x7e\x1f\x28\x5d\x2a\xb7\x9f\xd6\xd5\xcc\x8b\x5b\x94\xbe\xa5\x96\xd2\xc3\x88\xb3\xf9\x44\xd2\xb2\x74\x0d\x1e\x62\xf4\x64\xc5\x00\x8e\xc9\xcf\xca\xbb\x42\xac\x5f\x60\xe9\xce\xb5\xf3\xb5\x0e\xd8\x36\xb0\xec\x47\xbf\xcf\xcf\x87\x4f\xbb\x77\x0d\x3e\x94\xb7\x6b\x2d\xef\x8b\xa1\xd1\xcc\xb5\x56\xce\x85\x1c\xc6\x31\xef\xd7\x71\x4b\x83\x69\xfc\x0b\x62\xdd\xe4\x1e\xae\x0e\xaa\xd9\x6e\xe9\x1e\x71\x0c\xd7\x5c\x53\x2e\x8d\x1e\xc7\xdf\x72\x1a\xe7\xfc\x46\x6e\x9a\xff\x8c\x60\xba\xad\xb7\xd9\xd3\x4d\xbd\x09\x51\xf5\x5e\xcd\xbf\x00\x00\x00\xff\xff\xaf\x14\x1d\x32\x78\x03\x00\x00")

func query_graphql() ([]byte, error) {
	return bindata_read(
		_query_graphql,
		"query.graphql",
	)
}

var _schema_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x4e\x4e\xcc\x49\x2c\x52\x08\x0d\xf5\x74\xe1\xe2\x2a\x4e\xce\x48\xcd\x4d\x54\xa8\xe6\x52\x50\x28\x2c\x4d\x2d\xaa\xb4\x52\x08\x04\x51\x5c\x0a\x0a\xb9\xa5\x25\x89\x25\x99\xf9\x79\x56\x0a\xbe\x50\x16\x57\x2d\x17\x20\x00\x00\xff\xff\x7d\xb7\x88\x41\x3c\x00\x00\x00")

func schema_graphql() ([]byte, error) {
	return bindata_read(
		_schema_graphql,
		"schema.graphql",
	)
}

var _type_admin_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x8f\xcd\xaa\xc3\x20\x10\x85\xf7\x3e\xc5\xdc\xd7\xc8\xee\xc2\x85\x4b\xa0\x94\x94\xd2\x55\xe9\x62\xc0\x89\x0c\xa8\x11\x1d\x29\xa1\xe4\xdd\x4b\xa4\x34\x21\x09\xfd\xd9\xe9\xe1\xf3\x7c\x1e\xe9\x03\xc1\xaf\x76\xec\xe1\xa6\x00\x72\x66\x5d\xc1\x51\x22\x7b\xf3\xa3\x00\xc8\x21\xdb\x79\xd0\x72\x4c\xb2\x47\x47\xf3\xd0\xe2\x32\x1b\x94\x9a\x9a\x1b\x34\x04\xec\x82\x25\x47\x5e\x12\x34\x68\xd8\xa3\x90\x3e\x64\x8a\x7d\xf1\x92\x36\x94\x2a\x38\x17\xfe\xa2\x00\x02\x1a\xaa\x7d\xdb\x55\x23\x5d\x4e\x63\x27\xfb\x90\x05\xfe\x49\x0a\x57\x97\xdb\xfa\xdb\x4f\xb0\x50\xbb\xce\x3c\xc6\xad\xc6\x04\x4c\xe9\xda\xc5\xed\xa7\x7a\xe1\xf8\x70\xf9\x77\x9a\x53\xd0\x28\xf4\x72\xcd\x86\x79\x43\xbc\xf4\x4e\x8a\x3f\xb2\xf4\x46\x31\xa8\x7b\x00\x00\x00\xff\xff\xed\xbe\x06\x0d\x07\x02\x00\x00")

func type_admin_graphql() ([]byte, error) {
	return bindata_read(
		_type_admin_graphql,
		"type/admin.graphql",
	)
}

var _type_auth_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\xa9\x2c\x48\x55\x70\x2c\x2d\xc9\x08\xc9\xcf\x4e\xcd\x53\xa8\xe6\x52\x50\x28\x01\xb1\xac\x14\x82\x4b\x8a\x32\xf3\xd2\x15\xb9\x6a\xb9\x00\x01\x00\x00\xff\xff\xa3\x33\x16\xdc\x24\x00\x00\x00")

func type_auth_graphql() ([]byte, error) {
	return bindata_read(
		_type_auth_graphql,
		"type/auth.graphql",
	)
}

var _type_company_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x50\xbb\x6a\x03\x31\x10\xec\xf5\x15\xe3\x2e\x01\x37\x49\xa9\xce\x3e\x08\x18\xf2\x24\x65\x48\xb1\x44\x6b\x21\xb8\x5b\x09\x49\x17\x38\x4c\xfe\x3d\x48\x3a\x07\x25\xe9\xdd\x8d\x46\xb3\xbb\x33\x93\x97\xc0\x18\xfc\x14\x48\x16\x9c\x14\x40\x21\x44\xff\xc9\x46\x63\xef\xfd\xc8\x24\x0a\x98\x67\x67\x34\x5e\x73\x74\x62\x37\x0a\xf8\x88\x4c\x99\xcd\x2e\x9f\x49\x05\x08\x4d\xdc\x6b\x26\x12\xb2\x1c\xd3\x55\x20\xcb\x1a\xcf\x64\x79\x8b\xa3\x1b\x33\x47\x8d\x87\xf6\x79\x57\x9f\x5b\xf8\x68\x38\xee\x17\x8d\xa7\x06\xae\x7f\x14\x65\xac\x6c\x23\x63\x22\xa7\xa4\xb1\x6b\x60\xa3\xbe\x94\xaa\xde\x57\xa2\x79\x6f\xf8\xde\x09\xdf\xf4\x5e\x3a\xfe\xf6\x57\x0e\x3f\x4b\x5e\x7a\x26\xf8\x94\x07\x6f\xf8\x9f\x2a\x76\xb2\xf3\xe9\xb5\xb6\xe2\x11\x6e\x0a\x23\x4f\x2c\x39\x95\xa8\x4e\x4a\x3f\x2f\x33\xc7\x56\x2a\x1b\xcb\x49\xe3\x6d\x9d\x78\x2f\x97\xc8\xf2\x41\x8e\xbe\x55\x53\x50\xd9\xeb\x24\xcc\x19\x43\xed\x77\x15\x1f\x2a\x75\xaa\x46\x2a\xf1\xf8\xa7\xe9\x8b\xa5\xfe\x0e\x00\x00\xff\xff\x87\xf2\x57\xad\x2c\x02\x00\x00")

func type_company_graphql() ([]byte, error) {
	return bindata_read(
		_type_company_graphql,
		"type/company.graphql",
	)
}

var _type_users_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x92\x4f\x8f\xd3\x30\x10\xc5\xef\xf9\x14\xb3\xea\x65\x91\xf8\x04\xb9\xad\xb6\x5a\x29\x12\xa0\x45\xd0\x13\xe2\x60\x92\x67\xef\x20\xff\x89\xec\x89\x56\x15\xea\x77\x47\x76\x92\x12\xea\x16\xc4\x91\x9b\xf3\x32\x6f\x66\xde\xcf\x66\x2f\x88\x5a\xf5\xa0\x43\x42\xa4\x1f\x0d\xd1\x34\xf1\xd0\xd2\x27\x89\xec\xcd\x5d\x43\xd4\x47\x28\xc1\xf0\x20\xab\xd8\x10\xc1\x29\xb6\xdb\x22\xcd\x31\xc9\x07\xe5\xb0\x15\xad\xaa\x35\x81\xc5\xf8\x12\x7c\x55\xf8\x2e\x18\xf6\x5b\xf1\x7b\xf8\xf6\x99\xc5\x6e\x0a\x4f\x4d\xc3\x7e\x9c\x84\xde\x2b\xaf\x0c\x62\xb1\x94\x9d\xab\x7d\x46\x95\xd2\x6b\x88\xc3\x15\xf3\xc3\x30\x2c\xfe\xae\x7c\x67\x7f\x1f\xdc\xa8\xfc\xf1\x70\xe8\xf6\xab\x83\x76\xf4\x14\x22\xa9\xc1\xb1\x4f\xf4\xfa\x02\x3f\x93\xc8\xbf\xdc\xec\x4f\x14\x34\x0d\xac\x35\x22\xbc\x2c\x4d\x18\xe9\x5f\x78\x54\x9b\xd7\xb1\x6f\x40\xfb\x43\xc4\x3d\x2c\x04\x55\xca\xdf\x6f\xf6\xd4\x34\x72\x1c\xb1\xc2\x24\x76\xa3\x85\x83\x97\xf4\x3f\xbc\x85\xf3\x9d\xb5\xf4\x38\x1f\x0a\x93\x18\x34\x5b\x74\x4e\x19\x1c\xe2\x79\xab\xcb\xac\xcf\xca\x60\x9b\xf7\x59\x19\xf6\x39\xd8\xc7\x09\xf1\x38\xbf\xa8\xc1\x20\xb5\xf4\x65\x71\x7c\x2d\xc0\x0d\x3a\xaf\x43\x9b\xeb\xcb\x29\xf7\xdd\x51\xe9\x9c\x91\x1b\x25\xb8\x82\x71\x47\x2b\xc8\xfc\xbe\xee\xca\xf7\x05\xb4\x2c\x5d\xc1\x96\xe5\x1a\x5c\x56\xaf\xa0\x5b\x8b\x17\x78\x7b\x25\x28\x5a\xcd\x2e\xab\x7d\x98\x62\x42\xba\x0f\x5a\x27\x48\x4b\x9d\x97\xb7\x64\xd9\xf1\x7a\xd6\x6c\x05\xb1\x3d\x07\x7b\x2c\x86\xa7\xa2\xbe\xc9\xd0\x8b\x7f\xed\xe5\x65\x11\xee\xff\xe2\xeb\xbc\xcc\x1e\x44\x61\xcd\xbd\x92\xdb\x4b\xe4\x31\x9b\xb2\xcd\xac\xad\xb9\x1a\xf8\xeb\xe7\xc5\xd4\x53\xf3\x33\x00\x00\xff\xff\xdd\xd6\xb4\x69\xef\x04\x00\x00")

func type_users_graphql() ([]byte, error) {
	return bindata_read(
		_type_users_graphql,
		"type/users.graphql",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"mutation.graphql": mutation_graphql,
	"query.graphql": query_graphql,
	"schema.graphql": schema_graphql,
	"type/admin.graphql": type_admin_graphql,
	"type/auth.graphql": type_auth_graphql,
	"type/company.graphql": type_company_graphql,
	"type/users.graphql": type_users_graphql,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"mutation.graphql": &_bintree_t{mutation_graphql, map[string]*_bintree_t{
	}},
	"query.graphql": &_bintree_t{query_graphql, map[string]*_bintree_t{
	}},
	"schema.graphql": &_bintree_t{schema_graphql, map[string]*_bintree_t{
	}},
	"type": &_bintree_t{nil, map[string]*_bintree_t{
		"admin.graphql": &_bintree_t{type_admin_graphql, map[string]*_bintree_t{
		}},
		"auth.graphql": &_bintree_t{type_auth_graphql, map[string]*_bintree_t{
		}},
		"company.graphql": &_bintree_t{type_company_graphql, map[string]*_bintree_t{
		}},
		"users.graphql": &_bintree_t{type_users_graphql, map[string]*_bintree_t{
		}},
	}},
}}
