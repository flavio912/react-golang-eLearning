package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _mutation_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x53\xd1\x8e\xdb\x20\x10\x7c\xe7\x2b\x36\xea\x4b\xfb\x72\x1f\xe0\xb7\x6b\xa2\x4a\x91\x2e\x6a\x75\x39\x7f\x00\x35\x7b\x09\x2a\x5e\x28\x2c\xa7\x5a\x55\xfe\xfd\x64\x42\x08\xc4\xc9\x23\xc3\xcc\x78\x76\xd6\x7c\x81\x31\xb2\x64\x6d\x29\xc0\x20\x09\x46\xab\xf4\xfb\x04\x7c\x44\x50\xbf\x9f\x00\xff\xe1\x10\x19\x15\x04\xfc\x1b\x91\x58\x4b\x63\xa6\x27\x21\x34\xb9\xc8\xd0\x3b\x63\xa5\xfa\xa1\x0d\xee\x90\x25\xfc\x17\x00\xef\xda\xe0\xdb\xe4\xb0\x83\x3d\x7b\x4d\x87\x95\x00\x18\x2c\x31\x12\xbf\x20\x1d\xf8\xd8\xc1\x96\x78\x25\x4e\x42\xf0\xe4\xb0\xb2\x78\xc5\xe0\x92\x45\xf4\xa6\x56\x87\x38\x0c\x18\xc2\x9b\xfd\x83\x74\xc5\x4f\xcb\x0c\xfb\x33\x31\x79\x3c\x14\xa5\x8f\xee\xf2\xc8\x89\x2a\xd5\xa8\xe9\xc5\x1e\x34\x7d\x4d\x8e\x1d\x3c\x17\x64\xf5\xad\x83\xe7\xc8\xc7\xe4\x23\x00\x46\x49\xf2\x80\xbe\x61\xef\x2a\xec\x96\x3f\x78\x94\x8c\x99\x71\x11\xac\x6b\x70\x3b\x63\xb3\x2c\x9f\xe7\xf9\x9d\x5a\x8a\xfa\x1a\xbc\x23\xca\xc9\x7e\x79\x3b\x6f\xe0\x5c\xca\xeb\xbc\xb3\xc0\x57\x8b\x7a\x5b\xb3\xbc\x2d\xff\x81\x4b\xae\x75\xe9\x92\x2f\xda\x1c\x0a\x0d\x2e\xc2\x6f\x6a\xb0\x84\xff\x6e\xad\x41\x49\xab\xd2\x53\xea\xbd\x6d\x29\x41\x45\x91\x4e\xa5\xa1\x86\xde\x5f\xa1\x05\xfd\x9c\xa9\xa1\x6f\xae\xd0\xe3\x3c\x6b\x3b\x3a\x49\x53\x9b\x28\x83\x45\x95\xcf\xb7\xa2\x4b\xf7\x02\x60\x7e\x00\x09\xbb\x6b\x91\x08\xb9\xf7\xbb\xff\x46\x22\x78\x1c\xa4\xe3\xe1\x28\xeb\x97\xd1\x66\x96\xce\x79\xfb\x51\x42\xc7\xa8\x55\x07\x7d\xbf\xdd\xb4\x29\x83\xfc\xc0\x9f\x64\x34\xe1\xda\x46\x1f\xf0\x32\xdd\xfe\x06\x2f\x03\xd6\x60\xd6\xaf\x8d\x0c\xc1\x5b\x3b\x2e\x2d\x6e\xae\x8a\xcb\x39\xb5\x38\x89\xcf\x00\x00\x00\xff\xff\x31\xfd\x79\x8b\x71\x04\x00\x00")

func mutation_graphql() ([]byte, error) {
	return bindata_read(
		_mutation_graphql,
		"mutation.graphql",
	)
}

var _query_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x52\x41\x6e\xdb\x30\x10\xbc\xf3\x15\x63\xe4\x92\x00\x41\x1f\xa0\x5b\xd3\xa2\x80\x0f\x6d\x53\x34\x79\x00\x6d\x2e\xa5\x2d\xc8\xa5\x4a\xad\xda\x18\x85\xff\x5e\x90\xb2\x2c\x29\xf0\xcd\xe6\xce\xec\xcc\xce\xe8\x0e\xbf\x47\xca\x4c\x03\x86\x2e\x8d\xc1\x41\x92\x22\x26\xc7\xfe\x04\xed\x08\xee\xf0\x01\xf4\x46\xc7\x51\xc9\x81\x05\xbd\xcd\xd9\x86\x40\xc1\xe8\xa9\x27\x3c\xdb\x96\xf6\xe2\x13\xfe\x19\x40\x93\xda\xd0\x60\x2f\xba\xc3\x1d\xbe\x8d\xf1\x40\x19\xc9\xa3\xb7\x2d\x0d\xb0\x5e\x29\x43\x3b\x1e\x90\x84\x0c\x90\xbc\x1f\x48\xaf\xf8\x97\x8e\x2e\x4f\x85\x53\x71\x85\x08\x9f\x53\xac\x56\x06\xb5\x59\x0d\x10\x38\xf2\x96\x16\xed\x5b\xb1\xff\x57\xd0\x53\xae\x2c\x03\xb4\xfc\x87\xe4\x86\x1b\x56\x8a\xc3\x34\x35\x67\x63\x58\xfa\x51\xeb\x1d\xf5\x86\x95\xa9\x8d\xd4\x02\xfd\x6a\xc5\xb6\x94\xbf\x70\x28\xf7\x14\x8e\xd8\x48\x0d\x7e\x6a\x66\x69\x0d\x40\xd1\x72\x58\xfd\xff\x95\x0e\x2f\xac\x61\x0d\x19\x47\x76\x0d\x5e\x5f\xf7\x9f\x4b\x6c\x14\xa8\xef\x92\x2c\x80\xab\xd6\xa7\x14\x7b\x2b\xa7\x95\xd6\x86\xb9\x11\xae\x24\xa5\xec\xed\xb1\xf6\xc2\x62\x95\xdc\x8f\x91\xf2\xa9\x32\xfb\x4b\x55\xcd\xb5\xb4\x45\xe7\x7b\x76\x94\x9f\x26\x9c\x1d\x8e\x24\x8e\xa5\x6d\xf0\x94\x52\x20\x2b\x06\xf0\x4c\xc1\xcd\x52\xbb\x42\xac\xf5\x2f\xdb\xb9\x6e\x9e\xe7\x80\x75\x91\xe5\x7e\x71\xbb\x7b\x68\xf0\xb1\xbc\xcd\xb3\xe1\xbe\x18\x9a\xcc\xcc\xb3\xf2\xbb\x90\xe3\x14\xf1\x8a\xfe\xd0\xcc\xb9\x2f\xe3\xf5\x86\x47\xf8\x9a\x51\xb3\xad\xe7\x11\x69\xba\xac\x99\x4f\x5c\x16\x3d\x4f\x9f\xc9\x71\x8a\xf8\x9d\xd5\x4b\xf0\xd7\x39\xd3\x6d\xb5\x4d\x41\x37\xd5\x2e\x88\xaa\x76\x36\xff\x03\x00\x00\xff\xff\x63\xcd\x1f\x76\x6f\x03\x00\x00")

func query_graphql() ([]byte, error) {
	return bindata_read(
		_query_graphql,
		"query.graphql",
	)
}

var _schema_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x4e\x4e\xcc\x49\x2c\x52\x08\x0d\xf5\x74\xe1\xe2\x2a\x4e\xce\x48\xcd\x4d\x54\xa8\xe6\x52\x50\x28\x2c\x4d\x2d\xaa\xb4\x52\x08\x04\x51\x5c\x0a\x0a\xb9\xa5\x25\x89\x25\x99\xf9\x79\x56\x0a\xbe\x50\x16\x57\x2d\x17\x20\x00\x00\xff\xff\x7d\xb7\x88\x41\x3c\x00\x00\x00")

func schema_graphql() ([]byte, error) {
	return bindata_read(
		_schema_graphql,
		"schema.graphql",
	)
}

var _type_admin_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x90\xcd\x8a\x83\x30\x14\x85\xf7\x79\x8a\x3b\xaf\x91\xdd\x30\x6e\x84\x61\x70\x28\xae\x4a\x17\x17\x72\x0d\x17\x92\x18\xf2\x43\x11\xf1\xdd\x8b\xb1\x60\xd5\x52\xda\x5d\x38\x9c\x7c\xdf\x49\xd2\xe0\x09\xbe\x95\x65\x07\xa3\x00\xc8\x99\x95\x84\xb6\xad\xab\x2f\x01\x40\x16\xd9\x48\x38\xa5\xc0\x4e\xcf\x41\xc7\x21\xa6\x3f\xb4\xf4\x18\x1a\xdc\x67\x93\x10\x2b\xb7\x41\x4d\xc0\xd6\x1b\xb2\xe4\x52\x84\x06\x35\x3b\x4c\xa4\xfe\x33\x85\xa1\x58\x49\x69\x8a\x12\xce\xa5\x7f\x11\x00\x1e\x35\xd5\xae\xeb\xe5\xdc\x2e\xa7\x99\xc9\xce\xe7\xb4\x40\x7f\x7b\x7d\x5f\x7c\xd8\xe8\x31\xc6\x6b\x1f\xd4\x66\xce\x72\xf5\x27\x10\x26\x2a\x80\xba\x04\xe3\xfb\x6f\xfa\xcc\xd4\x7a\x75\x34\x6d\x3f\xf7\xe0\x7d\xa2\xdd\x5b\x57\x41\x45\x86\x5e\x0a\x26\x71\x0b\x00\x00\xff\xff\x68\xfa\x3e\xad\xdb\x01\x00\x00")

func type_admin_graphql() ([]byte, error) {
	return bindata_read(
		_type_admin_graphql,
		"type/admin.graphql",
	)
}

var _type_auth_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\xa9\x2c\x48\x55\x70\x2c\x2d\xc9\x08\xc9\xcf\x4e\xcd\x53\xa8\xe6\x52\x50\x28\x01\xb1\xac\x14\x82\x4b\x8a\x32\xf3\xd2\x15\xb9\x6a\xb9\x00\x01\x00\x00\xff\xff\xa3\x33\x16\xdc\x24\x00\x00\x00")

func type_auth_graphql() ([]byte, error) {
	return bindata_read(
		_type_auth_graphql,
		"type/auth.graphql",
	)
}

var _type_company_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x50\x3d\x6b\x03\x31\x0c\xdd\xfd\x2b\x5e\xb6\x16\xb2\xb4\xa3\xb7\xe4\x4a\xe1\xa0\x9f\x94\x4c\xa5\x83\x88\x15\x63\xb8\x93\x8d\xed\x2b\x1c\xa1\xff\xbd\xd8\xbe\x94\xa3\xdd\xbb\x3d\x3d\x3d\x49\x4f\x2f\xcf\x81\xd1\xf9\x31\x90\xcc\x38\x2b\x80\x42\x88\xfe\x93\x8d\xc6\xde\xfb\x81\x49\x14\x30\x4d\xce\x68\x1c\x0e\xfd\xdd\x46\x01\xc7\xc8\x94\xd9\xec\xb2\xc6\x5b\x8e\x4e\xac\x02\x84\x46\xbe\x94\x45\x33\x92\x90\xe5\x98\xae\x02\x59\xd6\x78\x21\xcb\x5b\x9c\xdc\x90\x39\x6a\x3c\xb6\xe6\x7d\x2d\xb7\xf0\xd1\x70\xdc\xcf\x1a\xcf\x0d\x5c\xff\x28\xca\x58\xd9\x46\xc6\x44\x4e\x49\x63\xd7\xc0\x46\x7d\x29\x55\x9d\x2f\x44\x73\xde\xf0\x83\x13\xbe\x59\x7b\x59\xf1\xb7\x6b\xfe\xe8\x27\xc9\xf3\x9a\x09\x3e\xe5\xce\x1b\xfe\xa3\x8a\x2b\xd9\xe5\xf4\x12\x5a\xf1\x08\x37\x86\x81\x47\x96\x9c\xca\xab\x4e\x4a\x3e\xaf\x13\xc7\x16\x29\x1b\xcb\x49\xe3\x7d\x99\xf8\x28\x97\xc8\x72\x2f\x27\xdf\xa2\x29\xa8\xec\x75\x12\xa6\x8c\xae\xe6\xbb\x88\xfb\x4a\x9d\xab\x91\x4a\x3c\xfd\x4a\xfa\xdf\xbe\xfe\x0e\x00\x00\xff\xff\x10\xb8\xf9\xd1\x2a\x02\x00\x00")

func type_company_graphql() ([]byte, error) {
	return bindata_read(
		_type_company_graphql,
		"type/company.graphql",
	)
}

var _type_course_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x54\x4d\x6b\x1b\x31\x10\xbd\xeb\x57\x3c\xdb\x97\x16\xe2\x43\x62\x3b\xb4\x7b\x4b\x5d\x17\x0c\x0d\x09\xb1\x0d\x05\xe3\x83\x2a\xcf\x3a\x22\xbb\xd2\xa2\x8f\x12\x13\xf2\xdf\x8b\xa4\xf5\xee\xda\x4e\x2f\xa1\x97\x16\x2d\x3b\xfa\x78\xef\xcd\x68\xa4\x11\x29\x5f\xe2\x46\x08\xb2\x76\xb9\xaf\x08\x2f\x0c\x30\x64\x9d\x91\xc2\xd1\x96\x01\xba\x22\xc5\x5e\x19\x8b\xc0\x85\x33\x5e\x38\x6f\x68\x56\x50\x49\xca\x45\x78\xa9\xb7\xbe\x20\x06\x38\xb2\x8e\x01\x05\x59\xab\x5b\xce\x6d\x5c\xee\x12\xce\x70\x2e\x78\x9e\x6a\x6f\x2c\xcd\x55\xae\x23\x48\xf1\x92\xb2\xe0\x50\xaa\x5d\x83\xb9\x53\x85\x54\x94\x90\x11\xe5\xbd\xdc\x66\x58\xad\xe6\x5f\x7b\x0c\x90\x2a\xd7\x59\x47\xa8\xd7\x8a\x17\xdc\x5a\xa3\x75\xf9\x26\xf7\x0d\x6a\x60\x4a\x55\x79\x87\x05\xff\x45\x27\xf4\x79\x5c\x38\xd3\x38\x0a\x19\x10\xdc\xd1\x4e\x9b\x7d\x58\x6d\x30\xf4\x2c\xc8\x54\xae\x03\x93\xca\x19\xbd\xf5\xc2\x49\xad\x3a\xd3\x3f\xb9\x78\xda\x19\xed\xd5\x76\xfa\x48\xe2\x29\xc3\x17\xad\x0b\xe2\x8a\x01\xbc\x39\xae\xac\x73\x74\x0c\xa8\x8c\x14\x94\xe1\x5b\xa1\x79\x48\xb0\xd0\x85\x36\x1d\x49\xc7\x77\x36\xc3\x3a\x8d\x37\x0c\xb0\x15\x09\x99\x4b\xb1\x24\x53\xda\x23\xdf\x4a\x91\x99\x97\x7c\x47\x0b\x1f\x1d\x74\x55\xbc\xd3\xa6\xdd\x13\x06\xc9\xe8\x1c\xee\x91\xb0\x0c\xab\xf8\x20\x0e\x09\x83\x48\x09\xd7\xaa\xd8\x7f\x0c\x97\x85\x3f\xdf\x73\xe3\xa4\x90\x15\x57\xce\x66\x98\x2b\x77\x9c\xeb\xee\x19\xff\x0f\x89\xee\xbd\x3b\xd3\xf6\x50\x6d\x19\xd6\x75\x3e\x1c\x95\xbd\x0d\x06\xa1\x10\xf6\xc8\xb5\x09\x79\x95\x8a\xea\x2c\xdb\x36\x93\x2d\x3e\x95\x5c\xdc\xc3\x69\xf9\xf6\xce\x2b\xc8\x51\x88\x6f\x9d\x8a\x36\xb9\xeb\xb5\xaa\xed\x74\x47\xf5\xa8\xc0\x4f\x25\x5f\x19\x1b\x60\x8d\xd9\x8f\x9b\xdb\xfb\xef\x33\x4c\xef\x56\x0f\x8b\x19\x16\xcb\x87\xd5\x74\xb9\x7a\x98\xb1\x01\x80\x97\xa4\xd3\x4f\x0f\x49\xff\xa2\x16\xe8\x8f\xc6\xa3\xf1\x68\xd8\xfd\x8f\xa3\xe9\xbf\x5e\x24\x1e\x4e\x88\x71\xf6\xe0\xbf\x7f\x79\x35\x0a\xdf\xb0\xb6\x57\x75\x27\x9a\x51\x03\x3e\xec\xb8\x1e\xb6\xd1\xa4\xe7\xa9\x8d\xe6\xf2\x2a\xb6\x61\x32\x41\xad\x19\x1d\x02\xea\xd2\xc3\x23\xd7\x92\x3f\x7d\x4e\x6d\x38\xb9\x8e\x6d\x38\xb9\x6e\x3a\x93\xeb\x49\x2b\xb0\x89\xf6\xaf\x6c\x10\x03\xc8\x1c\xd2\xc2\x51\x59\x15\xdc\x11\x4a\xfe\x44\xe0\x10\xba\xda\xff\x0b\xbb\xff\x43\x28\xa3\x78\x09\xc6\xe9\x4a\x84\xce\x64\x32\x8e\x6d\x18\xff\xfd\x13\xfa\x3b\x42\xd9\xb0\xdf\x01\x00\x00\xff\xff\x70\xfa\x76\x15\x17\x07\x00\x00")

func type_course_graphql() ([]byte, error) {
	return bindata_read(
		_type_course_graphql,
		"type/course.graphql",
	)
}

var _type_users_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x52\xc1\xae\xd3\x30\x10\xbc\xe7\x2b\x16\xf5\xf2\x90\xf8\x82\xdc\x50\xab\x27\x45\x02\xf4\x10\xe4\x84\x38\x98\x64\xed\xb7\xc8\x5e\x47\xf6\x46\x55\x85\xfa\xef\xc8\x4e\xd2\xa6\x8d\x0b\xe2\xc6\x6d\x33\xd9\xd9\xdd\x99\x31\xb1\x60\xd0\xaa\x43\x68\x23\x06\xf8\x55\x01\x8c\x23\xf5\x35\xb4\x6d\x73\x78\x53\x01\x74\x01\x95\x60\xff\x5e\x6a\xf8\x22\x81\xd8\x54\x00\xe8\x14\xd9\xe5\x3b\x35\x69\x0a\x51\x3e\x29\x87\x6b\xd0\xaa\x2d\x26\x68\x71\x78\xf5\xbc\x69\xfc\xe0\x0d\xf1\x1a\xfc\xe9\x7f\x7c\x25\xb1\xab\xc6\x73\x55\x11\x0f\xa3\xc0\x47\xc5\xca\x60\xc8\x94\x7c\xf1\xe6\x9e\x41\xc5\x78\xf4\xa1\x2f\x90\xf7\x59\xcf\x3c\xa2\xc9\x50\x1a\xd1\x79\x37\x28\x3e\x25\xd5\x93\x76\xd8\xc1\xb3\x0f\xa0\x7a\x47\x1c\xe1\xf8\x8a\x3c\x59\x41\x6c\xc0\x4d\xec\x08\x5e\x43\x4f\x5a\x63\x40\x96\x79\x04\x61\xfc\x17\x43\x36\xa7\x6f\x75\x3f\x70\xed\x0f\x1a\x0f\x68\xb1\xa0\x71\x1d\xec\xb9\xaa\xe4\x34\xe0\xe2\x25\x90\x1b\x2c\x3a\x64\x89\xff\xff\x43\xb8\xa4\x55\xc3\x7e\x2a\xb2\x1f\xc1\x6b\xb2\xd8\x38\x65\xb0\x0d\x97\xab\xae\xae\xb4\x43\x5f\x4a\xfe\x56\xe5\x8d\xa2\x92\xa0\x82\x9e\x92\x9c\xc2\xe1\xf7\x9e\xbf\x28\x83\x6b\xdf\x5f\x94\x21\x4e\x16\x7f\x1e\x31\x9c\xa6\x87\xdd\x1b\x8c\x35\x7c\x9b\x19\xdf\x73\xec\x06\x1b\xd6\xbe\x4e\xfd\xb9\x4a\x73\x77\x90\x27\xa7\xe0\x8d\x12\x2c\xc4\xb9\x83\x5b\xa9\xe9\xfb\x2e\xbe\x04\x15\x02\x4c\xf0\x36\xc2\x84\x16\x42\x5c\x9a\xe7\x18\x0f\x4a\x30\x63\xdb\x14\x13\xda\xf9\x31\x44\x8c\x4f\x5e\xeb\x88\x52\x43\xc3\xf2\x0e\x2c\x39\x5a\x6a\x4d\x56\x30\xd4\x17\x61\xfb\x4c\x78\xce\xe8\xdb\x14\x7f\xe6\x2f\xb3\x58\x66\xe0\xe9\x2f\xbc\x86\x65\xe2\x60\x10\xd2\xd4\x29\x79\x7c\x44\x5a\xb3\x6a\x5b\xed\x5a\x93\x37\x0b\xaf\x3f\xef\xb6\x9e\xab\xdf\x01\x00\x00\xff\xff\x93\xe1\xac\xe7\x74\x05\x00\x00")

func type_users_graphql() ([]byte, error) {
	return bindata_read(
		_type_users_graphql,
		"type/users.graphql",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"mutation.graphql": mutation_graphql,
	"query.graphql": query_graphql,
	"schema.graphql": schema_graphql,
	"type/admin.graphql": type_admin_graphql,
	"type/auth.graphql": type_auth_graphql,
	"type/company.graphql": type_company_graphql,
	"type/course.graphql": type_course_graphql,
	"type/users.graphql": type_users_graphql,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"mutation.graphql": &_bintree_t{mutation_graphql, map[string]*_bintree_t{
	}},
	"query.graphql": &_bintree_t{query_graphql, map[string]*_bintree_t{
	}},
	"schema.graphql": &_bintree_t{schema_graphql, map[string]*_bintree_t{
	}},
	"type": &_bintree_t{nil, map[string]*_bintree_t{
		"admin.graphql": &_bintree_t{type_admin_graphql, map[string]*_bintree_t{
		}},
		"auth.graphql": &_bintree_t{type_auth_graphql, map[string]*_bintree_t{
		}},
		"company.graphql": &_bintree_t{type_company_graphql, map[string]*_bintree_t{
		}},
		"course.graphql": &_bintree_t{type_course_graphql, map[string]*_bintree_t{
		}},
		"users.graphql": &_bintree_t{type_users_graphql, map[string]*_bintree_t{
		}},
	}},
}}
