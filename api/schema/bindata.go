package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _mutation_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x53\xd1\x8e\xdb\x20\x10\x7c\xe7\x2b\x36\xea\x4b\xfb\x72\x1f\xe0\xb7\x6b\xa2\x4a\x91\x2e\x6a\x75\xb1\x3f\x60\x6b\xef\x39\xa8\x18\xa8\x59\xa2\x5a\x55\xfe\xfd\x64\x42\x30\xc4\xc9\x23\xc3\xcc\x78\x76\xd6\x7c\x81\xc1\x33\xb2\x34\xda\x41\x8b\x1a\x06\xd3\xc9\x8f\x09\xf8\x44\xd0\xfd\x7e\x01\xfa\x47\xad\x67\xea\xc0\xd1\x5f\x4f\x9a\x25\x2a\x35\xbd\x08\x21\xb5\xf5\x0c\x8d\x55\x06\xbb\x1f\x52\xd1\x81\x18\xe1\xbf\x00\xf8\x90\x8a\xea\xc9\x52\x05\x47\x1e\xa5\xee\x37\x02\xa0\x35\x9a\x49\xf3\x1b\xe9\x9e\x4f\x15\xec\x35\x6f\xc4\x45\x08\x9e\x2c\x65\x16\xef\xe4\x6c\xb0\xf0\xa3\xca\xd5\xce\xb7\x2d\x39\x57\x9b\x3f\xa4\x17\xfc\xb2\xce\x70\xbc\x12\x83\xc7\x53\x51\xf8\xe8\x21\x8e\x1c\xa8\xd8\x0d\x52\xbf\x99\x5e\xea\xaf\xc1\xb1\x82\xd7\x84\x6c\xbe\x55\xf0\xea\xf9\x14\x7c\x04\xc0\x80\x1a\x7b\x1a\x0b\xf6\x21\xc3\xee\xf9\xed\x48\xc8\x14\x19\x37\xc1\x36\x07\xf7\x33\x36\xcb\xe2\x79\x9e\xdf\x76\x6b\x51\x93\x83\x0f\x44\x31\xd9\xaf\xd1\xcc\x1b\xb8\x96\xf2\x3e\xef\xcc\xf1\x62\x91\x6f\x6b\x96\x97\xe5\x3f\x71\x89\xb5\xae\x5d\xe2\x45\x99\xa3\x23\x45\xab\xf0\xbb\x1c\x4c\xe1\xbf\x1b\xa3\x08\xf5\x26\xf5\x14\x7a\x2f\x5b\x0a\x50\x52\x84\x53\x6a\xa8\xa0\x37\x0b\xb4\xa2\x5f\x33\x15\xf4\xdd\x02\x3d\xcf\xb3\x35\x83\x45\x3d\x95\x89\x22\x98\x54\xf1\x7c\x2f\xba\x75\x2f\x00\xe6\x07\x10\xb0\x87\x16\x81\x10\x7b\x7f\xf8\x6f\x04\xc2\x48\x2d\x5a\x6e\x4f\x98\xbf\x8c\x32\x33\x5a\x3b\x9a\x73\x0a\xed\xbd\xec\x2a\x68\x9a\xfd\xae\x4c\xe9\xf0\x4c\x3f\xb5\x92\x9a\xb6\xc6\x8f\x8e\x6e\xd3\x1d\xef\xf0\x34\x60\x0e\x46\xfd\x56\xa1\x73\xa3\x31\xc3\xda\xe2\xee\x6a\xa9\xa9\xc4\x53\x5d\x35\xf6\x65\xbf\x35\xf6\x49\x54\x63\x2f\x2e\xe2\x33\x00\x00\xff\xff\x68\x99\x55\x17\xa3\x04\x00\x00")

func mutation_graphql() ([]byte, error) {
	return bindata_read(
		_mutation_graphql,
		"mutation.graphql",
	)
}

var _query_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x52\xc1\x6e\xdb\x3a\x10\xbc\xf3\x2b\xc6\xc8\x25\x0f\x08\xde\x07\xe8\xd6\xb4\x28\xe0\x43\xdb\x14\x4d\x3e\x80\x36\x97\xd2\x16\xe4\x52\xa5\x56\x6d\x8c\x22\xff\x5e\x90\x92\x2c\x29\xf0\xcd\xe6\xce\xec\xcc\xce\xe8\x0e\xbf\x46\xca\x4c\x03\x86\x2e\x8d\xc1\x41\x92\x22\x26\xc7\xfe\x02\xed\x08\xee\xf4\x3f\xe8\x95\xce\xa3\x92\x03\x0b\x7a\x9b\xb3\x0d\x81\x82\xd1\x4b\x4f\x78\xb2\x2d\x1d\xc5\x27\xfc\x35\x80\x26\xb5\xa1\xc1\x51\xf4\x80\x3b\x7c\x1d\xe3\x89\x32\x92\x47\x6f\x5b\x1a\x60\xbd\x52\x86\x76\x3c\x20\x09\x19\x20\x79\x3f\x90\x5e\xf1\xcf\x1d\xcd\x4f\x85\x53\x71\x85\x08\x9f\x53\xac\x56\x06\xb5\x59\x0d\x10\x38\xf2\x9e\x16\xed\x6b\xb1\xff\x47\xd0\x53\xae\x2c\x03\xb4\xfc\x9b\xe4\x86\x1b\x56\x8a\xc3\x34\x35\x6f\xc6\xb0\xf4\xa3\xd6\x3b\xea\x0d\x1b\x53\x3b\xa9\x15\xfa\xc5\x8a\x6d\x29\x7f\xe6\x50\xee\x29\x1c\xb1\x91\x1a\xfc\xd0\xcc\xd2\x1a\x80\xa2\xe5\xb0\xf9\xff\x33\x9d\x9e\x59\xc3\x16\x32\x8e\xec\x1a\xbc\xbc\x1c\x3f\x95\xd8\x28\x50\xdf\x25\x59\x01\x57\xad\x8f\x29\xf6\x56\x2e\x1b\xad\x1d\x73\x27\x5c\x49\x4a\xd9\xdb\x73\xed\x85\xc5\x2a\xb9\xef\x23\xe5\x4b\x65\xf6\x73\x55\xcd\xb5\xb4\x55\xe7\x5b\x76\x94\x1f\x27\x9c\x1d\xce\x24\x8e\xa5\x6d\xf0\x98\x52\x20\x2b\x06\xf0\x4c\xc1\x2d\x52\x87\x42\xac\xf5\xaf\xdb\xb9\x6e\x5e\xe6\x80\x75\x91\xe5\x7e\x75\x7b\xf8\xaf\xc1\x87\xf2\xb6\xcc\x86\xfb\x62\x68\x32\xb3\xcc\xca\xef\x42\x8e\x53\xc4\xef\xe8\x73\xf0\xeb\x7c\xbb\xe2\x01\xbe\x86\xd4\xec\xfb\x79\x40\x9a\x4e\x6b\x96\x1b\xd7\x45\x4f\xd3\x77\x72\x9e\x32\x7e\x27\x36\x27\x7f\x9d\x33\xdd\x56\xdb\x35\x74\x53\x6d\x46\x54\xb5\x37\xf3\x2f\x00\x00\xff\xff\xca\xac\x30\x89\x70\x03\x00\x00")

func query_graphql() ([]byte, error) {
	return bindata_read(
		_query_graphql,
		"query.graphql",
	)
}

var _schema_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x4e\x4e\xcc\x49\x2c\x52\x08\x0d\xf5\x74\xe1\x82\xb2\x43\x32\x73\x53\xb9\xb8\x8a\x93\x33\x52\x73\x13\x15\xaa\xb9\x14\x14\x0a\x4b\x53\x8b\x2a\xad\x14\x02\x41\x14\x97\x82\x42\x6e\x69\x49\x62\x49\x66\x7e\x9e\x95\x82\x2f\x94\xc5\x55\xcb\x05\x08\x00\x00\xff\xff\xc2\x82\x45\xdf\x48\x00\x00\x00")

func schema_graphql() ([]byte, error) {
	return bindata_read(
		_schema_graphql,
		"schema.graphql",
	)
}

var _type_admin_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x90\xcd\x8a\x83\x30\x14\x85\xf7\x79\x8a\x3b\xaf\x91\xdd\x30\x6e\x84\x61\x70\x28\xae\x4a\x17\x17\x72\x0d\x17\x92\x18\xf2\x43\x11\xf1\xdd\x8b\xb1\x60\xd5\x52\xda\x5d\x38\x9c\x7c\xdf\x49\xd2\xe0\x09\xbe\x95\x65\x07\xa3\x00\xc8\x99\x95\x84\xb6\xad\xab\x2f\x01\x40\x16\xd9\x48\x38\xa5\xc0\x4e\xcf\x41\xc7\x21\xa6\x3f\xb4\xf4\x18\x1a\xdc\x67\x93\x10\x2b\xb7\x41\x4d\xc0\xd6\x1b\xb2\xe4\x52\x84\x06\x35\x3b\x4c\xa4\xfe\x33\x85\xa1\x58\x49\x69\x8a\x12\xce\xa5\x7f\x11\x00\x1e\x35\xd5\xae\xeb\xe5\xdc\x2e\xa7\x99\xc9\xce\xe7\xb4\x40\x7f\x7b\x7d\x5f\x7c\xd8\xe8\x31\xc6\x6b\x1f\xd4\x66\xce\x72\xf5\x27\x10\x26\x2a\x80\xba\x04\xe3\xfb\x6f\xfa\xcc\xd4\x7a\x75\x34\x6d\x3f\xf7\xe0\x7d\xa2\xdd\x5b\x57\x41\x45\x86\x5e\x0a\x26\x71\x0b\x00\x00\xff\xff\x68\xfa\x3e\xad\xdb\x01\x00\x00")

func type_admin_graphql() ([]byte, error) {
	return bindata_read(
		_type_admin_graphql,
		"type/admin.graphql",
	)
}

var _type_auth_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\xa9\x2c\x48\x55\x70\x2c\x2d\xc9\x08\xc9\xcf\x4e\xcd\x53\xa8\xe6\x52\x50\x28\x01\xb1\xac\x14\x82\x4b\x8a\x32\xf3\xd2\x15\xb9\x6a\xb9\x00\x01\x00\x00\xff\xff\xa3\x33\x16\xdc\x24\x00\x00\x00")

func type_auth_graphql() ([]byte, error) {
	return bindata_read(
		_type_auth_graphql,
		"type/auth.graphql",
	)
}

var _type_company_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x50\x3d\x6b\x03\x31\x0c\xdd\xfd\x2b\x5e\xb6\x16\xb2\xb4\xa3\xb7\xe4\x4a\xe1\xa0\x9f\x94\x4c\xa5\x83\x88\x15\x63\xb8\x93\x8d\xed\x2b\x1c\xa1\xff\xbd\xd8\xbe\x94\xa3\xdd\xbb\x3d\x3d\x3d\x49\x4f\x2f\xcf\x81\xd1\xf9\x31\x90\xcc\x38\x2b\x80\x42\x88\xfe\x93\x8d\xc6\xde\xfb\x81\x49\x14\x30\x4d\xce\x68\x1c\x0e\xfd\xdd\x46\x01\xc7\xc8\x94\xd9\xec\xb2\xc6\x5b\x8e\x4e\xac\x02\x84\x46\xbe\x94\x45\x33\x92\x90\xe5\x98\xae\x02\x59\xd6\x78\x21\xcb\x5b\x9c\xdc\x90\x39\x6a\x3c\xb6\xe6\x7d\x2d\xb7\xf0\xd1\x70\xdc\xcf\x1a\xcf\x0d\x5c\xff\x28\xca\x58\xd9\x46\xc6\x44\x4e\x49\x63\xd7\xc0\x46\x7d\x29\x55\x9d\x2f\x44\x73\xde\xf0\x83\x13\xbe\x59\x7b\x59\xf1\xb7\x6b\xfe\xe8\x27\xc9\xf3\x9a\x09\x3e\xe5\xce\x1b\xfe\xa3\x8a\x2b\xd9\xe5\xf4\x12\x5a\xf1\x08\x37\x86\x81\x47\x96\x9c\xca\xab\x4e\x4a\x3e\xaf\x13\xc7\x16\x29\x1b\xcb\x49\xe3\x7d\x99\xf8\x28\x97\xc8\x72\x2f\x27\xdf\xa2\x29\xa8\xec\x75\x12\xa6\x8c\xae\xe6\xbb\x88\xfb\x4a\x9d\xab\x91\x4a\x3c\xfd\x4a\xfa\xdf\xbe\xfe\x0e\x00\x00\xff\xff\x10\xb8\xf9\xd1\x2a\x02\x00\x00")

func type_company_graphql() ([]byte, error) {
	return bindata_read(
		_type_company_graphql,
		"type/company.graphql",
	)
}

var _type_course_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x55\x4d\x6b\x1b\x3d\x10\xbe\xef\xaf\x18\xdb\x97\xf7\x85\xf8\x90\xd8\x0e\xed\xde\x52\xc7\x05\x43\x43\x42\xbc\x86\x82\xf1\x41\x95\xc7\x1b\x91\x5d\x69\x91\x46\x25\x26\xe4\xbf\x17\x49\xf6\x4a\x5e\x37\xe9\x07\xbd\x94\x22\xb3\xa3\x8f\x99\xd1\x33\xcf\x8c\xc6\x28\x6d\x0d\x57\x9c\xa3\x31\xc5\xae\x41\x78\xce\x00\x34\x1a\xd2\x82\x13\x6e\x32\x00\xd5\xa0\xcc\x5e\xb2\xcc\x2b\x2e\x48\x5b\x4e\x56\xe3\xac\xc2\x1a\x25\x79\xf5\x5a\x6d\x6c\x85\x19\x00\xa1\xa1\x0c\xa0\x42\x63\x54\xb4\xb9\xf1\xc7\xa9\xc1\x89\x1e\xb9\x9b\xa7\xca\x6a\x83\x73\xb9\x55\x5e\x49\xb2\x1a\x73\x77\xa1\x90\x65\x06\xf0\x85\xf1\xc7\x52\x2b\x2b\x37\xd3\x07\xe4\x8f\x39\x7c\x50\xaa\x42\x26\x33\x80\x46\x0b\x8e\x39\x7c\xac\x14\x73\x6e\xb9\xaa\x94\x4e\x2c\xf1\x89\xa3\x6e\x28\xd9\x11\x92\xb4\xda\x58\x4e\x42\xc9\x64\xdb\x34\xc8\xc5\x56\xf0\x02\x75\x6d\xda\xfd\x03\xbc\x5b\x59\x09\x89\x01\xa4\x07\x68\xad\xd8\xe4\xb0\x5c\xce\xaf\x7b\xde\xe7\x56\xe5\x49\x0c\xbd\x18\x57\xc5\x8c\xd1\x4a\xd5\xbf\x66\x2b\x64\x63\x09\x16\xec\x2b\x76\x1c\xcc\xfd\xc1\xb1\x97\x53\xbe\x38\x23\x2c\x95\xde\xb9\xd3\x56\xe7\xa7\xa9\x78\x83\x6d\xd6\xd6\x4a\x9e\xd4\xcd\x8f\xd3\x40\xac\x34\x39\xac\x7c\xcc\xeb\x57\xd9\x76\x57\x4b\x89\x7a\x5e\xb3\x12\x17\xd6\xfb\x4f\x9d\x58\x52\x3a\x86\x04\x83\x20\xd4\x16\xe8\x01\xa1\x70\xa7\xf0\x1f\x3f\xf0\x05\x3c\x30\xae\x64\xb5\xfb\xdf\x15\x2a\x7b\xba\x63\x9a\x04\x17\x0d\x93\x64\x72\x98\x4b\x87\xd4\x10\xd3\x74\xcd\x08\x73\x28\x44\xed\x42\x41\xb9\x39\x5a\x57\x8a\xb3\x23\x86\x8e\xf2\x93\x56\xc6\xbf\x9c\x1c\x73\x68\x0e\x39\xac\xf6\x6c\x10\xd6\xbd\x35\x0c\xdc\xe3\xd9\xc1\x56\x69\x97\x0a\x21\x71\x9f\x18\x13\x79\x8c\xfa\xa1\x43\xf8\x08\xba\xdd\xa6\x77\xfa\x72\x08\x1d\xbe\x55\xe8\x31\xe1\xba\xe4\xf5\xc4\xed\xc4\xeb\x51\x3f\xea\xba\x8c\x80\x34\x32\xc2\x82\x95\x31\xa3\x69\x12\x7b\x5d\x12\xe3\x7b\x2f\x58\xf9\x76\x01\x7c\xd7\x76\x00\x2b\x98\x7d\xbe\xba\xb9\xfb\x34\x83\xe9\xed\xf2\x7e\x31\x83\x45\x71\xbf\x9c\x16\xcb\xfb\x59\x36\x00\x80\xe7\x80\xbe\x1f\xba\x6d\xff\x6c\xef\xbf\x3f\x1a\x8f\xc6\xa3\x61\xfa\x1d\x7b\xd1\x7f\x39\x0b\x76\xd0\x31\xf4\xbb\x07\x78\xfd\xf3\x8b\x91\xfb\x0d\xf7\xf2\x62\x3f\xf1\x62\xd4\x2a\x1f\x78\xde\x2f\x23\x9a\xd0\xc3\x23\x9a\xf3\x0b\x3f\x86\x41\x38\x6f\xed\xea\x00\x28\x35\x77\xff\x04\xd1\xf8\xdd\xfb\x30\x86\x93\x4b\x3f\x86\x93\xcb\x76\x32\xb9\x9c\x44\x07\x6b\x2f\xff\x48\x80\x30\x00\xb1\x05\x61\x80\xb0\x6e\x2a\x46\x08\x35\x7b\x44\x60\xc0\x55\xb3\xfb\x1b\xa2\x7f\x05\xca\xc8\x17\xc1\x38\x94\x84\x9b\x4c\x26\x63\x3f\x86\xfe\xdb\xef\x98\xff\x06\x94\x75\xf6\x2d\x00\x00\xff\xff\x38\x75\x43\xfc\x3c\x08\x00\x00")

func type_course_graphql() ([]byte, error) {
	return bindata_read(
		_type_course_graphql,
		"type/course.graphql",
	)
}

var _type_users_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x52\xc1\xae\xd3\x30\x10\xbc\xe7\x2b\x16\xf5\xf2\x90\xf8\x82\xdc\x50\xab\x27\x45\x02\xf4\x10\xe4\x84\x38\x98\x64\xed\xb7\xc8\x5e\x47\xf6\x46\x55\x85\xfa\xef\xc8\x4e\xd2\xa6\x8d\x0b\xe2\xc6\x6d\x33\xd9\xd9\xdd\x99\x31\xb1\x60\xd0\xaa\x43\x68\x23\x06\xf8\x55\x01\x8c\x23\xf5\x35\xb4\x6d\x73\x78\x53\x01\x74\x01\x95\x60\xff\x5e\x6a\xf8\x22\x81\xd8\x54\x00\xe8\x14\xd9\xe5\x3b\x35\x69\x0a\x51\x3e\x29\x87\x6b\xd0\xaa\x2d\x26\x68\x71\x78\xf5\xbc\x69\xfc\xe0\x0d\xf1\x1a\xfc\xe9\x7f\x7c\x25\xb1\xab\xc6\x73\x55\x11\x0f\xa3\xc0\x47\xc5\xca\x60\xc8\x94\x7c\xf1\xe6\x9e\x41\xc5\x78\xf4\xa1\x2f\x90\xf7\x59\xcf\x3c\xa2\xc9\x50\x1a\xd1\x79\x37\x28\x3e\x25\xd5\x93\x76\xd8\xc1\xb3\x0f\xa0\x7a\x47\x1c\xe1\xf8\x8a\x3c\x59\x41\x6c\xc0\x4d\xec\x08\x5e\x43\x4f\x5a\x63\x40\x96\x79\x04\x61\xfc\x17\x43\x36\xa7\x6f\x75\x3f\x70\xed\x0f\x1a\x0f\x68\xb1\xa0\x71\x1d\xec\xb9\xaa\xe4\x34\xe0\xe2\x25\x90\x1b\x2c\x3a\x64\x89\xff\xff\x43\xb8\xa4\x55\xc3\x7e\x2a\xb2\x1f\xc1\x6b\xb2\xd8\x38\x65\xb0\x0d\x97\xab\xae\xae\xb4\x43\x5f\x4a\xfe\x56\xe5\x8d\xa2\x92\xa0\x82\x9e\x92\x9c\xc2\xe1\xf7\x9e\xbf\x28\x83\x6b\xdf\x5f\x94\x21\x4e\x16\x7f\x1e\x31\x9c\xa6\x87\xdd\x1b\x8c\x35\x7c\x9b\x19\xdf\x73\xec\x06\x1b\xd6\xbe\x4e\xfd\xb9\x4a\x73\x77\x90\x27\xa7\xe0\x8d\x12\x2c\xc4\xb9\x83\x5b\xa9\xe9\xfb\x2e\xbe\x04\x15\x02\x4c\xf0\x36\xc2\x84\x16\x42\x5c\x9a\xe7\x18\x0f\x4a\x30\x63\xdb\x14\x13\xda\xf9\x31\x44\x8c\x4f\x5e\xeb\x88\x52\x43\xc3\xf2\x0e\x2c\x39\x5a\x6a\x4d\x56\x30\xd4\x17\x61\xfb\x4c\x78\xce\xe8\xdb\x14\x7f\xe6\x2f\xb3\x58\x66\xe0\xe9\x2f\xbc\x86\x65\xe2\x60\x10\xd2\xd4\x29\x79\x7c\x44\x5a\xb3\x6a\x5b\xed\x5a\x93\x37\x0b\xaf\x3f\xef\xb6\x9e\xab\xdf\x01\x00\x00\xff\xff\x93\xe1\xac\xe7\x74\x05\x00\x00")

func type_users_graphql() ([]byte, error) {
	return bindata_read(
		_type_users_graphql,
		"type/users.graphql",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"mutation.graphql": mutation_graphql,
	"query.graphql": query_graphql,
	"schema.graphql": schema_graphql,
	"type/admin.graphql": type_admin_graphql,
	"type/auth.graphql": type_auth_graphql,
	"type/company.graphql": type_company_graphql,
	"type/course.graphql": type_course_graphql,
	"type/users.graphql": type_users_graphql,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"mutation.graphql": &_bintree_t{mutation_graphql, map[string]*_bintree_t{
	}},
	"query.graphql": &_bintree_t{query_graphql, map[string]*_bintree_t{
	}},
	"schema.graphql": &_bintree_t{schema_graphql, map[string]*_bintree_t{
	}},
	"type": &_bintree_t{nil, map[string]*_bintree_t{
		"admin.graphql": &_bintree_t{type_admin_graphql, map[string]*_bintree_t{
		}},
		"auth.graphql": &_bintree_t{type_auth_graphql, map[string]*_bintree_t{
		}},
		"company.graphql": &_bintree_t{type_company_graphql, map[string]*_bintree_t{
		}},
		"course.graphql": &_bintree_t{type_course_graphql, map[string]*_bintree_t{
		}},
		"users.graphql": &_bintree_t{type_users_graphql, map[string]*_bintree_t{
		}},
	}},
}}
