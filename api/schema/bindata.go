// Code generated by go-bindata.
// sources:
// mutation.graphql
// query.graphql
// schema.graphql
// type/admin.graphql
// type/auth.graphql
// type/company.graphql
// type/course.graphql
// type/delegate.graphql
// type/manager.graphql
// type/users.graphql
// DO NOT EDIT!

package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _mutationGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x93\xd1\x8e\xdb\x2c\x10\x85\xef\x79\x8a\x89\xfe\x9b\xbf\x37\xfb\x00\xb9\xdb\x26\xaa\x14\x69\xa3\x56\x9b\xf8\x01\xa6\xf6\xac\x83\x8a\x81\xc2\xb0\xaa\x55\xe5\xdd\x2b\x13\x82\xc1\x4e\x2e\xf9\x72\xce\x70\x38\x13\xff\x07\x43\x60\x64\x69\xb4\x87\x16\x35\x0c\xa6\x93\x1f\x23\xf0\x85\xa0\xfb\xf9\x02\xf4\x87\xda\xc0\xd4\x81\xa7\xdf\x81\x34\x4b\x54\x6a\x7c\x11\x42\x6a\x1b\x18\x1a\xab\x0c\x76\xdf\xa4\xa2\x23\x31\xc2\x5f\x01\xf0\x21\x15\x9d\x47\x4b\x5b\x38\xb1\x93\xba\xdf\x08\x80\xd6\x68\x26\xcd\x6f\xa4\x7b\xbe\x6c\xe1\xa0\x79\x23\xae\x42\xf0\x68\xa9\x18\xf1\x4e\xde\xc6\x11\xc1\xa9\xd2\xed\x43\xdb\x92\xf7\x67\xf3\x8b\xf4\xcc\xaf\xeb\x0c\xa7\x9b\x30\xce\x78\x6a\x8a\x97\x1e\xd3\x93\xa3\x14\xbb\x41\xea\x37\xd3\x4b\xfd\x7f\x9c\xb8\x85\xd7\x4c\x36\x5f\xb6\xf0\x1a\xf8\x12\xe7\x08\x80\x01\x35\xf6\xe4\x2a\xf5\xb1\x60\x4b\x7d\xeb\x08\x99\x92\xe2\x6e\xd8\x95\xf0\x30\xb1\xc9\x96\xce\xd3\xfb\x6d\xb7\x36\x35\x25\x7c\x60\x4a\xc9\x7e\x38\x33\x6d\xe0\x56\xca\xfb\xb4\x33\xcf\xf3\x88\x72\x5b\x93\xbd\x2e\xff\xc9\x94\x54\xeb\x7a\x4a\xfa\xa1\xce\xd1\x91\xa2\x55\xf8\x7d\x09\x73\xf8\xaf\xc6\x28\x42\xbd\xc9\x3d\xc5\xde\xeb\x96\x22\xca\x8e\x78\xca\x0d\x55\xf2\x66\x46\x2b\xf9\x2d\x53\x25\xdf\xcf\xe8\x79\x9e\x49\xd4\x23\x53\x1d\xe9\x4e\xb3\xef\x0e\xb2\x6f\x67\x06\x8b\x7a\xac\x6d\x09\x66\x57\x3a\xe7\xd7\x2c\x4c\x4d\x09\x1f\x98\xaa\x9b\xee\x8b\x16\x00\xd3\xd7\x16\xd9\xc3\x7b\xa3\x20\x2d\xf9\xe1\x1f\x31\x0a\x1c\xb5\x68\xb9\xbd\x60\xf9\x19\xd6\x05\xa1\xb5\xce\x7c\xe6\xd0\x21\xc8\x6e\x0b\x4d\x73\xd8\xd7\x29\x3d\x7e\xd2\x77\xad\xa4\xa6\x9d\x09\xce\xe7\x26\x4f\x0b\x9e\x1f\x58\xc2\xe4\xdf\x29\xf4\xde\x19\x33\xac\x47\x2c\x7e\x9a\x6b\xaa\x79\xae\xeb\x8c\x7d\xbd\x94\x33\xf6\xd9\x74\xc6\x7e\xee\x15\x99\x7a\xe3\x96\x2b\x4c\x74\xbe\x27\x01\x71\x15\xff\x02\x00\x00\xff\xff\x1b\xc4\xa6\xa7\x48\x05\x00\x00")

func mutationGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_mutationGraphql,
		"mutation.graphql",
	)
}

func mutationGraphql() (*asset, error) {
	bytes, err := mutationGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "mutation.graphql", size: 1352, mode: os.FileMode(420), modTime: time.Unix(1588427295, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _queryGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x53\xc9\x6e\xdb\x3c\x10\xbe\xf3\x29\xbe\x20\x97\x18\x08\xfe\x07\xe0\x2d\x0b\x02\xf8\xf0\xb7\x29\xea\x9c\x0b\x9a\x1a\x49\x6c\xb8\xa8\x24\xd5\xc6\x28\xf2\xee\x05\xa9\x8d\x72\x6c\x03\xed\x4d\xd4\x7c\xdb\x90\x33\xd7\xf8\xd1\x93\x57\x14\x10\x5a\xd7\xeb\x0a\xd6\x45\x18\x57\xa9\xfa\x80\xd8\x12\xaa\xfd\x7f\xa0\x37\x92\x7d\xa4\x0a\xca\xa2\x13\xde\x0b\xad\x49\xb3\x78\xe8\x08\xcf\xa2\xa1\xad\xad\x1d\x7e\x33\x20\xba\x28\x34\xc7\xd6\xc6\x2b\x5c\xe3\x53\x6f\xf6\xe4\xe1\x6a\x74\xa2\xa1\x00\x51\x47\xf2\x88\xad\x0a\x70\x96\x18\xe0\xea\x3a\x50\x9c\xf1\xbb\x96\xc6\x5f\x89\x93\x71\x89\x88\xda\x3b\x93\xa3\x84\x28\x7c\x64\x80\x56\x46\xad\x69\x46\xbc\xa5\xf8\xbf\x2c\x3a\xf2\x99\xc5\x80\x46\xfd\x24\x7b\x22\x8d\x8a\x64\xc2\x50\x65\xef\x8c\x29\xdb\xf5\x31\xf7\x91\x7b\x28\x42\xad\xac\x16\xe8\xff\xc2\x8a\x86\xfc\x93\xd2\xa9\x9f\xc4\xb1\xc2\x10\xc7\xd7\xe8\x95\x6d\x18\x40\x46\x28\x5d\x9c\xbf\xbb\xfd\x4e\x45\x5d\x42\xfa\x5e\x55\x1c\x2f\x2f\xdb\xc7\x74\x6d\xa4\xa9\x6b\x9d\x5d\x00\xb3\xd7\x23\x69\x6a\x44\xa4\xc2\x6c\x4d\x8d\xf2\x5b\x3a\xce\xc2\x7f\x1f\xe5\x82\xfb\x83\xeb\x7d\xc8\xcf\x7b\xbe\x59\x21\x25\x85\xb0\x3b\x74\xc4\x71\x37\x7f\x33\x60\x2f\xe4\x6b\xe3\x5d\x6f\xab\x87\x96\xe4\x2b\xc7\xbd\x73\x9a\x84\x65\x40\xe7\x95\x24\x8e\x27\xed\x44\x71\xaf\x9f\xad\x56\x96\x06\xcf\xc2\x4f\xce\x21\xf8\x87\x40\x45\x54\x2d\x42\xf0\xce\x99\x7f\xe5\x3b\xd3\x09\x7b\x38\x77\xcf\xab\xa6\x33\x29\x92\xaf\x85\xcc\x0b\xa0\xac\x88\x54\x7d\xe9\xc9\x1f\x32\xb3\x1b\x77\x82\xcf\xdb\x51\x34\xe9\x2b\xf2\xf7\x03\x4e\x04\x49\xb6\x52\xb6\x29\xef\xa6\x56\xa4\xe7\x07\xbd\x4a\xc4\xbc\x67\x8b\xba\xca\xca\x53\x1d\x10\x95\x51\xf6\x66\x49\x7b\xb5\xe1\xb8\x4b\xff\xa6\x5a\xb8\x49\x81\x86\x30\x53\x2d\x7d\x27\xb2\x19\x66\xb9\xa0\x6f\xf8\x34\xe0\x4b\xb9\x54\xb8\x45\x9d\xef\x88\xaf\xf7\xe0\x16\x6e\xe8\x8c\x4f\x2d\x2e\x42\xcf\xc3\x3e\x56\xe3\x2c\x1f\x65\x9d\x46\x9c\x01\xd7\x33\xe6\xb4\xe3\x7a\x1b\x4e\x5a\x16\x6a\x72\x78\xd2\x23\xbb\xf1\xa1\xe7\xba\x3a\xe3\xb5\x1a\x88\x93\x56\x23\x62\xec\xce\x15\xd3\x1b\x6e\x18\x30\xcc\xc1\x20\x9b\x8f\x93\xf2\xc7\x39\xcf\xe5\x63\x07\x06\x6c\xd6\xe0\x51\x49\xae\x47\xfd\xb2\xd9\xc9\xbd\xb8\xe0\x77\x84\xcf\x7a\xef\xec\x4f\x00\x00\x00\xff\xff\xad\xbc\x04\xdc\x25\x06\x00\x00")

func queryGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_queryGraphql,
		"query.graphql",
	)
}

func queryGraphql() (*asset, error) {
	bytes, err := queryGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "query.graphql", size: 1573, mode: os.FileMode(420), modTime: time.Unix(1588428213, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x4e\x4e\xcc\x49\x2c\x52\x08\x0d\xf5\x74\xe1\x82\xb2\x43\x32\x73\x53\xb9\xb8\x8a\x93\x33\x52\x73\x13\x15\xaa\xb9\x14\x14\x0a\x4b\x53\x8b\x2a\xad\x14\x02\x41\x14\x97\x82\x42\x6e\x69\x49\x62\x49\x66\x7e\x9e\x95\x82\x2f\x94\xc5\x55\xcb\x05\x08\x00\x00\xff\xff\xc2\x82\x45\xdf\x48\x00\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 72, mode: os.FileMode(420), modTime: time.Unix(1588339244, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typeAdminGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x90\xcd\x8a\x83\x30\x14\x85\xf7\x79\x8a\x3b\xaf\x91\xdd\x30\x6e\x84\x61\x70\x28\xae\x4a\x17\x17\x72\x0d\x17\x92\x18\xf2\x43\x11\xf1\xdd\x8b\xb1\x60\xd5\x52\xda\x5d\x38\x9c\x7c\xdf\x49\xd2\xe0\x09\xbe\x95\x65\x07\xa3\x00\xc8\x99\x95\x84\xb6\xad\xab\x2f\x01\x40\x16\xd9\x48\x38\xa5\xc0\x4e\xcf\x41\xc7\x21\xa6\x3f\xb4\xf4\x18\x1a\xdc\x67\x93\x10\x2b\xb7\x41\x4d\xc0\xd6\x1b\xb2\xe4\x52\x84\x06\x35\x3b\x4c\xa4\xfe\x33\x85\xa1\x58\x49\x69\x8a\x12\xce\xa5\x7f\x11\x00\x1e\x35\xd5\xae\xeb\xe5\xdc\x2e\xa7\x99\xc9\xce\xe7\xb4\x40\x7f\x7b\x7d\x5f\x7c\xd8\xe8\x31\xc6\x6b\x1f\xd4\x66\xce\x72\xf5\x27\x10\x26\x2a\x80\xba\x04\xe3\xfb\x6f\xfa\xcc\xd4\x7a\x75\x34\x6d\x3f\xf7\xe0\x7d\xa2\xdd\x5b\x57\x41\x45\x86\x5e\x0a\x26\x71\x0b\x00\x00\xff\xff\x68\xfa\x3e\xad\xdb\x01\x00\x00")

func typeAdminGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeAdminGraphql,
		"type/admin.graphql",
	)
}

func typeAdminGraphql() (*asset, error) {
	bytes, err := typeAdminGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/admin.graphql", size: 475, mode: os.FileMode(420), modTime: time.Unix(1588338400, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typeAuthGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\xa9\x2c\x48\x55\x70\x2c\x2d\xc9\x08\xc9\xcf\x4e\xcd\x53\xa8\xe6\x52\x50\x28\x01\xb1\xac\x14\x82\x4b\x8a\x32\xf3\xd2\x15\xb9\x6a\xb9\x00\x01\x00\x00\xff\xff\xa3\x33\x16\xdc\x24\x00\x00\x00")

func typeAuthGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeAuthGraphql,
		"type/auth.graphql",
	)
}

func typeAuthGraphql() (*asset, error) {
	bytes, err := typeAuthGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/auth.graphql", size: 36, mode: os.FileMode(420), modTime: time.Unix(1588338400, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typeCompanyGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x92\x4f\x6b\x33\x21\x18\xc4\xef\x7e\x8a\xc9\xed\x7d\x21\x97\xf6\xe8\x2d\x49\x29\x04\xfa\x97\xb2\xa7\xd2\x83\xc4\x27\x22\xec\x3e\x8a\xba\x85\x25\xe4\xbb\x17\x75\x53\x96\xec\xe6\xda\xdb\x38\x8e\xfa\x73\x78\xd2\xe0\x09\x3b\xd7\x79\xc5\x03\x4e\x02\x50\xde\x07\xf7\x4d\x5a\x62\xeb\x5c\x4b\x8a\x05\xd0\xf7\x56\x4b\x34\xcd\xfe\x61\x25\x80\x43\x20\x95\x48\x6f\x92\xc4\x47\x0a\x96\x8d\x00\x58\x75\x74\x59\xe6\x4c\xa7\x58\x19\x0a\xf1\x9f\x57\x86\x24\xde\x94\xa1\x35\x8e\xb6\x4d\x14\x24\x9e\xeb\xe6\x63\x59\xae\xe1\x82\xa6\xb0\x1d\x24\x5e\xab\xf8\xff\x9b\xc8\xc7\xf2\x6d\x4a\xeb\x40\x31\x4a\x6c\xaa\x58\x89\xb3\x10\x85\x7c\x34\x2a\x79\xd5\x4f\x96\xe9\x6e\xca\x32\xf1\xef\xa7\xfe\xc1\xf5\x9c\x86\xa9\xe3\x5d\x4c\x3b\xa7\x69\x96\x0a\x93\xd8\xe5\xe9\xb1\xb4\xcc\x08\xdb\xf9\x96\x3a\xe2\x14\xf3\x57\x2d\xe7\x7e\xde\x7b\x0a\xb5\x52\xd2\x86\xa2\xc4\xe7\x78\xe2\x2b\xbf\xa4\x0c\xed\xf9\xe8\x6a\x35\x59\xe5\x7b\x2d\xfb\x3e\x61\x57\xfa\x1d\xc3\xfb\x62\x9d\x0a\x48\x31\x5e\xae\x9a\xfe\xbb\x5f\x57\xba\xc6\xeb\x25\xba\xab\x11\x99\xb3\xde\x18\xad\x25\xfc\x1b\xf4\x33\xf8\x05\xf6\x39\xba\x38\x8b\x9f\x00\x00\x00\xff\xff\xc7\xdd\x28\x06\xe4\x02\x00\x00")

func typeCompanyGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeCompanyGraphql,
		"type/company.graphql",
	)
}

func typeCompanyGraphql() (*asset, error) {
	bytes, err := typeCompanyGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/company.graphql", size: 740, mode: os.FileMode(420), modTime: time.Unix(1588341159, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typeCourseGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x55\x4d\x6b\x1b\x3d\x10\xbe\xef\xaf\x18\xdb\x97\xf7\x85\xf8\x90\xd8\x0e\xed\xde\x52\xc7\x05\x43\x43\xdc\x78\x0d\x85\xe0\x83\xa2\x1d\x6f\x44\x76\xa5\x45\x9a\x2d\x31\x21\xff\xbd\x48\xf2\x5a\xf2\xa6\x71\x9b\xd0\x4b\x29\x32\x1e\xad\x34\xcf\xe8\x99\x0f\x8d\x50\x36\x15\x5c\x70\x8e\xc6\x64\xdb\x1a\xe1\x29\x01\xd0\x68\x48\x0b\x4e\x98\x27\x00\xaa\x46\x99\x3c\x27\x89\x53\x5c\x92\x6e\x38\x35\x1a\x67\x25\x56\x28\xc9\xa9\x57\x2a\x6f\x4a\x4c\x00\x08\x0d\x25\x00\x25\x1a\xa3\x02\xe6\xca\x6d\xc7\x80\x17\x7a\x64\x4f\x9e\xaa\x46\x1b\x9c\xcb\x8d\x72\x4a\x92\x55\x98\xda\x03\x85\x2c\x12\x80\x3b\xc6\x1f\x0a\xad\x1a\x99\x4f\xef\x91\x3f\xa4\xf0\x49\xa9\x12\x99\x4c\x00\x6a\x2d\x38\xa6\xf0\xb9\x54\xcc\x9a\xe5\xaa\x54\x3a\x42\xe2\x23\x47\x5d\x53\xb4\x22\x24\x69\x95\x37\x9c\x84\x92\xd1\xb2\xa9\x91\x8b\x8d\xe0\x19\xea\xca\x44\xeb\x9c\x11\x16\x4a\x6f\x53\x98\xee\x66\x7b\xce\xd7\xb2\x14\x12\x3d\x73\xc7\xba\x69\x44\x9e\xc2\x6a\x35\xbf\xec\xb9\x83\x36\x2a\x8d\x1c\xeb\xfd\x14\xb8\x60\x05\x82\xa8\x6a\x1f\x21\x03\x0b\x56\x08\xc9\x08\xf3\xaf\x0d\xea\xad\x33\x8b\x79\x81\x26\x85\xdb\x18\xb6\xb6\xae\xb3\xc2\x19\x4e\x2d\xc8\xcd\x42\x38\x4b\x66\x8c\x56\xaa\x7a\x07\xbb\x0e\xf6\x0d\x04\x3b\xc8\xd7\x39\x0a\x59\x37\x04\x4b\xf6\x1d\x3b\x90\xb9\xdb\x38\x64\xfb\xb2\x1c\xda\x9c\xd8\xdd\xbd\xce\x6f\x67\xfa\x48\x31\xb1\xfd\x55\x48\xa3\x6b\xf1\xeb\x2a\x23\x56\x58\xff\x5d\x6c\xd7\x47\x8a\xe9\x8e\x49\x89\x7a\x5e\xb1\x02\x97\x8d\xb3\x1f\x1b\x69\x48\xe9\xe0\x12\x0c\xbc\x50\x1b\xa0\x7b\x84\xcc\xee\xc2\x7f\xbc\x8d\x17\x70\x9f\x59\x25\xcb\xed\xff\xf6\x1e\xb2\xc7\x05\xd3\x24\xb8\xa8\x99\x24\x93\xc2\x5c\x5a\xa6\x86\x98\xa6\x4b\x46\x98\x42\x26\x2a\xeb\x0a\xca\xfc\xe0\xbb\x54\x9c\x1d\x44\xe8\x20\x3f\x71\xcd\xfd\xcb\xc9\x31\x6d\xef\xb3\x65\xee\xa3\x41\x58\xf5\xd6\x30\xb0\xb7\x79\x0b\x1b\xa5\x6d\x2a\x84\xc4\x5d\x62\x4c\x88\x63\xd0\xf7\x0d\xd0\x79\xd0\x6d\xa6\xbd\x97\x37\x94\xd0\xf2\xbb\xf5\x2d\xd4\x1f\xd7\x0b\x56\xc3\x72\x64\xf5\xa0\xdd\x76\x4d\x06\x42\x1a\x19\x61\xc6\x8a\x90\xd1\x38\x89\xbd\x6e\x10\x43\x6f\xc8\x58\x71\xbc\x00\x8e\x60\xdb\xfe\xf9\x1e\x03\x31\xef\xd6\xce\x5b\xc8\x0f\xe0\x16\x66\xdf\x2e\xae\x16\x5f\x66\x30\xbd\x5e\xdd\x2c\x67\xb0\xcc\x6e\x56\xd3\x6c\x75\x33\x4b\x06\x00\xf0\xe4\xe3\xd7\xf7\xcf\x59\xff\x64\x47\xb0\x3f\x1a\x8f\xc6\xa3\x61\xfc\x3f\x76\xa2\xff\x7c\xe2\x71\xd0\x01\xba\xd5\xd6\xbf\xfe\xe9\xd9\xc8\xfe\x86\x3b\x79\xb6\x9b\x38\x31\xda\x2b\xb7\x99\xde\x7d\x06\x36\xfe\x91\x0c\x6c\x4e\xcf\xdc\x18\x7a\x61\xad\xed\xbf\x5a\x42\x31\xdc\x3e\xb5\x01\xfc\xe1\xa3\x1f\xc3\xc9\xb9\x1b\xc3\xc9\xf9\x7e\x32\x39\x9f\x04\x03\x6b\x27\xff\x88\x83\x30\x00\xb1\x01\x61\x80\xb0\xaa\x4b\x46\x08\x15\x7b\x40\x60\xc0\x55\xbd\xfd\x1b\xbc\x7f\x85\xca\xc8\x15\xc1\xd8\x97\x84\x9d\x4c\x26\x63\x37\x86\xee\xbf\xdf\x81\xbf\x83\xca\x3a\xf9\x11\x00\x00\xff\xff\xb4\x63\xd0\x24\x9d\x09\x00\x00")

func typeCourseGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeCourseGraphql,
		"type/course.graphql",
	)
}

func typeCourseGraphql() (*asset, error) {
	bytes, err := typeCourseGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/course.graphql", size: 2461, mode: os.FileMode(420), modTime: time.Unix(1588339244, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typeDelegateGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x91\xcf\x6a\x84\x40\x0c\xc6\xef\x79\x8a\xf4\x35\xbc\x95\xf5\x22\x94\xb2\xa5\x7a\x2a\xa5\xa4\x6b\x9c\xa6\xcc\x3f\x66\x22\x45\x16\xdf\xbd\xe8\x62\x57\xd1\x43\x6f\xc3\x8f\x2f\x61\x7e\xf9\x74\x88\x8c\x25\x5b\x36\xa4\x8c\xe2\xa2\x65\xc7\x5e\x33\x36\x99\x13\x5e\x01\xb1\xef\xa5\x2d\xb0\x69\xaa\xf2\x01\x10\x2f\x89\x49\xb9\x7d\xd4\x02\x5f\x35\x89\x37\x80\x58\xd7\xa7\x8f\xaa\x5c\xc0\x94\x62\x47\x62\xd7\xa0\x93\x94\xf5\x99\x1c\xaf\xa1\xa5\x3d\x53\xb6\x1c\xbf\x82\xdf\x05\x9f\x82\x11\xbf\x86\xdf\xe1\xb3\x16\xb5\x9b\xe0\x25\xb8\x48\x7e\x28\xf0\x74\x7b\x4c\x2c\xa6\xd0\x89\xe5\xca\x91\xe1\x26\xfd\xfd\x0a\x46\x00\xf1\xb1\x57\x3c\xcd\x4a\xcb\x0d\xaa\x99\x5d\xef\xcb\x26\xf3\x9b\xff\xa1\xea\xbf\xcd\x76\x37\x39\x12\x38\xd4\x8f\x94\xf3\x4f\x48\xed\x9d\x8d\x00\x9b\xe2\xce\x64\x36\xe5\x9d\xc9\x88\x9f\x7a\x7a\xe9\x39\x0d\xb3\x0d\xb7\x86\x73\x81\x6f\xcb\xc8\xfb\xbc\xd8\x70\xe5\xbb\x50\x4c\x03\xf3\x0b\x46\xf8\x0d\x00\x00\xff\xff\x31\xc8\x49\x15\x12\x02\x00\x00")

func typeDelegateGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeDelegateGraphql,
		"type/delegate.graphql",
	)
}

func typeDelegateGraphql() (*asset, error) {
	bytes, err := typeDelegateGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/delegate.graphql", size: 530, mode: os.FileMode(420), modTime: time.Unix(1588427811, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typeManagerGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x92\xcd\x6a\xc3\x30\x10\x84\xef\x7a\x8a\x2d\x7d\x0b\xdf\x4a\x42\xc1\xd0\x96\x94\xd6\xa7\xd2\xc3\x36\x5a\x2b\x5b\xa4\x95\x90\x64\x42\x08\x79\xf7\x22\x3b\x3f\x4e\x23\x0a\xbd\xd9\xc3\xee\x30\xdf\xac\xf2\x2e\x10\x3c\xa3\xa0\xa1\x08\xec\x82\x25\x47\x92\x13\x74\x89\x22\xec\x15\xc0\x30\xb0\x6e\xa0\xeb\xda\xe5\x9d\x02\x58\x47\xc2\x4c\xfa\x21\x37\xf0\x96\x23\x8b\x51\x00\xe4\x90\xed\xe9\xbf\x0c\xf5\x1c\x53\x7e\x41\x47\x73\xd1\xe2\xad\x96\xc9\x52\xd8\x78\xb9\x19\x7c\xf2\x86\x65\x2e\x7e\xfb\xaf\x77\xce\xf6\x6a\x70\xed\x5d\x40\xd9\x35\xb0\x98\x3e\x8a\x16\xa2\xef\xd9\x52\xeb\xd0\x50\x17\xcf\xa9\xd4\x41\xa9\x39\xe9\x0a\x0d\xcd\x69\x57\x68\x58\x0a\xd8\xeb\x40\x71\x37\x72\x93\x36\x94\x1a\xf8\x38\x6e\x7c\x16\x73\x34\xd4\x4a\xef\x9b\x32\x3f\x7e\x15\x5f\x96\x30\xe4\x93\xf1\x18\x7c\xda\xff\xdd\x4a\xc0\x94\xb6\x3e\xea\x8b\x76\x5e\x5e\x8c\xad\x1e\x2d\xda\x51\xda\x5f\x00\x4b\xf7\xd3\x05\xe0\x1e\x1e\x7d\x04\xd4\x8e\x25\xc1\x76\x43\x32\x1d\x84\xc5\x80\x9b\xb6\x13\xf8\x1e\x34\xf7\x3d\x45\x92\x7c\xb4\x60\x4a\xff\x39\xcb\x4d\xf4\x5a\xfb\xd5\xdb\xfd\xc1\xb8\x24\x4b\x15\xc6\xf9\xf3\x3a\xcf\x76\x41\xd7\xfa\xb8\x7e\x8a\x57\x29\x6b\x78\x15\xba\x5a\xee\x0a\x9f\x3a\xa8\x9f\x00\x00\x00\xff\xff\xe7\xbb\xae\x28\x18\x03\x00\x00")

func typeManagerGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeManagerGraphql,
		"type/manager.graphql",
	)
}

func typeManagerGraphql() (*asset, error) {
	bytes, err := typeManagerGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/manager.graphql", size: 792, mode: os.FileMode(420), modTime: time.Unix(1588343291, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typeUsersGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xca\x31\x0a\xc2\x40\x10\x85\xe1\x7e\x4f\xf1\xbc\x46\x3a\xc1\x46\x10\x1b\xdd\x03\x8c\xc9\x4b\x1c\xd9\xcc\xca\x64\x52\x89\x77\x17\x8b\xc0\x42\xca\xff\xe7\x53\x0b\xfa\x28\x3d\x91\x17\x3a\x3e\x09\x58\x57\x1d\x3a\xe4\x7c\x3e\x1d\x12\xd0\x3b\x25\x38\x1c\xa3\xc3\x2d\x5c\x6d\x4a\x00\x67\xd1\xb2\xf5\x1f\x8d\xea\x4b\x5c\x65\x66\x3b\x8b\xec\x5f\xb0\xf0\xfd\xac\xb6\x83\x97\x3a\xa9\xb5\xf3\x55\x1f\x77\x8d\xd2\xc0\x6f\xfa\x05\x00\x00\xff\xff\x55\x31\x41\x93\xad\x00\x00\x00")

func typeUsersGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeUsersGraphql,
		"type/users.graphql",
	)
}

func typeUsersGraphql() (*asset, error) {
	bytes, err := typeUsersGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/users.graphql", size: 173, mode: os.FileMode(420), modTime: time.Unix(1588343257, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"mutation.graphql": mutationGraphql,
	"query.graphql": queryGraphql,
	"schema.graphql": schemaGraphql,
	"type/admin.graphql": typeAdminGraphql,
	"type/auth.graphql": typeAuthGraphql,
	"type/company.graphql": typeCompanyGraphql,
	"type/course.graphql": typeCourseGraphql,
	"type/delegate.graphql": typeDelegateGraphql,
	"type/manager.graphql": typeManagerGraphql,
	"type/users.graphql": typeUsersGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"mutation.graphql": &bintree{mutationGraphql, map[string]*bintree{}},
	"query.graphql": &bintree{queryGraphql, map[string]*bintree{}},
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
	"type": &bintree{nil, map[string]*bintree{
		"admin.graphql": &bintree{typeAdminGraphql, map[string]*bintree{}},
		"auth.graphql": &bintree{typeAuthGraphql, map[string]*bintree{}},
		"company.graphql": &bintree{typeCompanyGraphql, map[string]*bintree{}},
		"course.graphql": &bintree{typeCourseGraphql, map[string]*bintree{}},
		"delegate.graphql": &bintree{typeDelegateGraphql, map[string]*bintree{}},
		"manager.graphql": &bintree{typeManagerGraphql, map[string]*bintree{}},
		"users.graphql": &bintree{typeUsersGraphql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

