{"version":3,"sources":["views/Changelog.js","components/Markdown.js"],"names":["useStyles","makeStyles","theme","root","paddingTop","spacing","paddingBottom","divider","backgroundColor","colors","grey","marginTop","marginBottom","markdownContainer","marginLeft","marginRight","Changelog","classes","useState","source","setSource","useEffect","fetch","then","response","text","className","title","maxWidth","gutterBottom","variant","escapeHtml","typography","h1","h2","h3","h4","h5","h6","subtitle1","border","height","color","palette","link","textDecoration","Markdown","rest","Prism","highlightAll","clsx"],"mappings":"0OAWMA,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJC,WAAYF,EAAMG,QAAQ,GAC1BC,cAAeJ,EAAMG,QAAQ,IAE/BE,QAAS,CACPC,gBAAiBC,IAAOC,KAAK,KAC7BC,UAAWT,EAAMG,QAAQ,GACzBO,aAAcV,EAAMG,QAAQ,IAE9BQ,kBAAmB,CACjBC,WAAY,EACZC,YAAa,OA4CFC,UAxCf,WACE,IAAMC,EAAUjB,IADG,EAESkB,mBAAS,IAFlB,mBAEZC,EAFY,KAEJC,EAFI,KAUnB,OANAC,qBAAU,WACRC,MAAM,sBACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACE,GAAD,OAAUL,EAAUK,QAC3B,IAGD,kBAAC,IAAD,CACEC,UAAWT,EAAQd,KACnBwB,MAAM,aAEN,kBAAC,IAAD,CAAWC,UAAU,GACnB,kBAAC,IAAD,CACEC,cAAY,EACZC,QAAQ,YAFV,WAMA,kBAAC,IAAD,CAAYA,QAAQ,MAApB,aACA,kBAAC,IAAD,CAASJ,UAAWT,EAAQV,WAE7BY,GACC,kBAAC,IAAD,CACES,SAAS,KACTF,UAAWT,EAAQJ,mBAEnB,kBAAC,IAAD,CACEkB,YAAY,EACZZ,OAAQA,Q,gICnDdnB,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJ,OAAO,eACFD,EAAM8B,WAAWC,GADtB,CAEErB,aAAcV,EAAMG,QAAQ,KAE9B,OAAO,eACFH,EAAM8B,WAAWE,GADtB,CAEEtB,aAAcV,EAAMG,QAAQ,KAE9B,OAAO,eACFH,EAAM8B,WAAWG,GADtB,CAEEvB,aAAcV,EAAMG,QAAQ,KAE9B,OAAO,eACFH,EAAM8B,WAAWI,GADtB,CAEExB,aAAcV,EAAMG,QAAQ,KAE9B,OAAO,eACFH,EAAM8B,WAAWK,GADtB,CAEEzB,aAAcV,EAAMG,QAAQ,KAE9B,OAAO,eACFH,EAAM8B,WAAWM,GADtB,CAEE1B,aAAcV,EAAMG,QAAQ,KAE9B,MAAM,eACDH,EAAM8B,WAAWO,UADtB,CAEE3B,aAAcV,EAAMG,QAAQ,KAE9B,OAAQ,CACNS,WAAYZ,EAAMG,QAAQ,GAC1BO,aAAcV,EAAMG,QAAQ,IAE9B,OAAQ,CACNS,WAAYZ,EAAMG,QAAQ,GAC1BO,aAAcV,EAAMG,QAAQ,IAE9B,OAAO,eACFH,EAAM8B,WAAWO,UADtB,CAEE3B,aAAcV,EAAMG,QAAQ,KAE9B,OAAQ,CACNM,UAAWT,EAAMG,QAAQ,GACzBO,aAAcV,EAAMG,QAAQ,GAC5BG,gBAAiBC,IAAOC,KAAK,KAC7B8B,OAAQ,EACRC,OAAQ,GAEV,MAAO,CACLC,MAAOxC,EAAMyC,QAAQC,KACrB,UAAW,CACTC,eAAgB,mBAwBTC,IAlBf,YAA2C,IAAvBpB,EAAsB,EAAtBA,UAAcqB,EAAQ,6BAClC9B,EAAUjB,IAMhB,OAJAqB,qBAAU,WACR2B,IAAMC,iBACL,IAGD,yBAAKvB,UAAWwB,YAAKjC,EAAQd,KAAMuB,IACjC,kBAAC,IAAkBqB,M","file":"static/js/31.e3e1b01e.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { makeStyles } from '@material-ui/styles';\nimport {\n  Container,\n  Typography,\n  Divider,\n  colors\n} from '@material-ui/core';\nimport Page from 'src/components/Page';\nimport Markdown from 'src/components/Markdown';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    paddingTop: theme.spacing(3),\n    paddingBottom: theme.spacing(3)\n  },\n  divider: {\n    backgroundColor: colors.grey[300],\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(3)\n  },\n  markdownContainer: {\n    marginLeft: 0,\n    marginRight: 0\n  }\n}));\n\nfunction Changelog() {\n  const classes = useStyles();\n  const [source, setSource] = useState('');\n\n  useEffect(() => {\n    fetch('/docs/Changelog.md')\n      .then((response) => response.text())\n      .then((text) => setSource(text));\n  }, []);\n\n  return (\n    <Page\n      className={classes.root}\n      title=\"Changelog\"\n    >\n      <Container maxWidth={false}>\n        <Typography\n          gutterBottom\n          variant=\"overline\"\n        >\n          Support\n        </Typography>\n        <Typography variant=\"h3\">Changelog</Typography>\n        <Divider className={classes.divider} />\n      </Container>\n      {source && (\n        <Container\n          maxWidth=\"md\"\n          className={classes.markdownContainer}\n        >\n          <Markdown\n            escapeHtml={false}\n            source={source}\n          />\n        </Container>\n      )}\n    </Page>\n  );\n}\n\nexport default Changelog;\n","import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport Prism from 'prismjs';\nimport ReactMarkdown from 'react-markdown/with-html';\nimport { makeStyles } from '@material-ui/styles';\nimport { colors } from '@material-ui/core';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    '& h1': {\n      ...theme.typography.h1,\n      marginBottom: theme.spacing(1)\n    },\n    '& h2': {\n      ...theme.typography.h2,\n      marginBottom: theme.spacing(1)\n    },\n    '& h3': {\n      ...theme.typography.h3,\n      marginBottom: theme.spacing(1)\n    },\n    '& h4': {\n      ...theme.typography.h4,\n      marginBottom: theme.spacing(1)\n    },\n    '& h5': {\n      ...theme.typography.h5,\n      marginBottom: theme.spacing(1)\n    },\n    '& h6': {\n      ...theme.typography.h6,\n      marginBottom: theme.spacing(1)\n    },\n    '& p': {\n      ...theme.typography.subtitle1,\n      marginBottom: theme.spacing(2)\n    },\n    '& ul': {\n      marginLeft: theme.spacing(3),\n      marginBottom: theme.spacing(2)\n    },\n    '& ol': {\n      marginLeft: theme.spacing(3),\n      marginBottom: theme.spacing(2)\n    },\n    '& li': {\n      ...theme.typography.subtitle1,\n      marginBottom: theme.spacing(1)\n    },\n    '& hr': {\n      marginTop: theme.spacing(3),\n      marginBottom: theme.spacing(3),\n      backgroundColor: colors.grey[300],\n      border: 0,\n      height: 1\n    },\n    '& a': {\n      color: theme.palette.link,\n      '&:hover': {\n        textDecoration: 'underline'\n      }\n    }\n  }\n}));\n\nfunction Markdown({ className, ...rest }) {\n  const classes = useStyles();\n\n  useEffect(() => {\n    Prism.highlightAll();\n  }, []);\n\n  return (\n    <div className={clsx(classes.root, className)}>\n      <ReactMarkdown {...rest} />\n    </div>\n  );\n}\n\nMarkdown.propTypes = {\n  className: PropTypes.string\n};\n\nexport default Markdown;\n"],"sourceRoot":""}