{"version":3,"sources":["views/OrderManagementList/Header.js","views/OrderManagementList/Results.js","views/OrderManagementList/index.js"],"names":["useStyles","makeStyles","root","Header","className","rest","classes","clsx","Grid","alignItems","container","justify","spacing","item","Typography","component","gutterBottom","variant","Button","color","theme","filterButton","marginRight","content","padding","inner","minWidth","actions","justifyContent","paymentStatusColors","canceled","colors","grey","pending","orange","completed","green","rejected","red","Results","orders","useState","selectedOrders","setSelectedOrders","page","setPage","rowsPerPage","setRowsPerPage","length","Math","ceil","Card","CardHeader","action","GenericMoreButton","title","Divider","CardContent","Table","TableHead","TableRow","TableCell","Checkbox","checked","indeterminate","onChange","event","newSelectedOrders","target","map","order","id","align","TableBody","slice","key","selected","indexOf","selectedIndex","concat","handleSelectOne","value","payment","ref","moment","created_at","format","customer","name","method","currency","total","Label","status","RouterLink","size","to","CardActions","TablePagination","count","onChangePage","newPage","onChangeRowsPerPage","rowsPerPageOptions","TableEditBar","defaultProps","paddingTop","paddingBottom","results","marginTop","OrderManagementList","setOrders","useEffect","mounted","axios","get","then","response","data","Page","Container","maxWidth","SearchBar"],"mappings":"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","file":"static/js/43.cd8cc63d.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/styles';\nimport { Grid, Typography, Button } from '@material-ui/core';\n\nconst useStyles = makeStyles(() => ({\n  root: {}\n}));\n\nfunction Header({ className, ...rest }) {\n  const classes = useStyles();\n\n  return (\n    <div\n      {...rest}\n      className={clsx(classes.root, className)}\n    >\n      <Grid\n        alignItems=\"flex-end\"\n        container\n        justify=\"space-between\"\n        spacing={3}\n      >\n        <Grid item>\n          <Typography\n            component=\"h2\"\n            gutterBottom\n            variant=\"overline\"\n          >\n            Management\n          </Typography>\n          <Typography\n            component=\"h1\"\n            variant=\"h3\"\n          >\n            Orders\n          </Typography>\n        </Grid>\n        <Grid item>\n          <Button\n            color=\"primary\"\n            variant=\"contained\"\n          >\n            Add order\n          </Button>\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n\nHeader.propTypes = {\n  className: PropTypes.string\n};\n\nexport default Header;\n","import React, { useState } from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\nimport clsx from 'clsx';\nimport moment from 'moment';\nimport PropTypes from 'prop-types';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport { makeStyles } from '@material-ui/styles';\nimport {\n  Button,\n  Card,\n  CardActions,\n  CardContent,\n  CardHeader,\n  Checkbox,\n  Divider,\n  Typography,\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TablePagination,\n  TableRow,\n  colors\n} from '@material-ui/core';\nimport Label from 'src/components/Label';\nimport GenericMoreButton from 'src/components/GenericMoreButton';\nimport TableEditBar from 'src/components/TableEditBar';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {},\n  filterButton: {\n    marginRight: theme.spacing(2)\n  },\n  content: {\n    padding: 0\n  },\n  inner: {\n    minWidth: 1150\n  },\n  actions: {\n    padding: theme.spacing(0, 1),\n    justifyContent: 'flex-end'\n  }\n}));\n\nconst paymentStatusColors = {\n  canceled: colors.grey[600],\n  pending: colors.orange[600],\n  completed: colors.green[600],\n  rejected: colors.red[600]\n};\n\nfunction Results({ className, orders, ...rest }) {\n  const classes = useStyles();\n  const [selectedOrders, setSelectedOrders] = useState([]);\n  const [page, setPage] = useState(0);\n  const [rowsPerPage, setRowsPerPage] = useState(10);\n\n  const handleSelectAll = (event) => {\n    const newSelectedOrders = event.target.checked\n      ? orders.map((order) => order.id)\n      : [];\n\n    setSelectedOrders(newSelectedOrders);\n  };\n\n  const handleSelectOne = (event, id) => {\n    const selectedIndex = selectedOrders.indexOf(id);\n    let newSelectedOrders = [];\n\n    if (selectedIndex === -1) {\n      newSelectedOrders = newSelectedOrders.concat(selectedOrders, id);\n    } else if (selectedIndex === 0) {\n      newSelectedOrders = newSelectedOrders.concat(selectedOrders.slice(1));\n    } else if (selectedIndex === selectedOrders.length - 1) {\n      newSelectedOrders = newSelectedOrders.concat(selectedOrders.slice(0, -1));\n    } else if (selectedIndex > 0) {\n      newSelectedOrders = newSelectedOrders.concat(\n        selectedOrders.slice(0, selectedIndex),\n        selectedOrders.slice(selectedIndex + 1)\n      );\n    }\n\n    setSelectedOrders(newSelectedOrders);\n  };\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(event.target.value);\n  };\n\n  return (\n    <div\n      {...rest}\n      className={clsx(classes.root, className)}\n    >\n      <Typography\n        color=\"textSecondary\"\n        gutterBottom\n        variant=\"body2\"\n      >\n        {orders.length}\n        {' '}\n        Records found. Page\n        {' '}\n        {page + 1}\n        {' '}\n        of\n        {' '}\n        {Math.ceil(orders.length / rowsPerPage)}\n      </Typography>\n      <Card>\n        <CardHeader\n          action={<GenericMoreButton />}\n          title=\"Orders\"\n        />\n        <Divider />\n        <CardContent className={classes.content}>\n          <PerfectScrollbar>\n            <div className={classes.inner}>\n              <Table>\n                <TableHead>\n                  <TableRow>\n                    <TableCell padding=\"checkbox\">\n                      <Checkbox\n                        checked={selectedOrders.length === orders.length}\n                        color=\"primary\"\n                        indeterminate={\n                          selectedOrders.length > 0\n                          && selectedOrders.length < orders.length\n                        }\n                        onChange={handleSelectAll}\n                      />\n                    </TableCell>\n                    <TableCell>Ref</TableCell>\n                    <TableCell>Customer</TableCell>\n                    <TableCell>Method</TableCell>\n                    <TableCell>Total</TableCell>\n                    <TableCell>Status</TableCell>\n                    <TableCell align=\"right\">Actions</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {orders.slice(0, rowsPerPage).map((order) => (\n                    <TableRow\n                      key={order.id}\n                      selected={selectedOrders.indexOf(order.id) !== -1}\n                    >\n                      <TableCell padding=\"checkbox\">\n                        <Checkbox\n                          checked={selectedOrders.indexOf(order.id) !== -1}\n                          color=\"primary\"\n                          onChange={(event) => handleSelectOne(event, order.id)}\n                          value={selectedOrders.indexOf(order.id) !== -1}\n                        />\n                      </TableCell>\n                      <TableCell>\n                        {order.payment.ref}\n                        <Typography variant=\"body2\">\n                          {moment(order.created_at).format(\n                            'DD MMM YYYY | hh:mm'\n                          )}\n                        </Typography>\n                      </TableCell>\n\n                      <TableCell>{order.customer.name}</TableCell>\n                      <TableCell>{order.payment.method}</TableCell>\n                      <TableCell>\n                        {order.payment.currency}\n                        {order.payment.total}\n                      </TableCell>\n                      <TableCell>\n                        <Label\n                          color={paymentStatusColors[order.payment.status]}\n                          variant=\"outlined\"\n                        >\n                          {order.payment.status}\n                        </Label>\n                      </TableCell>\n                      <TableCell align=\"right\">\n                        <Button\n                          color=\"primary\"\n                          component={RouterLink}\n                          size=\"small\"\n                          to=\"/management/orders/1\"\n                          variant=\"outlined\"\n                        >\n                          View\n                        </Button>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </div>\n          </PerfectScrollbar>\n        </CardContent>\n        <CardActions className={classes.actions}>\n          <TablePagination\n            component=\"div\"\n            count={orders.length}\n            onChangePage={handleChangePage}\n            onChangeRowsPerPage={handleChangeRowsPerPage}\n            page={page}\n            rowsPerPage={rowsPerPage}\n            rowsPerPageOptions={[5, 10, 25]}\n          />\n        </CardActions>\n      </Card>\n      <TableEditBar selected={selectedOrders} />\n    </div>\n  );\n}\n\nResults.propTypes = {\n  className: PropTypes.string,\n  orders: PropTypes.array\n};\n\nResults.defaultProps = {\n  orders: []\n};\n\nexport default Results;\n","import React, { useEffect, useState } from 'react';\nimport { makeStyles } from '@material-ui/styles';\nimport { Container } from '@material-ui/core';\nimport axios from 'src/utils/axios';\nimport Page from 'src/components/Page';\nimport SearchBar from 'src/components/SearchBar';\nimport Header from './Header';\nimport Results from './Results';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {},\n  container: {\n    paddingTop: theme.spacing(3),\n    paddingBottom: theme.spacing(3)\n  },\n  results: {\n    marginTop: theme.spacing(3)\n  }\n}));\n\nfunction OrderManagementList() {\n  const classes = useStyles();\n  const [orders, setOrders] = useState([]);\n\n  useEffect(() => {\n    let mounted = true;\n\n    const fetchOrders = () => {\n      axios.get('/api/orders').then((response) => {\n        if (mounted) {\n          setOrders(response.data.orders);\n        }\n      });\n    };\n\n    fetchOrders();\n\n    return () => {\n      mounted = false;\n    };\n  }, []);\n\n  return (\n    <Page\n      className={classes.root}\n      title=\"Orders Management List\"\n    >\n      <Container\n        maxWidth={false}\n        className={classes.container}\n      >\n        <Header />\n        <SearchBar />\n        <Results\n          className={classes.results}\n          orders={orders}\n        />\n      </Container>\n    </Page>\n  );\n}\n\nexport default OrderManagementList;\n"],"sourceRoot":""}