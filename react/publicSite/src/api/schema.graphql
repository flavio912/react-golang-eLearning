scalar UUID

schema {
  query: Query
  mutation: Mutation
}

type Query {
  info: String!
  manager(uuid: UUID): Manager
  courses(page: Page, filter: CoursesFilter, orderBy: OrderBy): CoursePage
  course(id: Int!): Course
  category(uuid: UUID!): Category
  categories(page: Page, text: String): CategoryPage
}

type CategoryPage implements PaginatedQuery {
  edges: [Category]
  pageInfo: PageInfo
}

type Mutation {
  managerLogin(input: ManagerLogin!): AuthToken
  createIndividual(input: CreateIndividualInput!): CreateIndividualResponse
  createCompanyRequest(
    company: CreateCompanyInput!
    manager: CreateManagerInput!
    recaptcha: String!
  ): Boolean!
  purchaseCourses(input: PurchaseCoursesInput!): PurchaseCoursesResponse
}

input PurchaseCoursesInput {
  courses: [Int!]!
  users: [UUID!] # List of delegates UUIDs
  extraInvoiceEmail: String
  acceptedTerms: Boolean!
  backgroundCheckConfirm: Boolean
}

type PurchaseCoursesResponse {
  transactionComplete: Boolean! # true if the company is on a contract and thus doesn't need to pay upfront
  stripeClientSecret: String # If transactionComplete is false, this is given so user can pay
}

enum AccessType {
  restricted
  open
}

enum CourseType {
  online
  classroom
}

type Category {
  uuid: UUID
  name: String!
  color: String!
}

input CoursesFilter {
  name: String
  accessType: AccessType
  backgroundCheck: Boolean
  price: Float
  allowedToBuy: Boolean # Show only courses that you are authorized to book
  categoryUUID: UUID
}

type Course {
  id: Int!
  type: CourseType!
  name: String!
  backgroundCheck: Boolean
  accessType: AccessType!
  price: Float!
  color: String
  excerpt: String
  introduction: String
  howToComplete: String
  hoursToComplete: Float
  whatYouLearn: [String!]
  requirements: [String!]
  specificTerms: String
  category: Category
  allowedToBuy: Boolean
  bannerImageURL: String
  expiresInMonths: Int!
}

type CoursePage implements PaginatedQuery {
  edges: [Course]
  pageInfo: PageInfo
}

input CreateManagerInput {
  firstName: String!
  lastName: String!
  email: String!
  jobTitle: String!
  telephone: String!
  password: String!
}

input CreateCompanyInput {
  companyName: String!
  addressLine1: String!
  addressLine2: String!
  county: String!
  postCode: String!
  country: String!
  contactEmail: String!
}

input CreateIndividualInput {
  firstName: String!
  lastName: String!
  jobTitle: String
  telephone: String
  email: String!
  password: String!
}

type CreateIndividualResponse {
  user: User
}

type PageInfo {
  total: Int! # Number of pages after this one
  offset: Int! # The offset of this page from the start
  limit: Int! # The max shown per page
  given: Int! # Number of items given
}

input Page {
  offset: Int
  limit: Int
}

input ManagerFilter {
  name: String
  email: String
  jobTitle: String
  uuid: UUID
  telephone: String
}

input CompanyFilter {
  uuid: UUID
  name: String
}

interface PaginatedQuery {
  pageInfo: PageInfo
}

input OrderBy {
  ascending: Boolean
  field: String!
}

type Company {
  approved: Boolean
  uuid: UUID!
  createdAt: String
  name: String!
  managers(page: Page, filter: ManagerFilter, orderBy: OrderBy): ManagerPage!
  address: Address!
}

type Address {
  addressLine1: String!
  addressLine2: String!
  county: String!
  postCode: String!
  country: String!
}

type ManagerPage implements PaginatedQuery {
  edges: [Manager]
  pageInfo: PageInfo
}

interface User {
  uuid: UUID!
  createdAt: String
  email: String!
  firstName: String!
  lastName: String!
  telephone: String!
  lastLogin: String!
  jobTitle: String!
}

type Manager implements User {
  uuid: UUID!
  createdAt: String
  email: String!
  firstName: String!
  lastName: String!
  telephone: String!
  lastLogin: String!
  jobTitle: String!
  company: Company!
  profileImageUrl: String
}

input ManagerLogin {
  email: String!
  password: String!
}

type AuthToken {
  token: String!
}
