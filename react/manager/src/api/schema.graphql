scalar UUID

schema {
  query: Query
  mutation: Mutation
}

type Query {
  info: String!
  manager(uuid: UUID): Manager
  course(id: Int!): Course
  courses(page: Page, filter: CoursesFilter, orderBy: OrderBy): CoursePage
  delegate(uuid: UUID!): Delegate
  delegates(page: Page, filter: DelegateFilter, orderBy: OrderBy): DelegatePage
}

type Mutation {
  managerLogin(input: ManagerLogin!): AuthToken
  createDelegate(input: CreateDelegateInput!): CreateDelegateResponse
  updateDelegate(input: UpdateDelegateInput!): Delegate
  purchaseCourses(input: PurchaseCoursesInput!): PurchaseCoursesResponse
}

# Delegate

type Delegate {
  uuid: UUID!
  createdAt: String
  TTC_ID: String!
  email: String
  firstName: String!
  lastName: String!
  telephone: String
  lastLogin: String!
  jobTitle: String!
  company: Company!
  profileImageUrl: String
  activity(page: Page): ActivityPage
  myCourses: [MyCourse!]
}

input CreateDelegateInput {
  companyUUID: UUID
  firstName: String!
  lastName: String!
  email: String
  jobTitle: String!
  telephone: String
  generatePassword: Boolean
  profileImageUploadToken: String
}

type CreateDelegateResponse {
  delegate: Delegate!
  generatedPassword: String
}

input UpdateDelegateInput {
  uuid: UUID!
  companyUUID: UUID
  firstName: String
  lastName: String
  jobTitle: String
  email: String
  telephone: String
  profileImageUploadToken: String
  newPassword: String
}

input DelegateFilter {
  uuid: UUID
  ttc_id: String
  name: String
  email: String
  jobTitle: String
  telephone: String
}

type DelegatePage implements PaginatedQuery {
  edges: [Delegate]
  pageInfo: PageInfo
}

# Pagination

type PageInfo {
  total: Int! # Number of pages after this one
  offset: Int! # The offset of this page from the start
  limit: Int! # The max shown per page
  given: Int! # Number of items given
}

input Page {
  offset: Int
  limit: Int
}

input CompanyFilter {
  uuid: UUID
  name: String
}

interface PaginatedQuery {
  pageInfo: PageInfo
}

input OrderBy {
  ascending: Boolean
  field: String!
}

type Company {
  approved: Boolean
  isContract: Boolean!
  uuid: UUID!
  createdAt: String
  name: String!
  managers(page: Page, filter: ManagerFilter, orderBy: OrderBy): ManagerPage!
  delegates(page: Page, filter: DelegateFilter, orderBy: OrderBy): DelegatePage!
  address: Address!
}

type Address {
  addressLine1: String!
  addressLine2: String!
  county: String!
  postCode: String!
  country: String!
}

interface User {
  uuid: UUID!
  createdAt: String
  email: String!
  firstName: String!
  lastName: String!
  telephone: String!
  lastLogin: String!
  jobTitle: String!
}

# Manager

type Manager implements User {
  uuid: UUID!
  createdAt: String
  email: String!
  firstName: String!
  lastName: String!
  telephone: String!
  lastLogin: String!
  jobTitle: String!
  company: Company!
  profileImageUrl: String
}

type ManagerPage implements PaginatedQuery {
  edges: [Manager]
  pageInfo: PageInfo
}

input ManagerLogin {
  email: String!
  password: String!
}

input ManagerFilter {
  name: String
  email: String
  jobTitle: String
  uuid: UUID
  telephone: String
}

type AuthToken {
  token: String!
}

enum AccessType {
  restricted
  open
}

enum CourseType {
  online
  classroom
}

type Course {
  id: Int!
  type: CourseType!
  name: String!
  backgroundCheck: Boolean
  accessType: AccessType!
  price: Float!
  color: String
  excerpt: String
  introduction: String
  howToComplete: String
  hoursToComplete: Float
  whatYouLearn: [String!]
  requirements: [String!]
  specificTerms: String
  category: Category
  allowedToBuy: Boolean
  bannerImageURL: String
}

type CoursePage implements PaginatedQuery {
  edges: [Course]
  pageInfo: PageInfo
}

input CoursesFilter {
  name: String
  accessType: AccessType
  backgroundCheck: Boolean
  price: Float
  allowedToBuy: Boolean # Show only courses that you are authorized to book
}

type Tag {
  uuid: UUID
  name: String!
  color: String!
}

type Category {
  uuid: UUID
  name: String!
  color: String!
}

enum ActivityType {
  newCourse
  activated
  completedCourse
  failedCourse
}

type ActivityPage implements PaginatedQuery {
  edges: [Activity]
  pageInfo: PageInfo
}

type Activity {
  uuid: UUID!
  type: ActivityType!
  createdAt: String!
  course: Course
}

enum CourseStatus {
  complete
  failed
  incomplete
}

# # A course currently being taken by a user
type MyCourse {
  status: CourseStatus!
  course: Course!
  minutesTracked: Float!
}

input PurchaseCoursesInput {
  courses: [Int!]!
  users: [UUID!] # List of delegates UUIDs
  extraInvoiceEmail: String
  acceptedTerms: Boolean!
  backgroundCheckConfirm: Boolean
}

type PurchaseCoursesResponse {
  transactionComplete: Boolean! # true if the company is on a contract and thus doesn't need to pay upfront
  stripeClientSecret: String # If transactionComplete is false, this is given so user can pay
}
