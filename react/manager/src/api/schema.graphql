scalar UUID

schema {
  query: Query
  mutation: Mutation
}

type Query {
  info: String!
  manager(uuid: UUID): Manager
  onlineCourses(
    page: Page
    filter: OnlineCourseFilter
    orderBy: OrderBy
  ): OnlineCoursePage
  classroomCourses(
    page: Page
    filter: ClassroomCourseFilter
    orderBy: OrderBy
  ): ClassroomCoursePage
  delegate(uuid: UUID!): Delegate
  delegates(page: Page, filter: DelegateFilter, orderBy: OrderBy): DelegatePage
}

type Mutation {
  managerLogin(input: ManagerLogin!): AuthToken
  createDelegate(input: CreateDelegateInput!): Delegate
}


# Delegate 

type Delegate implements User {
  uuid: UUID!
  createdAt: String
  TTC_ID: String!
  email: String!
  firstName: String!
  lastName: String!
  telephone: String!
  lastLogin: String!
  jobTitle: String!
  company: Company!
  profileImageUrl: String
}

input CreateDelegateInput {
  firstName: String!
  lastName: String!
  email: String!
  jobTitle: String!
  telephone: String!
}

input DelegateFilter {
  uuid: UUID
  ttc_id: String
  name: String
  email: String
  jobTitle: String
  telephone: String
}

type DelegatePage implements PaginatedQuery {
  edges: [Delegate]
  pageInfo: PageInfo
}

# Pagination

type PageInfo {
  total: Int! # Number of pages after this one
  offset: Int! # The offset of this page from the start
  limit: Int! # The max shown per page
  given: Int! # Number of items given
}

input Page {
  offset: Int
  limit: Int
}

input CompanyFilter {
  uuid: UUID
  name: String
}

interface PaginatedQuery {
  pageInfo: PageInfo
}

input OrderBy {
  ascending: Boolean
  field: String!
}

type Company {
  approved: Boolean
  uuid: UUID!
  createdAt: String
  name: String!
  managers(page: Page, filter: ManagerFilter, orderBy: OrderBy): ManagerPage!
  address: Address!
}

type Address {
  addressLine1: String!
  addressLine2: String!
  county: String!
  postCode: String!
  country: String!
}



interface User {
  uuid: UUID!
  createdAt: String
  email: String!
  firstName: String!
  lastName: String!
  telephone: String!
  lastLogin: String!
  jobTitle: String!
}

# Manager

type Manager implements User {
  uuid: UUID!
  createdAt: String
  email: String!
  firstName: String!
  lastName: String!
  telephone: String!
  lastLogin: String!
  jobTitle: String!
  company: Company!
  profileImageUrl: String
}

type ManagerPage implements PaginatedQuery {
  edges: [Manager]
  pageInfo: PageInfo
}

input ManagerLogin {
  email: String!
  password: String!
}

input ManagerFilter {
  name: String
  email: String
  jobTitle: String
  uuid: UUID
  telephone: String
}


type AuthToken {
  token: String!
}

enum AccessType {
  restricted
  open
}

enum StructureElement {
  module
  test
  lesson
}

enum ModuleElement {
  test
  lesson
}

type CourseInfo {
  name: String
  backgroundCheck: Boolean
  price: Float
  color: String
  excerpt: String
  introduction: String
  specificTerms: String
  category: Category
}

input OnlineCourseFilter {
  courseInfo: CourseInfoFilter
}

input ClassroomCourseFilter {
  courseInfo: CourseInfoFilter
}

type OnlineCourse {
  uuid: UUID!
  info: CourseInfo!
}

type OnlineCoursePage implements PaginatedQuery {
  edges: [OnlineCourse]!
  pageInfo: PageInfo
}

type ClassroomCourse {
  uuid: UUID!
  info: CourseInfo!
}

type ClassroomCoursePage implements PaginatedQuery {
  edges: [ClassroomCourse]!
  pageInfo: PageInfo
}

input CourseItem {
  type: StructureElement!
  uuid: UUID!
  items: [ModuleItem!]!
}

input ModuleItem {
  type: ModuleElement!
  uuid: UUID!
}

type Tag {
  uuid: UUID
  name: String!
  color: String!
}

type Category {
  uuid: UUID
  name: String!
  color: String!
}

